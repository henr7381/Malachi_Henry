
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008590  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800864c  0800864c  0001864c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e4  080088e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080088e4  080088e4  000188e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088ec  080088ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080088f4  080088f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080088fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000070  0800896c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  0800896c  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aec0  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000467b  00000000  00000000  0003af9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0003f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001094  00000000  00000000  00040b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e894  00000000  00000000  00041c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd48  00000000  00000000  000604a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1b41  00000000  00000000  0007e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005804  00000000  00000000  0012fd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00135538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008634 	.word	0x08008634

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08008634 	.word	0x08008634

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f824 	bl	8000480 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_d2uiz>:
 8000444:	b570      	push	{r4, r5, r6, lr}
 8000446:	2200      	movs	r2, #0
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <__aeabi_d2uiz+0x38>)
 800044a:	0004      	movs	r4, r0
 800044c:	000d      	movs	r5, r1
 800044e:	f001 fe21 	bl	8002094 <__aeabi_dcmpge>
 8000452:	2800      	cmp	r0, #0
 8000454:	d104      	bne.n	8000460 <__aeabi_d2uiz+0x1c>
 8000456:	0020      	movs	r0, r4
 8000458:	0029      	movs	r1, r5
 800045a:	f001 fd5b 	bl	8001f14 <__aeabi_d2iz>
 800045e:	bd70      	pop	{r4, r5, r6, pc}
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <__aeabi_d2uiz+0x38>)
 8000462:	2200      	movs	r2, #0
 8000464:	0020      	movs	r0, r4
 8000466:	0029      	movs	r1, r5
 8000468:	f001 f9d2 	bl	8001810 <__aeabi_dsub>
 800046c:	f001 fd52 	bl	8001f14 <__aeabi_d2iz>
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	061b      	lsls	r3, r3, #24
 8000474:	469c      	mov	ip, r3
 8000476:	4460      	add	r0, ip
 8000478:	e7f1      	b.n	800045e <__aeabi_d2uiz+0x1a>
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	41e00000 	.word	0x41e00000

08000480 <__udivmoddi4>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	4657      	mov	r7, sl
 8000484:	464e      	mov	r6, r9
 8000486:	4645      	mov	r5, r8
 8000488:	46de      	mov	lr, fp
 800048a:	b5e0      	push	{r5, r6, r7, lr}
 800048c:	0004      	movs	r4, r0
 800048e:	000d      	movs	r5, r1
 8000490:	4692      	mov	sl, r2
 8000492:	4699      	mov	r9, r3
 8000494:	b083      	sub	sp, #12
 8000496:	428b      	cmp	r3, r1
 8000498:	d830      	bhi.n	80004fc <__udivmoddi4+0x7c>
 800049a:	d02d      	beq.n	80004f8 <__udivmoddi4+0x78>
 800049c:	4649      	mov	r1, r9
 800049e:	4650      	mov	r0, sl
 80004a0:	f001 fe20 	bl	80020e4 <__clzdi2>
 80004a4:	0029      	movs	r1, r5
 80004a6:	0006      	movs	r6, r0
 80004a8:	0020      	movs	r0, r4
 80004aa:	f001 fe1b 	bl	80020e4 <__clzdi2>
 80004ae:	1a33      	subs	r3, r6, r0
 80004b0:	4698      	mov	r8, r3
 80004b2:	3b20      	subs	r3, #32
 80004b4:	d434      	bmi.n	8000520 <__udivmoddi4+0xa0>
 80004b6:	469b      	mov	fp, r3
 80004b8:	4653      	mov	r3, sl
 80004ba:	465a      	mov	r2, fp
 80004bc:	4093      	lsls	r3, r2
 80004be:	4642      	mov	r2, r8
 80004c0:	001f      	movs	r7, r3
 80004c2:	4653      	mov	r3, sl
 80004c4:	4093      	lsls	r3, r2
 80004c6:	001e      	movs	r6, r3
 80004c8:	42af      	cmp	r7, r5
 80004ca:	d83b      	bhi.n	8000544 <__udivmoddi4+0xc4>
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d100      	bne.n	80004d2 <__udivmoddi4+0x52>
 80004d0:	e079      	b.n	80005c6 <__udivmoddi4+0x146>
 80004d2:	465b      	mov	r3, fp
 80004d4:	1ba4      	subs	r4, r4, r6
 80004d6:	41bd      	sbcs	r5, r7
 80004d8:	2b00      	cmp	r3, #0
 80004da:	da00      	bge.n	80004de <__udivmoddi4+0x5e>
 80004dc:	e076      	b.n	80005cc <__udivmoddi4+0x14c>
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	9200      	str	r2, [sp, #0]
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2301      	movs	r3, #1
 80004e8:	465a      	mov	r2, fp
 80004ea:	4093      	lsls	r3, r2
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	4642      	mov	r2, r8
 80004f2:	4093      	lsls	r3, r2
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	e029      	b.n	800054c <__udivmoddi4+0xcc>
 80004f8:	4282      	cmp	r2, r0
 80004fa:	d9cf      	bls.n	800049c <__udivmoddi4+0x1c>
 80004fc:	2200      	movs	r2, #0
 80004fe:	2300      	movs	r3, #0
 8000500:	9200      	str	r2, [sp, #0]
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <__udivmoddi4+0x8e>
 800050a:	601c      	str	r4, [r3, #0]
 800050c:	605d      	str	r5, [r3, #4]
 800050e:	9800      	ldr	r0, [sp, #0]
 8000510:	9901      	ldr	r1, [sp, #4]
 8000512:	b003      	add	sp, #12
 8000514:	bcf0      	pop	{r4, r5, r6, r7}
 8000516:	46bb      	mov	fp, r7
 8000518:	46b2      	mov	sl, r6
 800051a:	46a9      	mov	r9, r5
 800051c:	46a0      	mov	r8, r4
 800051e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000520:	4642      	mov	r2, r8
 8000522:	469b      	mov	fp, r3
 8000524:	2320      	movs	r3, #32
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	4652      	mov	r2, sl
 800052a:	40da      	lsrs	r2, r3
 800052c:	4641      	mov	r1, r8
 800052e:	0013      	movs	r3, r2
 8000530:	464a      	mov	r2, r9
 8000532:	408a      	lsls	r2, r1
 8000534:	0017      	movs	r7, r2
 8000536:	4642      	mov	r2, r8
 8000538:	431f      	orrs	r7, r3
 800053a:	4653      	mov	r3, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	001e      	movs	r6, r3
 8000540:	42af      	cmp	r7, r5
 8000542:	d9c3      	bls.n	80004cc <__udivmoddi4+0x4c>
 8000544:	2200      	movs	r2, #0
 8000546:	2300      	movs	r3, #0
 8000548:	9200      	str	r2, [sp, #0]
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	4643      	mov	r3, r8
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0d8      	beq.n	8000504 <__udivmoddi4+0x84>
 8000552:	07fb      	lsls	r3, r7, #31
 8000554:	0872      	lsrs	r2, r6, #1
 8000556:	431a      	orrs	r2, r3
 8000558:	4646      	mov	r6, r8
 800055a:	087b      	lsrs	r3, r7, #1
 800055c:	e00e      	b.n	800057c <__udivmoddi4+0xfc>
 800055e:	42ab      	cmp	r3, r5
 8000560:	d101      	bne.n	8000566 <__udivmoddi4+0xe6>
 8000562:	42a2      	cmp	r2, r4
 8000564:	d80c      	bhi.n	8000580 <__udivmoddi4+0x100>
 8000566:	1aa4      	subs	r4, r4, r2
 8000568:	419d      	sbcs	r5, r3
 800056a:	2001      	movs	r0, #1
 800056c:	1924      	adds	r4, r4, r4
 800056e:	416d      	adcs	r5, r5
 8000570:	2100      	movs	r1, #0
 8000572:	3e01      	subs	r6, #1
 8000574:	1824      	adds	r4, r4, r0
 8000576:	414d      	adcs	r5, r1
 8000578:	2e00      	cmp	r6, #0
 800057a:	d006      	beq.n	800058a <__udivmoddi4+0x10a>
 800057c:	42ab      	cmp	r3, r5
 800057e:	d9ee      	bls.n	800055e <__udivmoddi4+0xde>
 8000580:	3e01      	subs	r6, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2e00      	cmp	r6, #0
 8000588:	d1f8      	bne.n	800057c <__udivmoddi4+0xfc>
 800058a:	9800      	ldr	r0, [sp, #0]
 800058c:	9901      	ldr	r1, [sp, #4]
 800058e:	465b      	mov	r3, fp
 8000590:	1900      	adds	r0, r0, r4
 8000592:	4169      	adcs	r1, r5
 8000594:	2b00      	cmp	r3, #0
 8000596:	db24      	blt.n	80005e2 <__udivmoddi4+0x162>
 8000598:	002b      	movs	r3, r5
 800059a:	465a      	mov	r2, fp
 800059c:	4644      	mov	r4, r8
 800059e:	40d3      	lsrs	r3, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	40e2      	lsrs	r2, r4
 80005a4:	001c      	movs	r4, r3
 80005a6:	465b      	mov	r3, fp
 80005a8:	0015      	movs	r5, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db2a      	blt.n	8000604 <__udivmoddi4+0x184>
 80005ae:	0026      	movs	r6, r4
 80005b0:	409e      	lsls	r6, r3
 80005b2:	0033      	movs	r3, r6
 80005b4:	0026      	movs	r6, r4
 80005b6:	4647      	mov	r7, r8
 80005b8:	40be      	lsls	r6, r7
 80005ba:	0032      	movs	r2, r6
 80005bc:	1a80      	subs	r0, r0, r2
 80005be:	4199      	sbcs	r1, r3
 80005c0:	9000      	str	r0, [sp, #0]
 80005c2:	9101      	str	r1, [sp, #4]
 80005c4:	e79e      	b.n	8000504 <__udivmoddi4+0x84>
 80005c6:	42a3      	cmp	r3, r4
 80005c8:	d8bc      	bhi.n	8000544 <__udivmoddi4+0xc4>
 80005ca:	e782      	b.n	80004d2 <__udivmoddi4+0x52>
 80005cc:	4642      	mov	r2, r8
 80005ce:	2320      	movs	r3, #32
 80005d0:	2100      	movs	r1, #0
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	9100      	str	r1, [sp, #0]
 80005d8:	9201      	str	r2, [sp, #4]
 80005da:	2201      	movs	r2, #1
 80005dc:	40da      	lsrs	r2, r3
 80005de:	9201      	str	r2, [sp, #4]
 80005e0:	e785      	b.n	80004ee <__udivmoddi4+0x6e>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	002a      	movs	r2, r5
 80005ea:	4646      	mov	r6, r8
 80005ec:	409a      	lsls	r2, r3
 80005ee:	0023      	movs	r3, r4
 80005f0:	40f3      	lsrs	r3, r6
 80005f2:	4644      	mov	r4, r8
 80005f4:	4313      	orrs	r3, r2
 80005f6:	002a      	movs	r2, r5
 80005f8:	40e2      	lsrs	r2, r4
 80005fa:	001c      	movs	r4, r3
 80005fc:	465b      	mov	r3, fp
 80005fe:	0015      	movs	r5, r2
 8000600:	2b00      	cmp	r3, #0
 8000602:	dad4      	bge.n	80005ae <__udivmoddi4+0x12e>
 8000604:	4642      	mov	r2, r8
 8000606:	002f      	movs	r7, r5
 8000608:	2320      	movs	r3, #32
 800060a:	0026      	movs	r6, r4
 800060c:	4097      	lsls	r7, r2
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	40de      	lsrs	r6, r3
 8000612:	003b      	movs	r3, r7
 8000614:	4333      	orrs	r3, r6
 8000616:	e7cd      	b.n	80005b4 <__udivmoddi4+0x134>

08000618 <__aeabi_fdiv>:
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	464f      	mov	r7, r9
 800061c:	4646      	mov	r6, r8
 800061e:	46d6      	mov	lr, sl
 8000620:	0245      	lsls	r5, r0, #9
 8000622:	b5c0      	push	{r6, r7, lr}
 8000624:	0047      	lsls	r7, r0, #1
 8000626:	1c0c      	adds	r4, r1, #0
 8000628:	0a6d      	lsrs	r5, r5, #9
 800062a:	0e3f      	lsrs	r7, r7, #24
 800062c:	0fc6      	lsrs	r6, r0, #31
 800062e:	2f00      	cmp	r7, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fdiv+0x1c>
 8000632:	e06f      	b.n	8000714 <__aeabi_fdiv+0xfc>
 8000634:	2fff      	cmp	r7, #255	; 0xff
 8000636:	d100      	bne.n	800063a <__aeabi_fdiv+0x22>
 8000638:	e074      	b.n	8000724 <__aeabi_fdiv+0x10c>
 800063a:	2300      	movs	r3, #0
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	4699      	mov	r9, r3
 8000640:	469a      	mov	sl, r3
 8000642:	00ed      	lsls	r5, r5, #3
 8000644:	04d2      	lsls	r2, r2, #19
 8000646:	4315      	orrs	r5, r2
 8000648:	3f7f      	subs	r7, #127	; 0x7f
 800064a:	0263      	lsls	r3, r4, #9
 800064c:	0a5b      	lsrs	r3, r3, #9
 800064e:	4698      	mov	r8, r3
 8000650:	0063      	lsls	r3, r4, #1
 8000652:	0e1b      	lsrs	r3, r3, #24
 8000654:	0fe4      	lsrs	r4, r4, #31
 8000656:	2b00      	cmp	r3, #0
 8000658:	d04d      	beq.n	80006f6 <__aeabi_fdiv+0xde>
 800065a:	2bff      	cmp	r3, #255	; 0xff
 800065c:	d045      	beq.n	80006ea <__aeabi_fdiv+0xd2>
 800065e:	4642      	mov	r2, r8
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	00d2      	lsls	r2, r2, #3
 8000664:	04c9      	lsls	r1, r1, #19
 8000666:	4311      	orrs	r1, r2
 8000668:	4688      	mov	r8, r1
 800066a:	2200      	movs	r2, #0
 800066c:	3b7f      	subs	r3, #127	; 0x7f
 800066e:	0031      	movs	r1, r6
 8000670:	1aff      	subs	r7, r7, r3
 8000672:	464b      	mov	r3, r9
 8000674:	4061      	eors	r1, r4
 8000676:	b2c9      	uxtb	r1, r1
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d900      	bls.n	800067e <__aeabi_fdiv+0x66>
 800067c:	e0b8      	b.n	80007f0 <__aeabi_fdiv+0x1d8>
 800067e:	4870      	ldr	r0, [pc, #448]	; (8000840 <__aeabi_fdiv+0x228>)
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	58c3      	ldr	r3, [r0, r3]
 8000684:	469f      	mov	pc, r3
 8000686:	2300      	movs	r3, #0
 8000688:	4698      	mov	r8, r3
 800068a:	0026      	movs	r6, r4
 800068c:	4645      	mov	r5, r8
 800068e:	4692      	mov	sl, r2
 8000690:	4653      	mov	r3, sl
 8000692:	2b02      	cmp	r3, #2
 8000694:	d100      	bne.n	8000698 <__aeabi_fdiv+0x80>
 8000696:	e08d      	b.n	80007b4 <__aeabi_fdiv+0x19c>
 8000698:	2b03      	cmp	r3, #3
 800069a:	d100      	bne.n	800069e <__aeabi_fdiv+0x86>
 800069c:	e0a1      	b.n	80007e2 <__aeabi_fdiv+0x1ca>
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d018      	beq.n	80006d4 <__aeabi_fdiv+0xbc>
 80006a2:	003b      	movs	r3, r7
 80006a4:	337f      	adds	r3, #127	; 0x7f
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	dd6d      	ble.n	8000786 <__aeabi_fdiv+0x16e>
 80006aa:	076a      	lsls	r2, r5, #29
 80006ac:	d004      	beq.n	80006b8 <__aeabi_fdiv+0xa0>
 80006ae:	220f      	movs	r2, #15
 80006b0:	402a      	ands	r2, r5
 80006b2:	2a04      	cmp	r2, #4
 80006b4:	d000      	beq.n	80006b8 <__aeabi_fdiv+0xa0>
 80006b6:	3504      	adds	r5, #4
 80006b8:	012a      	lsls	r2, r5, #4
 80006ba:	d503      	bpl.n	80006c4 <__aeabi_fdiv+0xac>
 80006bc:	4b61      	ldr	r3, [pc, #388]	; (8000844 <__aeabi_fdiv+0x22c>)
 80006be:	401d      	ands	r5, r3
 80006c0:	003b      	movs	r3, r7
 80006c2:	3380      	adds	r3, #128	; 0x80
 80006c4:	2bfe      	cmp	r3, #254	; 0xfe
 80006c6:	dd00      	ble.n	80006ca <__aeabi_fdiv+0xb2>
 80006c8:	e074      	b.n	80007b4 <__aeabi_fdiv+0x19c>
 80006ca:	01aa      	lsls	r2, r5, #6
 80006cc:	0a52      	lsrs	r2, r2, #9
 80006ce:	b2d8      	uxtb	r0, r3
 80006d0:	e002      	b.n	80006d8 <__aeabi_fdiv+0xc0>
 80006d2:	000e      	movs	r6, r1
 80006d4:	2000      	movs	r0, #0
 80006d6:	2200      	movs	r2, #0
 80006d8:	05c0      	lsls	r0, r0, #23
 80006da:	07f6      	lsls	r6, r6, #31
 80006dc:	4310      	orrs	r0, r2
 80006de:	4330      	orrs	r0, r6
 80006e0:	bce0      	pop	{r5, r6, r7}
 80006e2:	46ba      	mov	sl, r7
 80006e4:	46b1      	mov	r9, r6
 80006e6:	46a8      	mov	r8, r5
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ea:	4643      	mov	r3, r8
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d13f      	bne.n	8000770 <__aeabi_fdiv+0x158>
 80006f0:	2202      	movs	r2, #2
 80006f2:	3fff      	subs	r7, #255	; 0xff
 80006f4:	e003      	b.n	80006fe <__aeabi_fdiv+0xe6>
 80006f6:	4643      	mov	r3, r8
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d12d      	bne.n	8000758 <__aeabi_fdiv+0x140>
 80006fc:	2201      	movs	r2, #1
 80006fe:	0031      	movs	r1, r6
 8000700:	464b      	mov	r3, r9
 8000702:	4061      	eors	r1, r4
 8000704:	b2c9      	uxtb	r1, r1
 8000706:	4313      	orrs	r3, r2
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d838      	bhi.n	800077e <__aeabi_fdiv+0x166>
 800070c:	484e      	ldr	r0, [pc, #312]	; (8000848 <__aeabi_fdiv+0x230>)
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	58c3      	ldr	r3, [r0, r3]
 8000712:	469f      	mov	pc, r3
 8000714:	2d00      	cmp	r5, #0
 8000716:	d113      	bne.n	8000740 <__aeabi_fdiv+0x128>
 8000718:	2304      	movs	r3, #4
 800071a:	4699      	mov	r9, r3
 800071c:	3b03      	subs	r3, #3
 800071e:	2700      	movs	r7, #0
 8000720:	469a      	mov	sl, r3
 8000722:	e792      	b.n	800064a <__aeabi_fdiv+0x32>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d105      	bne.n	8000734 <__aeabi_fdiv+0x11c>
 8000728:	2308      	movs	r3, #8
 800072a:	4699      	mov	r9, r3
 800072c:	3b06      	subs	r3, #6
 800072e:	27ff      	movs	r7, #255	; 0xff
 8000730:	469a      	mov	sl, r3
 8000732:	e78a      	b.n	800064a <__aeabi_fdiv+0x32>
 8000734:	230c      	movs	r3, #12
 8000736:	4699      	mov	r9, r3
 8000738:	3b09      	subs	r3, #9
 800073a:	27ff      	movs	r7, #255	; 0xff
 800073c:	469a      	mov	sl, r3
 800073e:	e784      	b.n	800064a <__aeabi_fdiv+0x32>
 8000740:	0028      	movs	r0, r5
 8000742:	f001 fcb1 	bl	80020a8 <__clzsi2>
 8000746:	2776      	movs	r7, #118	; 0x76
 8000748:	1f43      	subs	r3, r0, #5
 800074a:	409d      	lsls	r5, r3
 800074c:	2300      	movs	r3, #0
 800074e:	427f      	negs	r7, r7
 8000750:	4699      	mov	r9, r3
 8000752:	469a      	mov	sl, r3
 8000754:	1a3f      	subs	r7, r7, r0
 8000756:	e778      	b.n	800064a <__aeabi_fdiv+0x32>
 8000758:	4640      	mov	r0, r8
 800075a:	f001 fca5 	bl	80020a8 <__clzsi2>
 800075e:	4642      	mov	r2, r8
 8000760:	1f43      	subs	r3, r0, #5
 8000762:	409a      	lsls	r2, r3
 8000764:	2376      	movs	r3, #118	; 0x76
 8000766:	425b      	negs	r3, r3
 8000768:	4690      	mov	r8, r2
 800076a:	1a1b      	subs	r3, r3, r0
 800076c:	2200      	movs	r2, #0
 800076e:	e77e      	b.n	800066e <__aeabi_fdiv+0x56>
 8000770:	2303      	movs	r3, #3
 8000772:	464a      	mov	r2, r9
 8000774:	431a      	orrs	r2, r3
 8000776:	4691      	mov	r9, r2
 8000778:	33fc      	adds	r3, #252	; 0xfc
 800077a:	2203      	movs	r2, #3
 800077c:	e777      	b.n	800066e <__aeabi_fdiv+0x56>
 800077e:	000e      	movs	r6, r1
 8000780:	20ff      	movs	r0, #255	; 0xff
 8000782:	2200      	movs	r2, #0
 8000784:	e7a8      	b.n	80006d8 <__aeabi_fdiv+0xc0>
 8000786:	2201      	movs	r2, #1
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	2b1b      	cmp	r3, #27
 800078c:	dca2      	bgt.n	80006d4 <__aeabi_fdiv+0xbc>
 800078e:	379e      	adds	r7, #158	; 0x9e
 8000790:	002a      	movs	r2, r5
 8000792:	40bd      	lsls	r5, r7
 8000794:	40da      	lsrs	r2, r3
 8000796:	1e6b      	subs	r3, r5, #1
 8000798:	419d      	sbcs	r5, r3
 800079a:	4315      	orrs	r5, r2
 800079c:	076a      	lsls	r2, r5, #29
 800079e:	d004      	beq.n	80007aa <__aeabi_fdiv+0x192>
 80007a0:	220f      	movs	r2, #15
 80007a2:	402a      	ands	r2, r5
 80007a4:	2a04      	cmp	r2, #4
 80007a6:	d000      	beq.n	80007aa <__aeabi_fdiv+0x192>
 80007a8:	3504      	adds	r5, #4
 80007aa:	016a      	lsls	r2, r5, #5
 80007ac:	d544      	bpl.n	8000838 <__aeabi_fdiv+0x220>
 80007ae:	2001      	movs	r0, #1
 80007b0:	2200      	movs	r2, #0
 80007b2:	e791      	b.n	80006d8 <__aeabi_fdiv+0xc0>
 80007b4:	20ff      	movs	r0, #255	; 0xff
 80007b6:	2200      	movs	r2, #0
 80007b8:	e78e      	b.n	80006d8 <__aeabi_fdiv+0xc0>
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	2600      	movs	r6, #0
 80007be:	20ff      	movs	r0, #255	; 0xff
 80007c0:	03d2      	lsls	r2, r2, #15
 80007c2:	e789      	b.n	80006d8 <__aeabi_fdiv+0xc0>
 80007c4:	2300      	movs	r3, #0
 80007c6:	4698      	mov	r8, r3
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	03d2      	lsls	r2, r2, #15
 80007cc:	4215      	tst	r5, r2
 80007ce:	d008      	beq.n	80007e2 <__aeabi_fdiv+0x1ca>
 80007d0:	4643      	mov	r3, r8
 80007d2:	4213      	tst	r3, r2
 80007d4:	d105      	bne.n	80007e2 <__aeabi_fdiv+0x1ca>
 80007d6:	431a      	orrs	r2, r3
 80007d8:	0252      	lsls	r2, r2, #9
 80007da:	0026      	movs	r6, r4
 80007dc:	20ff      	movs	r0, #255	; 0xff
 80007de:	0a52      	lsrs	r2, r2, #9
 80007e0:	e77a      	b.n	80006d8 <__aeabi_fdiv+0xc0>
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	03d2      	lsls	r2, r2, #15
 80007e6:	432a      	orrs	r2, r5
 80007e8:	0252      	lsls	r2, r2, #9
 80007ea:	20ff      	movs	r0, #255	; 0xff
 80007ec:	0a52      	lsrs	r2, r2, #9
 80007ee:	e773      	b.n	80006d8 <__aeabi_fdiv+0xc0>
 80007f0:	4642      	mov	r2, r8
 80007f2:	016b      	lsls	r3, r5, #5
 80007f4:	0155      	lsls	r5, r2, #5
 80007f6:	42ab      	cmp	r3, r5
 80007f8:	d21a      	bcs.n	8000830 <__aeabi_fdiv+0x218>
 80007fa:	201b      	movs	r0, #27
 80007fc:	2200      	movs	r2, #0
 80007fe:	3f01      	subs	r7, #1
 8000800:	2601      	movs	r6, #1
 8000802:	001c      	movs	r4, r3
 8000804:	0052      	lsls	r2, r2, #1
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	2c00      	cmp	r4, #0
 800080a:	db01      	blt.n	8000810 <__aeabi_fdiv+0x1f8>
 800080c:	429d      	cmp	r5, r3
 800080e:	d801      	bhi.n	8000814 <__aeabi_fdiv+0x1fc>
 8000810:	1b5b      	subs	r3, r3, r5
 8000812:	4332      	orrs	r2, r6
 8000814:	3801      	subs	r0, #1
 8000816:	2800      	cmp	r0, #0
 8000818:	d1f3      	bne.n	8000802 <__aeabi_fdiv+0x1ea>
 800081a:	1e58      	subs	r0, r3, #1
 800081c:	4183      	sbcs	r3, r0
 800081e:	4313      	orrs	r3, r2
 8000820:	001d      	movs	r5, r3
 8000822:	003b      	movs	r3, r7
 8000824:	337f      	adds	r3, #127	; 0x7f
 8000826:	000e      	movs	r6, r1
 8000828:	2b00      	cmp	r3, #0
 800082a:	dd00      	ble.n	800082e <__aeabi_fdiv+0x216>
 800082c:	e73d      	b.n	80006aa <__aeabi_fdiv+0x92>
 800082e:	e7aa      	b.n	8000786 <__aeabi_fdiv+0x16e>
 8000830:	201a      	movs	r0, #26
 8000832:	2201      	movs	r2, #1
 8000834:	1b5b      	subs	r3, r3, r5
 8000836:	e7e3      	b.n	8000800 <__aeabi_fdiv+0x1e8>
 8000838:	01aa      	lsls	r2, r5, #6
 800083a:	2000      	movs	r0, #0
 800083c:	0a52      	lsrs	r2, r2, #9
 800083e:	e74b      	b.n	80006d8 <__aeabi_fdiv+0xc0>
 8000840:	080086e4 	.word	0x080086e4
 8000844:	f7ffffff 	.word	0xf7ffffff
 8000848:	08008724 	.word	0x08008724

0800084c <__aeabi_fmul>:
 800084c:	0243      	lsls	r3, r0, #9
 800084e:	0a5b      	lsrs	r3, r3, #9
 8000850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000852:	464f      	mov	r7, r9
 8000854:	4646      	mov	r6, r8
 8000856:	4699      	mov	r9, r3
 8000858:	46d6      	mov	lr, sl
 800085a:	0fc3      	lsrs	r3, r0, #31
 800085c:	0045      	lsls	r5, r0, #1
 800085e:	4698      	mov	r8, r3
 8000860:	b5c0      	push	{r6, r7, lr}
 8000862:	464b      	mov	r3, r9
 8000864:	1c0f      	adds	r7, r1, #0
 8000866:	0e2d      	lsrs	r5, r5, #24
 8000868:	d100      	bne.n	800086c <__aeabi_fmul+0x20>
 800086a:	e0cb      	b.n	8000a04 <__aeabi_fmul+0x1b8>
 800086c:	2dff      	cmp	r5, #255	; 0xff
 800086e:	d100      	bne.n	8000872 <__aeabi_fmul+0x26>
 8000870:	e0cf      	b.n	8000a12 <__aeabi_fmul+0x1c6>
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	04d2      	lsls	r2, r2, #19
 8000878:	431a      	orrs	r2, r3
 800087a:	2300      	movs	r3, #0
 800087c:	4691      	mov	r9, r2
 800087e:	2600      	movs	r6, #0
 8000880:	469a      	mov	sl, r3
 8000882:	3d7f      	subs	r5, #127	; 0x7f
 8000884:	027c      	lsls	r4, r7, #9
 8000886:	007b      	lsls	r3, r7, #1
 8000888:	0a64      	lsrs	r4, r4, #9
 800088a:	0e1b      	lsrs	r3, r3, #24
 800088c:	0fff      	lsrs	r7, r7, #31
 800088e:	2b00      	cmp	r3, #0
 8000890:	d100      	bne.n	8000894 <__aeabi_fmul+0x48>
 8000892:	e0a9      	b.n	80009e8 <__aeabi_fmul+0x19c>
 8000894:	2bff      	cmp	r3, #255	; 0xff
 8000896:	d011      	beq.n	80008bc <__aeabi_fmul+0x70>
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	00e4      	lsls	r4, r4, #3
 800089c:	04d2      	lsls	r2, r2, #19
 800089e:	4314      	orrs	r4, r2
 80008a0:	4642      	mov	r2, r8
 80008a2:	3b7f      	subs	r3, #127	; 0x7f
 80008a4:	195b      	adds	r3, r3, r5
 80008a6:	407a      	eors	r2, r7
 80008a8:	2000      	movs	r0, #0
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	1c5d      	adds	r5, r3, #1
 80008ae:	2e0a      	cmp	r6, #10
 80008b0:	dd13      	ble.n	80008da <__aeabi_fmul+0x8e>
 80008b2:	003a      	movs	r2, r7
 80008b4:	2e0b      	cmp	r6, #11
 80008b6:	d047      	beq.n	8000948 <__aeabi_fmul+0xfc>
 80008b8:	4647      	mov	r7, r8
 80008ba:	e03f      	b.n	800093c <__aeabi_fmul+0xf0>
 80008bc:	002b      	movs	r3, r5
 80008be:	33ff      	adds	r3, #255	; 0xff
 80008c0:	2c00      	cmp	r4, #0
 80008c2:	d11e      	bne.n	8000902 <__aeabi_fmul+0xb6>
 80008c4:	2202      	movs	r2, #2
 80008c6:	4316      	orrs	r6, r2
 80008c8:	4642      	mov	r2, r8
 80008ca:	3501      	adds	r5, #1
 80008cc:	407a      	eors	r2, r7
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	35ff      	adds	r5, #255	; 0xff
 80008d2:	2e0a      	cmp	r6, #10
 80008d4:	dd00      	ble.n	80008d8 <__aeabi_fmul+0x8c>
 80008d6:	e0e4      	b.n	8000aa2 <__aeabi_fmul+0x256>
 80008d8:	2002      	movs	r0, #2
 80008da:	2e02      	cmp	r6, #2
 80008dc:	dc1c      	bgt.n	8000918 <__aeabi_fmul+0xcc>
 80008de:	3e01      	subs	r6, #1
 80008e0:	2e01      	cmp	r6, #1
 80008e2:	d842      	bhi.n	800096a <__aeabi_fmul+0x11e>
 80008e4:	2802      	cmp	r0, #2
 80008e6:	d03d      	beq.n	8000964 <__aeabi_fmul+0x118>
 80008e8:	2801      	cmp	r0, #1
 80008ea:	d166      	bne.n	80009ba <__aeabi_fmul+0x16e>
 80008ec:	2000      	movs	r0, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	05c0      	lsls	r0, r0, #23
 80008f2:	4308      	orrs	r0, r1
 80008f4:	07d2      	lsls	r2, r2, #31
 80008f6:	4310      	orrs	r0, r2
 80008f8:	bce0      	pop	{r5, r6, r7}
 80008fa:	46ba      	mov	sl, r7
 80008fc:	46b1      	mov	r9, r6
 80008fe:	46a8      	mov	r8, r5
 8000900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000902:	2203      	movs	r2, #3
 8000904:	4316      	orrs	r6, r2
 8000906:	4642      	mov	r2, r8
 8000908:	3501      	adds	r5, #1
 800090a:	407a      	eors	r2, r7
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	35ff      	adds	r5, #255	; 0xff
 8000910:	2e0a      	cmp	r6, #10
 8000912:	dd00      	ble.n	8000916 <__aeabi_fmul+0xca>
 8000914:	e0e4      	b.n	8000ae0 <__aeabi_fmul+0x294>
 8000916:	2003      	movs	r0, #3
 8000918:	2101      	movs	r1, #1
 800091a:	40b1      	lsls	r1, r6
 800091c:	26a6      	movs	r6, #166	; 0xa6
 800091e:	00f6      	lsls	r6, r6, #3
 8000920:	4231      	tst	r1, r6
 8000922:	d10a      	bne.n	800093a <__aeabi_fmul+0xee>
 8000924:	2690      	movs	r6, #144	; 0x90
 8000926:	00b6      	lsls	r6, r6, #2
 8000928:	4231      	tst	r1, r6
 800092a:	d116      	bne.n	800095a <__aeabi_fmul+0x10e>
 800092c:	3eb9      	subs	r6, #185	; 0xb9
 800092e:	3eff      	subs	r6, #255	; 0xff
 8000930:	420e      	tst	r6, r1
 8000932:	d01a      	beq.n	800096a <__aeabi_fmul+0x11e>
 8000934:	46a1      	mov	r9, r4
 8000936:	4682      	mov	sl, r0
 8000938:	e000      	b.n	800093c <__aeabi_fmul+0xf0>
 800093a:	0017      	movs	r7, r2
 800093c:	4653      	mov	r3, sl
 800093e:	003a      	movs	r2, r7
 8000940:	2b02      	cmp	r3, #2
 8000942:	d00f      	beq.n	8000964 <__aeabi_fmul+0x118>
 8000944:	464c      	mov	r4, r9
 8000946:	4650      	mov	r0, sl
 8000948:	2803      	cmp	r0, #3
 800094a:	d1cd      	bne.n	80008e8 <__aeabi_fmul+0x9c>
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	03c9      	lsls	r1, r1, #15
 8000950:	4321      	orrs	r1, r4
 8000952:	0249      	lsls	r1, r1, #9
 8000954:	20ff      	movs	r0, #255	; 0xff
 8000956:	0a49      	lsrs	r1, r1, #9
 8000958:	e7ca      	b.n	80008f0 <__aeabi_fmul+0xa4>
 800095a:	2180      	movs	r1, #128	; 0x80
 800095c:	2200      	movs	r2, #0
 800095e:	20ff      	movs	r0, #255	; 0xff
 8000960:	03c9      	lsls	r1, r1, #15
 8000962:	e7c5      	b.n	80008f0 <__aeabi_fmul+0xa4>
 8000964:	20ff      	movs	r0, #255	; 0xff
 8000966:	2100      	movs	r1, #0
 8000968:	e7c2      	b.n	80008f0 <__aeabi_fmul+0xa4>
 800096a:	0c20      	lsrs	r0, r4, #16
 800096c:	4649      	mov	r1, r9
 800096e:	0424      	lsls	r4, r4, #16
 8000970:	0c24      	lsrs	r4, r4, #16
 8000972:	0027      	movs	r7, r4
 8000974:	0c0e      	lsrs	r6, r1, #16
 8000976:	0409      	lsls	r1, r1, #16
 8000978:	0c09      	lsrs	r1, r1, #16
 800097a:	4374      	muls	r4, r6
 800097c:	434f      	muls	r7, r1
 800097e:	4346      	muls	r6, r0
 8000980:	4348      	muls	r0, r1
 8000982:	0c39      	lsrs	r1, r7, #16
 8000984:	1900      	adds	r0, r0, r4
 8000986:	1809      	adds	r1, r1, r0
 8000988:	428c      	cmp	r4, r1
 800098a:	d903      	bls.n	8000994 <__aeabi_fmul+0x148>
 800098c:	2080      	movs	r0, #128	; 0x80
 800098e:	0240      	lsls	r0, r0, #9
 8000990:	4684      	mov	ip, r0
 8000992:	4466      	add	r6, ip
 8000994:	043f      	lsls	r7, r7, #16
 8000996:	0408      	lsls	r0, r1, #16
 8000998:	0c3f      	lsrs	r7, r7, #16
 800099a:	19c0      	adds	r0, r0, r7
 800099c:	0184      	lsls	r4, r0, #6
 800099e:	1e67      	subs	r7, r4, #1
 80009a0:	41bc      	sbcs	r4, r7
 80009a2:	0c09      	lsrs	r1, r1, #16
 80009a4:	0e80      	lsrs	r0, r0, #26
 80009a6:	1989      	adds	r1, r1, r6
 80009a8:	4304      	orrs	r4, r0
 80009aa:	0189      	lsls	r1, r1, #6
 80009ac:	430c      	orrs	r4, r1
 80009ae:	0109      	lsls	r1, r1, #4
 80009b0:	d571      	bpl.n	8000a96 <__aeabi_fmul+0x24a>
 80009b2:	2301      	movs	r3, #1
 80009b4:	0861      	lsrs	r1, r4, #1
 80009b6:	401c      	ands	r4, r3
 80009b8:	430c      	orrs	r4, r1
 80009ba:	002b      	movs	r3, r5
 80009bc:	337f      	adds	r3, #127	; 0x7f
 80009be:	2b00      	cmp	r3, #0
 80009c0:	dd51      	ble.n	8000a66 <__aeabi_fmul+0x21a>
 80009c2:	0761      	lsls	r1, r4, #29
 80009c4:	d004      	beq.n	80009d0 <__aeabi_fmul+0x184>
 80009c6:	210f      	movs	r1, #15
 80009c8:	4021      	ands	r1, r4
 80009ca:	2904      	cmp	r1, #4
 80009cc:	d000      	beq.n	80009d0 <__aeabi_fmul+0x184>
 80009ce:	3404      	adds	r4, #4
 80009d0:	0121      	lsls	r1, r4, #4
 80009d2:	d503      	bpl.n	80009dc <__aeabi_fmul+0x190>
 80009d4:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <__aeabi_fmul+0x298>)
 80009d6:	401c      	ands	r4, r3
 80009d8:	002b      	movs	r3, r5
 80009da:	3380      	adds	r3, #128	; 0x80
 80009dc:	2bfe      	cmp	r3, #254	; 0xfe
 80009de:	dcc1      	bgt.n	8000964 <__aeabi_fmul+0x118>
 80009e0:	01a1      	lsls	r1, r4, #6
 80009e2:	0a49      	lsrs	r1, r1, #9
 80009e4:	b2d8      	uxtb	r0, r3
 80009e6:	e783      	b.n	80008f0 <__aeabi_fmul+0xa4>
 80009e8:	2c00      	cmp	r4, #0
 80009ea:	d12c      	bne.n	8000a46 <__aeabi_fmul+0x1fa>
 80009ec:	2301      	movs	r3, #1
 80009ee:	4642      	mov	r2, r8
 80009f0:	431e      	orrs	r6, r3
 80009f2:	002b      	movs	r3, r5
 80009f4:	407a      	eors	r2, r7
 80009f6:	2001      	movs	r0, #1
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	1c5d      	adds	r5, r3, #1
 80009fc:	2e0a      	cmp	r6, #10
 80009fe:	dd00      	ble.n	8000a02 <__aeabi_fmul+0x1b6>
 8000a00:	e757      	b.n	80008b2 <__aeabi_fmul+0x66>
 8000a02:	e76a      	b.n	80008da <__aeabi_fmul+0x8e>
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d110      	bne.n	8000a2a <__aeabi_fmul+0x1de>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	2604      	movs	r6, #4
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	469a      	mov	sl, r3
 8000a10:	e738      	b.n	8000884 <__aeabi_fmul+0x38>
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d104      	bne.n	8000a20 <__aeabi_fmul+0x1d4>
 8000a16:	2302      	movs	r3, #2
 8000a18:	2608      	movs	r6, #8
 8000a1a:	25ff      	movs	r5, #255	; 0xff
 8000a1c:	469a      	mov	sl, r3
 8000a1e:	e731      	b.n	8000884 <__aeabi_fmul+0x38>
 8000a20:	2303      	movs	r3, #3
 8000a22:	260c      	movs	r6, #12
 8000a24:	25ff      	movs	r5, #255	; 0xff
 8000a26:	469a      	mov	sl, r3
 8000a28:	e72c      	b.n	8000884 <__aeabi_fmul+0x38>
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	f001 fb3c 	bl	80020a8 <__clzsi2>
 8000a30:	464a      	mov	r2, r9
 8000a32:	1f43      	subs	r3, r0, #5
 8000a34:	2576      	movs	r5, #118	; 0x76
 8000a36:	409a      	lsls	r2, r3
 8000a38:	2300      	movs	r3, #0
 8000a3a:	426d      	negs	r5, r5
 8000a3c:	4691      	mov	r9, r2
 8000a3e:	2600      	movs	r6, #0
 8000a40:	469a      	mov	sl, r3
 8000a42:	1a2d      	subs	r5, r5, r0
 8000a44:	e71e      	b.n	8000884 <__aeabi_fmul+0x38>
 8000a46:	0020      	movs	r0, r4
 8000a48:	f001 fb2e 	bl	80020a8 <__clzsi2>
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	1f43      	subs	r3, r0, #5
 8000a50:	409c      	lsls	r4, r3
 8000a52:	1a2b      	subs	r3, r5, r0
 8000a54:	3b76      	subs	r3, #118	; 0x76
 8000a56:	407a      	eors	r2, r7
 8000a58:	2000      	movs	r0, #0
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	1c5d      	adds	r5, r3, #1
 8000a5e:	2e0a      	cmp	r6, #10
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_fmul+0x218>
 8000a62:	e726      	b.n	80008b2 <__aeabi_fmul+0x66>
 8000a64:	e739      	b.n	80008da <__aeabi_fmul+0x8e>
 8000a66:	2101      	movs	r1, #1
 8000a68:	1acb      	subs	r3, r1, r3
 8000a6a:	2b1b      	cmp	r3, #27
 8000a6c:	dd00      	ble.n	8000a70 <__aeabi_fmul+0x224>
 8000a6e:	e73d      	b.n	80008ec <__aeabi_fmul+0xa0>
 8000a70:	359e      	adds	r5, #158	; 0x9e
 8000a72:	0021      	movs	r1, r4
 8000a74:	40ac      	lsls	r4, r5
 8000a76:	40d9      	lsrs	r1, r3
 8000a78:	1e63      	subs	r3, r4, #1
 8000a7a:	419c      	sbcs	r4, r3
 8000a7c:	4321      	orrs	r1, r4
 8000a7e:	074b      	lsls	r3, r1, #29
 8000a80:	d004      	beq.n	8000a8c <__aeabi_fmul+0x240>
 8000a82:	230f      	movs	r3, #15
 8000a84:	400b      	ands	r3, r1
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fmul+0x240>
 8000a8a:	3104      	adds	r1, #4
 8000a8c:	014b      	lsls	r3, r1, #5
 8000a8e:	d504      	bpl.n	8000a9a <__aeabi_fmul+0x24e>
 8000a90:	2001      	movs	r0, #1
 8000a92:	2100      	movs	r1, #0
 8000a94:	e72c      	b.n	80008f0 <__aeabi_fmul+0xa4>
 8000a96:	001d      	movs	r5, r3
 8000a98:	e78f      	b.n	80009ba <__aeabi_fmul+0x16e>
 8000a9a:	0189      	lsls	r1, r1, #6
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	0a49      	lsrs	r1, r1, #9
 8000aa0:	e726      	b.n	80008f0 <__aeabi_fmul+0xa4>
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	2e0f      	cmp	r6, #15
 8000aa6:	d10c      	bne.n	8000ac2 <__aeabi_fmul+0x276>
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	464b      	mov	r3, r9
 8000aac:	03c9      	lsls	r1, r1, #15
 8000aae:	420b      	tst	r3, r1
 8000ab0:	d00d      	beq.n	8000ace <__aeabi_fmul+0x282>
 8000ab2:	420c      	tst	r4, r1
 8000ab4:	d10b      	bne.n	8000ace <__aeabi_fmul+0x282>
 8000ab6:	4321      	orrs	r1, r4
 8000ab8:	0249      	lsls	r1, r1, #9
 8000aba:	003a      	movs	r2, r7
 8000abc:	20ff      	movs	r0, #255	; 0xff
 8000abe:	0a49      	lsrs	r1, r1, #9
 8000ac0:	e716      	b.n	80008f0 <__aeabi_fmul+0xa4>
 8000ac2:	2e0b      	cmp	r6, #11
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_fmul+0x27c>
 8000ac6:	e6f7      	b.n	80008b8 <__aeabi_fmul+0x6c>
 8000ac8:	46a1      	mov	r9, r4
 8000aca:	469a      	mov	sl, r3
 8000acc:	e736      	b.n	800093c <__aeabi_fmul+0xf0>
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	464b      	mov	r3, r9
 8000ad2:	03c9      	lsls	r1, r1, #15
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	0249      	lsls	r1, r1, #9
 8000ad8:	4642      	mov	r2, r8
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	0a49      	lsrs	r1, r1, #9
 8000ade:	e707      	b.n	80008f0 <__aeabi_fmul+0xa4>
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e7df      	b.n	8000aa4 <__aeabi_fmul+0x258>
 8000ae4:	f7ffffff 	.word	0xf7ffffff

08000ae8 <__aeabi_f2iz>:
 8000ae8:	0241      	lsls	r1, r0, #9
 8000aea:	0042      	lsls	r2, r0, #1
 8000aec:	0fc3      	lsrs	r3, r0, #31
 8000aee:	0a49      	lsrs	r1, r1, #9
 8000af0:	2000      	movs	r0, #0
 8000af2:	0e12      	lsrs	r2, r2, #24
 8000af4:	2a7e      	cmp	r2, #126	; 0x7e
 8000af6:	dd03      	ble.n	8000b00 <__aeabi_f2iz+0x18>
 8000af8:	2a9d      	cmp	r2, #157	; 0x9d
 8000afa:	dd02      	ble.n	8000b02 <__aeabi_f2iz+0x1a>
 8000afc:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <__aeabi_f2iz+0x3c>)
 8000afe:	1898      	adds	r0, r3, r2
 8000b00:	4770      	bx	lr
 8000b02:	2080      	movs	r0, #128	; 0x80
 8000b04:	0400      	lsls	r0, r0, #16
 8000b06:	4301      	orrs	r1, r0
 8000b08:	2a95      	cmp	r2, #149	; 0x95
 8000b0a:	dc07      	bgt.n	8000b1c <__aeabi_f2iz+0x34>
 8000b0c:	2096      	movs	r0, #150	; 0x96
 8000b0e:	1a82      	subs	r2, r0, r2
 8000b10:	40d1      	lsrs	r1, r2
 8000b12:	4248      	negs	r0, r1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1f3      	bne.n	8000b00 <__aeabi_f2iz+0x18>
 8000b18:	0008      	movs	r0, r1
 8000b1a:	e7f1      	b.n	8000b00 <__aeabi_f2iz+0x18>
 8000b1c:	3a96      	subs	r2, #150	; 0x96
 8000b1e:	4091      	lsls	r1, r2
 8000b20:	e7f7      	b.n	8000b12 <__aeabi_f2iz+0x2a>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	7fffffff 	.word	0x7fffffff

08000b28 <__aeabi_i2f>:
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d013      	beq.n	8000b56 <__aeabi_i2f+0x2e>
 8000b2e:	17c3      	asrs	r3, r0, #31
 8000b30:	18c5      	adds	r5, r0, r3
 8000b32:	405d      	eors	r5, r3
 8000b34:	0fc4      	lsrs	r4, r0, #31
 8000b36:	0028      	movs	r0, r5
 8000b38:	f001 fab6 	bl	80020a8 <__clzsi2>
 8000b3c:	239e      	movs	r3, #158	; 0x9e
 8000b3e:	0001      	movs	r1, r0
 8000b40:	1a1b      	subs	r3, r3, r0
 8000b42:	2b96      	cmp	r3, #150	; 0x96
 8000b44:	dc0f      	bgt.n	8000b66 <__aeabi_i2f+0x3e>
 8000b46:	2808      	cmp	r0, #8
 8000b48:	d031      	beq.n	8000bae <__aeabi_i2f+0x86>
 8000b4a:	3908      	subs	r1, #8
 8000b4c:	408d      	lsls	r5, r1
 8000b4e:	026d      	lsls	r5, r5, #9
 8000b50:	0a6d      	lsrs	r5, r5, #9
 8000b52:	b2d8      	uxtb	r0, r3
 8000b54:	e002      	b.n	8000b5c <__aeabi_i2f+0x34>
 8000b56:	2400      	movs	r4, #0
 8000b58:	2000      	movs	r0, #0
 8000b5a:	2500      	movs	r5, #0
 8000b5c:	05c0      	lsls	r0, r0, #23
 8000b5e:	4328      	orrs	r0, r5
 8000b60:	07e4      	lsls	r4, r4, #31
 8000b62:	4320      	orrs	r0, r4
 8000b64:	bd70      	pop	{r4, r5, r6, pc}
 8000b66:	2b99      	cmp	r3, #153	; 0x99
 8000b68:	dd0c      	ble.n	8000b84 <__aeabi_i2f+0x5c>
 8000b6a:	2205      	movs	r2, #5
 8000b6c:	1a12      	subs	r2, r2, r0
 8000b6e:	0028      	movs	r0, r5
 8000b70:	40d0      	lsrs	r0, r2
 8000b72:	0002      	movs	r2, r0
 8000b74:	0008      	movs	r0, r1
 8000b76:	301b      	adds	r0, #27
 8000b78:	4085      	lsls	r5, r0
 8000b7a:	0028      	movs	r0, r5
 8000b7c:	1e45      	subs	r5, r0, #1
 8000b7e:	41a8      	sbcs	r0, r5
 8000b80:	4302      	orrs	r2, r0
 8000b82:	0015      	movs	r5, r2
 8000b84:	2905      	cmp	r1, #5
 8000b86:	dc16      	bgt.n	8000bb6 <__aeabi_i2f+0x8e>
 8000b88:	002a      	movs	r2, r5
 8000b8a:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <__aeabi_i2f+0xa0>)
 8000b8c:	4002      	ands	r2, r0
 8000b8e:	076e      	lsls	r6, r5, #29
 8000b90:	d009      	beq.n	8000ba6 <__aeabi_i2f+0x7e>
 8000b92:	260f      	movs	r6, #15
 8000b94:	4035      	ands	r5, r6
 8000b96:	2d04      	cmp	r5, #4
 8000b98:	d005      	beq.n	8000ba6 <__aeabi_i2f+0x7e>
 8000b9a:	3204      	adds	r2, #4
 8000b9c:	0155      	lsls	r5, r2, #5
 8000b9e:	d502      	bpl.n	8000ba6 <__aeabi_i2f+0x7e>
 8000ba0:	239f      	movs	r3, #159	; 0x9f
 8000ba2:	4002      	ands	r2, r0
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	0192      	lsls	r2, r2, #6
 8000ba8:	0a55      	lsrs	r5, r2, #9
 8000baa:	b2d8      	uxtb	r0, r3
 8000bac:	e7d6      	b.n	8000b5c <__aeabi_i2f+0x34>
 8000bae:	026d      	lsls	r5, r5, #9
 8000bb0:	2096      	movs	r0, #150	; 0x96
 8000bb2:	0a6d      	lsrs	r5, r5, #9
 8000bb4:	e7d2      	b.n	8000b5c <__aeabi_i2f+0x34>
 8000bb6:	1f4a      	subs	r2, r1, #5
 8000bb8:	4095      	lsls	r5, r2
 8000bba:	002a      	movs	r2, r5
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <__aeabi_i2f+0xa0>)
 8000bbe:	4002      	ands	r2, r0
 8000bc0:	076e      	lsls	r6, r5, #29
 8000bc2:	d0f0      	beq.n	8000ba6 <__aeabi_i2f+0x7e>
 8000bc4:	e7e5      	b.n	8000b92 <__aeabi_i2f+0x6a>
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	fbffffff 	.word	0xfbffffff

08000bcc <__aeabi_dadd>:
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	464f      	mov	r7, r9
 8000bd0:	4646      	mov	r6, r8
 8000bd2:	46d6      	mov	lr, sl
 8000bd4:	0004      	movs	r4, r0
 8000bd6:	b5c0      	push	{r6, r7, lr}
 8000bd8:	001f      	movs	r7, r3
 8000bda:	030b      	lsls	r3, r1, #12
 8000bdc:	0010      	movs	r0, r2
 8000bde:	004e      	lsls	r6, r1, #1
 8000be0:	0a5b      	lsrs	r3, r3, #9
 8000be2:	0fcd      	lsrs	r5, r1, #31
 8000be4:	0f61      	lsrs	r1, r4, #29
 8000be6:	007a      	lsls	r2, r7, #1
 8000be8:	4319      	orrs	r1, r3
 8000bea:	00e3      	lsls	r3, r4, #3
 8000bec:	033c      	lsls	r4, r7, #12
 8000bee:	0fff      	lsrs	r7, r7, #31
 8000bf0:	46bc      	mov	ip, r7
 8000bf2:	0a64      	lsrs	r4, r4, #9
 8000bf4:	0f47      	lsrs	r7, r0, #29
 8000bf6:	4327      	orrs	r7, r4
 8000bf8:	0d76      	lsrs	r6, r6, #21
 8000bfa:	0d52      	lsrs	r2, r2, #21
 8000bfc:	00c0      	lsls	r0, r0, #3
 8000bfe:	46b9      	mov	r9, r7
 8000c00:	4680      	mov	r8, r0
 8000c02:	1ab7      	subs	r7, r6, r2
 8000c04:	4565      	cmp	r5, ip
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dadd+0x3e>
 8000c08:	e09b      	b.n	8000d42 <__aeabi_dadd+0x176>
 8000c0a:	2f00      	cmp	r7, #0
 8000c0c:	dc00      	bgt.n	8000c10 <__aeabi_dadd+0x44>
 8000c0e:	e084      	b.n	8000d1a <__aeabi_dadd+0x14e>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dadd+0x4a>
 8000c14:	e0be      	b.n	8000d94 <__aeabi_dadd+0x1c8>
 8000c16:	4ac8      	ldr	r2, [pc, #800]	; (8000f38 <__aeabi_dadd+0x36c>)
 8000c18:	4296      	cmp	r6, r2
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x52>
 8000c1c:	e124      	b.n	8000e68 <__aeabi_dadd+0x29c>
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	464c      	mov	r4, r9
 8000c22:	0412      	lsls	r2, r2, #16
 8000c24:	4314      	orrs	r4, r2
 8000c26:	46a1      	mov	r9, r4
 8000c28:	2f38      	cmp	r7, #56	; 0x38
 8000c2a:	dd00      	ble.n	8000c2e <__aeabi_dadd+0x62>
 8000c2c:	e167      	b.n	8000efe <__aeabi_dadd+0x332>
 8000c2e:	2f1f      	cmp	r7, #31
 8000c30:	dd00      	ble.n	8000c34 <__aeabi_dadd+0x68>
 8000c32:	e1d6      	b.n	8000fe2 <__aeabi_dadd+0x416>
 8000c34:	2220      	movs	r2, #32
 8000c36:	464c      	mov	r4, r9
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	46a2      	mov	sl, r4
 8000c3e:	4644      	mov	r4, r8
 8000c40:	40fc      	lsrs	r4, r7
 8000c42:	0020      	movs	r0, r4
 8000c44:	4654      	mov	r4, sl
 8000c46:	4304      	orrs	r4, r0
 8000c48:	4640      	mov	r0, r8
 8000c4a:	4090      	lsls	r0, r2
 8000c4c:	1e42      	subs	r2, r0, #1
 8000c4e:	4190      	sbcs	r0, r2
 8000c50:	464a      	mov	r2, r9
 8000c52:	40fa      	lsrs	r2, r7
 8000c54:	4304      	orrs	r4, r0
 8000c56:	1a89      	subs	r1, r1, r2
 8000c58:	1b1c      	subs	r4, r3, r4
 8000c5a:	42a3      	cmp	r3, r4
 8000c5c:	4192      	sbcs	r2, r2
 8000c5e:	4252      	negs	r2, r2
 8000c60:	1a8b      	subs	r3, r1, r2
 8000c62:	469a      	mov	sl, r3
 8000c64:	4653      	mov	r3, sl
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	d400      	bmi.n	8000c6c <__aeabi_dadd+0xa0>
 8000c6a:	e0d4      	b.n	8000e16 <__aeabi_dadd+0x24a>
 8000c6c:	4653      	mov	r3, sl
 8000c6e:	025a      	lsls	r2, r3, #9
 8000c70:	0a53      	lsrs	r3, r2, #9
 8000c72:	469a      	mov	sl, r3
 8000c74:	4653      	mov	r3, sl
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d100      	bne.n	8000c7c <__aeabi_dadd+0xb0>
 8000c7a:	e104      	b.n	8000e86 <__aeabi_dadd+0x2ba>
 8000c7c:	4650      	mov	r0, sl
 8000c7e:	f001 fa13 	bl	80020a8 <__clzsi2>
 8000c82:	0003      	movs	r3, r0
 8000c84:	3b08      	subs	r3, #8
 8000c86:	2220      	movs	r2, #32
 8000c88:	0020      	movs	r0, r4
 8000c8a:	1ad2      	subs	r2, r2, r3
 8000c8c:	4651      	mov	r1, sl
 8000c8e:	40d0      	lsrs	r0, r2
 8000c90:	4099      	lsls	r1, r3
 8000c92:	0002      	movs	r2, r0
 8000c94:	409c      	lsls	r4, r3
 8000c96:	430a      	orrs	r2, r1
 8000c98:	42b3      	cmp	r3, r6
 8000c9a:	da00      	bge.n	8000c9e <__aeabi_dadd+0xd2>
 8000c9c:	e102      	b.n	8000ea4 <__aeabi_dadd+0x2d8>
 8000c9e:	1b9b      	subs	r3, r3, r6
 8000ca0:	1c59      	adds	r1, r3, #1
 8000ca2:	291f      	cmp	r1, #31
 8000ca4:	dd00      	ble.n	8000ca8 <__aeabi_dadd+0xdc>
 8000ca6:	e0a7      	b.n	8000df8 <__aeabi_dadd+0x22c>
 8000ca8:	2320      	movs	r3, #32
 8000caa:	0010      	movs	r0, r2
 8000cac:	0026      	movs	r6, r4
 8000cae:	1a5b      	subs	r3, r3, r1
 8000cb0:	409c      	lsls	r4, r3
 8000cb2:	4098      	lsls	r0, r3
 8000cb4:	40ce      	lsrs	r6, r1
 8000cb6:	40ca      	lsrs	r2, r1
 8000cb8:	1e63      	subs	r3, r4, #1
 8000cba:	419c      	sbcs	r4, r3
 8000cbc:	4330      	orrs	r0, r6
 8000cbe:	4692      	mov	sl, r2
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	4304      	orrs	r4, r0
 8000cc4:	0763      	lsls	r3, r4, #29
 8000cc6:	d009      	beq.n	8000cdc <__aeabi_dadd+0x110>
 8000cc8:	230f      	movs	r3, #15
 8000cca:	4023      	ands	r3, r4
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d005      	beq.n	8000cdc <__aeabi_dadd+0x110>
 8000cd0:	1d23      	adds	r3, r4, #4
 8000cd2:	42a3      	cmp	r3, r4
 8000cd4:	41a4      	sbcs	r4, r4
 8000cd6:	4264      	negs	r4, r4
 8000cd8:	44a2      	add	sl, r4
 8000cda:	001c      	movs	r4, r3
 8000cdc:	4653      	mov	r3, sl
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_dadd+0x118>
 8000ce2:	e09b      	b.n	8000e1c <__aeabi_dadd+0x250>
 8000ce4:	4b94      	ldr	r3, [pc, #592]	; (8000f38 <__aeabi_dadd+0x36c>)
 8000ce6:	3601      	adds	r6, #1
 8000ce8:	429e      	cmp	r6, r3
 8000cea:	d100      	bne.n	8000cee <__aeabi_dadd+0x122>
 8000cec:	e0b8      	b.n	8000e60 <__aeabi_dadd+0x294>
 8000cee:	4653      	mov	r3, sl
 8000cf0:	4992      	ldr	r1, [pc, #584]	; (8000f3c <__aeabi_dadd+0x370>)
 8000cf2:	08e4      	lsrs	r4, r4, #3
 8000cf4:	400b      	ands	r3, r1
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	075b      	lsls	r3, r3, #29
 8000cfa:	4323      	orrs	r3, r4
 8000cfc:	0572      	lsls	r2, r6, #21
 8000cfe:	024c      	lsls	r4, r1, #9
 8000d00:	0b24      	lsrs	r4, r4, #12
 8000d02:	0d52      	lsrs	r2, r2, #21
 8000d04:	0512      	lsls	r2, r2, #20
 8000d06:	07ed      	lsls	r5, r5, #31
 8000d08:	4322      	orrs	r2, r4
 8000d0a:	432a      	orrs	r2, r5
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	0011      	movs	r1, r2
 8000d10:	bce0      	pop	{r5, r6, r7}
 8000d12:	46ba      	mov	sl, r7
 8000d14:	46b1      	mov	r9, r6
 8000d16:	46a8      	mov	r8, r5
 8000d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d048      	beq.n	8000db0 <__aeabi_dadd+0x1e4>
 8000d1e:	1b97      	subs	r7, r2, r6
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d000      	beq.n	8000d26 <__aeabi_dadd+0x15a>
 8000d24:	e10e      	b.n	8000f44 <__aeabi_dadd+0x378>
 8000d26:	000c      	movs	r4, r1
 8000d28:	431c      	orrs	r4, r3
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_dadd+0x162>
 8000d2c:	e1b7      	b.n	800109e <__aeabi_dadd+0x4d2>
 8000d2e:	1e7c      	subs	r4, r7, #1
 8000d30:	2f01      	cmp	r7, #1
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dadd+0x16a>
 8000d34:	e226      	b.n	8001184 <__aeabi_dadd+0x5b8>
 8000d36:	4d80      	ldr	r5, [pc, #512]	; (8000f38 <__aeabi_dadd+0x36c>)
 8000d38:	42af      	cmp	r7, r5
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_dadd+0x172>
 8000d3c:	e1d5      	b.n	80010ea <__aeabi_dadd+0x51e>
 8000d3e:	0027      	movs	r7, r4
 8000d40:	e107      	b.n	8000f52 <__aeabi_dadd+0x386>
 8000d42:	2f00      	cmp	r7, #0
 8000d44:	dc00      	bgt.n	8000d48 <__aeabi_dadd+0x17c>
 8000d46:	e0b2      	b.n	8000eae <__aeabi_dadd+0x2e2>
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d047      	beq.n	8000ddc <__aeabi_dadd+0x210>
 8000d4c:	4a7a      	ldr	r2, [pc, #488]	; (8000f38 <__aeabi_dadd+0x36c>)
 8000d4e:	4296      	cmp	r6, r2
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x188>
 8000d52:	e089      	b.n	8000e68 <__aeabi_dadd+0x29c>
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	464c      	mov	r4, r9
 8000d58:	0412      	lsls	r2, r2, #16
 8000d5a:	4314      	orrs	r4, r2
 8000d5c:	46a1      	mov	r9, r4
 8000d5e:	2f38      	cmp	r7, #56	; 0x38
 8000d60:	dc6b      	bgt.n	8000e3a <__aeabi_dadd+0x26e>
 8000d62:	2f1f      	cmp	r7, #31
 8000d64:	dc00      	bgt.n	8000d68 <__aeabi_dadd+0x19c>
 8000d66:	e16e      	b.n	8001046 <__aeabi_dadd+0x47a>
 8000d68:	003a      	movs	r2, r7
 8000d6a:	4648      	mov	r0, r9
 8000d6c:	3a20      	subs	r2, #32
 8000d6e:	40d0      	lsrs	r0, r2
 8000d70:	4684      	mov	ip, r0
 8000d72:	2f20      	cmp	r7, #32
 8000d74:	d007      	beq.n	8000d86 <__aeabi_dadd+0x1ba>
 8000d76:	2240      	movs	r2, #64	; 0x40
 8000d78:	4648      	mov	r0, r9
 8000d7a:	1bd2      	subs	r2, r2, r7
 8000d7c:	4090      	lsls	r0, r2
 8000d7e:	0002      	movs	r2, r0
 8000d80:	4640      	mov	r0, r8
 8000d82:	4310      	orrs	r0, r2
 8000d84:	4680      	mov	r8, r0
 8000d86:	4640      	mov	r0, r8
 8000d88:	1e42      	subs	r2, r0, #1
 8000d8a:	4190      	sbcs	r0, r2
 8000d8c:	4662      	mov	r2, ip
 8000d8e:	0004      	movs	r4, r0
 8000d90:	4314      	orrs	r4, r2
 8000d92:	e057      	b.n	8000e44 <__aeabi_dadd+0x278>
 8000d94:	464a      	mov	r2, r9
 8000d96:	4302      	orrs	r2, r0
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x1d0>
 8000d9a:	e103      	b.n	8000fa4 <__aeabi_dadd+0x3d8>
 8000d9c:	1e7a      	subs	r2, r7, #1
 8000d9e:	2f01      	cmp	r7, #1
 8000da0:	d100      	bne.n	8000da4 <__aeabi_dadd+0x1d8>
 8000da2:	e193      	b.n	80010cc <__aeabi_dadd+0x500>
 8000da4:	4c64      	ldr	r4, [pc, #400]	; (8000f38 <__aeabi_dadd+0x36c>)
 8000da6:	42a7      	cmp	r7, r4
 8000da8:	d100      	bne.n	8000dac <__aeabi_dadd+0x1e0>
 8000daa:	e18a      	b.n	80010c2 <__aeabi_dadd+0x4f6>
 8000dac:	0017      	movs	r7, r2
 8000dae:	e73b      	b.n	8000c28 <__aeabi_dadd+0x5c>
 8000db0:	4c63      	ldr	r4, [pc, #396]	; (8000f40 <__aeabi_dadd+0x374>)
 8000db2:	1c72      	adds	r2, r6, #1
 8000db4:	4222      	tst	r2, r4
 8000db6:	d000      	beq.n	8000dba <__aeabi_dadd+0x1ee>
 8000db8:	e0e0      	b.n	8000f7c <__aeabi_dadd+0x3b0>
 8000dba:	000a      	movs	r2, r1
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_dadd+0x1f8>
 8000dc2:	e174      	b.n	80010ae <__aeabi_dadd+0x4e2>
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dadd+0x1fe>
 8000dc8:	e1d0      	b.n	800116c <__aeabi_dadd+0x5a0>
 8000dca:	464a      	mov	r2, r9
 8000dcc:	4302      	orrs	r2, r0
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_dadd+0x206>
 8000dd0:	e1e3      	b.n	800119a <__aeabi_dadd+0x5ce>
 8000dd2:	074a      	lsls	r2, r1, #29
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	08c9      	lsrs	r1, r1, #3
 8000dda:	e029      	b.n	8000e30 <__aeabi_dadd+0x264>
 8000ddc:	464a      	mov	r2, r9
 8000dde:	4302      	orrs	r2, r0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_dadd+0x218>
 8000de2:	e17d      	b.n	80010e0 <__aeabi_dadd+0x514>
 8000de4:	1e7a      	subs	r2, r7, #1
 8000de6:	2f01      	cmp	r7, #1
 8000de8:	d100      	bne.n	8000dec <__aeabi_dadd+0x220>
 8000dea:	e0e0      	b.n	8000fae <__aeabi_dadd+0x3e2>
 8000dec:	4c52      	ldr	r4, [pc, #328]	; (8000f38 <__aeabi_dadd+0x36c>)
 8000dee:	42a7      	cmp	r7, r4
 8000df0:	d100      	bne.n	8000df4 <__aeabi_dadd+0x228>
 8000df2:	e166      	b.n	80010c2 <__aeabi_dadd+0x4f6>
 8000df4:	0017      	movs	r7, r2
 8000df6:	e7b2      	b.n	8000d5e <__aeabi_dadd+0x192>
 8000df8:	0010      	movs	r0, r2
 8000dfa:	3b1f      	subs	r3, #31
 8000dfc:	40d8      	lsrs	r0, r3
 8000dfe:	2920      	cmp	r1, #32
 8000e00:	d003      	beq.n	8000e0a <__aeabi_dadd+0x23e>
 8000e02:	2340      	movs	r3, #64	; 0x40
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	409a      	lsls	r2, r3
 8000e08:	4314      	orrs	r4, r2
 8000e0a:	1e63      	subs	r3, r4, #1
 8000e0c:	419c      	sbcs	r4, r3
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2600      	movs	r6, #0
 8000e12:	469a      	mov	sl, r3
 8000e14:	4304      	orrs	r4, r0
 8000e16:	0763      	lsls	r3, r4, #29
 8000e18:	d000      	beq.n	8000e1c <__aeabi_dadd+0x250>
 8000e1a:	e755      	b.n	8000cc8 <__aeabi_dadd+0xfc>
 8000e1c:	4652      	mov	r2, sl
 8000e1e:	08e3      	lsrs	r3, r4, #3
 8000e20:	0752      	lsls	r2, r2, #29
 8000e22:	4313      	orrs	r3, r2
 8000e24:	4652      	mov	r2, sl
 8000e26:	0037      	movs	r7, r6
 8000e28:	08d1      	lsrs	r1, r2, #3
 8000e2a:	4a43      	ldr	r2, [pc, #268]	; (8000f38 <__aeabi_dadd+0x36c>)
 8000e2c:	4297      	cmp	r7, r2
 8000e2e:	d01f      	beq.n	8000e70 <__aeabi_dadd+0x2a4>
 8000e30:	0309      	lsls	r1, r1, #12
 8000e32:	057a      	lsls	r2, r7, #21
 8000e34:	0b0c      	lsrs	r4, r1, #12
 8000e36:	0d52      	lsrs	r2, r2, #21
 8000e38:	e764      	b.n	8000d04 <__aeabi_dadd+0x138>
 8000e3a:	4642      	mov	r2, r8
 8000e3c:	464c      	mov	r4, r9
 8000e3e:	4314      	orrs	r4, r2
 8000e40:	1e62      	subs	r2, r4, #1
 8000e42:	4194      	sbcs	r4, r2
 8000e44:	18e4      	adds	r4, r4, r3
 8000e46:	429c      	cmp	r4, r3
 8000e48:	4192      	sbcs	r2, r2
 8000e4a:	4252      	negs	r2, r2
 8000e4c:	4692      	mov	sl, r2
 8000e4e:	448a      	add	sl, r1
 8000e50:	4653      	mov	r3, sl
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	d5df      	bpl.n	8000e16 <__aeabi_dadd+0x24a>
 8000e56:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <__aeabi_dadd+0x36c>)
 8000e58:	3601      	adds	r6, #1
 8000e5a:	429e      	cmp	r6, r3
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_dadd+0x294>
 8000e5e:	e0b3      	b.n	8000fc8 <__aeabi_dadd+0x3fc>
 8000e60:	0032      	movs	r2, r6
 8000e62:	2400      	movs	r4, #0
 8000e64:	2300      	movs	r3, #0
 8000e66:	e74d      	b.n	8000d04 <__aeabi_dadd+0x138>
 8000e68:	074a      	lsls	r2, r1, #29
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	08c9      	lsrs	r1, r1, #3
 8000e70:	001a      	movs	r2, r3
 8000e72:	430a      	orrs	r2, r1
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dadd+0x2ac>
 8000e76:	e200      	b.n	800127a <__aeabi_dadd+0x6ae>
 8000e78:	2480      	movs	r4, #128	; 0x80
 8000e7a:	0324      	lsls	r4, r4, #12
 8000e7c:	430c      	orrs	r4, r1
 8000e7e:	0324      	lsls	r4, r4, #12
 8000e80:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <__aeabi_dadd+0x36c>)
 8000e82:	0b24      	lsrs	r4, r4, #12
 8000e84:	e73e      	b.n	8000d04 <__aeabi_dadd+0x138>
 8000e86:	0020      	movs	r0, r4
 8000e88:	f001 f90e 	bl	80020a8 <__clzsi2>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	3318      	adds	r3, #24
 8000e90:	2b1f      	cmp	r3, #31
 8000e92:	dc00      	bgt.n	8000e96 <__aeabi_dadd+0x2ca>
 8000e94:	e6f7      	b.n	8000c86 <__aeabi_dadd+0xba>
 8000e96:	0022      	movs	r2, r4
 8000e98:	3808      	subs	r0, #8
 8000e9a:	4082      	lsls	r2, r0
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	42b3      	cmp	r3, r6
 8000ea0:	db00      	blt.n	8000ea4 <__aeabi_dadd+0x2d8>
 8000ea2:	e6fc      	b.n	8000c9e <__aeabi_dadd+0xd2>
 8000ea4:	1af6      	subs	r6, r6, r3
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <__aeabi_dadd+0x370>)
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	4692      	mov	sl, r2
 8000eac:	e70a      	b.n	8000cc4 <__aeabi_dadd+0xf8>
 8000eae:	2f00      	cmp	r7, #0
 8000eb0:	d02b      	beq.n	8000f0a <__aeabi_dadd+0x33e>
 8000eb2:	1b97      	subs	r7, r2, r6
 8000eb4:	2e00      	cmp	r6, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_dadd+0x2ee>
 8000eb8:	e0b8      	b.n	800102c <__aeabi_dadd+0x460>
 8000eba:	4c1f      	ldr	r4, [pc, #124]	; (8000f38 <__aeabi_dadd+0x36c>)
 8000ebc:	42a2      	cmp	r2, r4
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_dadd+0x2f6>
 8000ec0:	e11c      	b.n	80010fc <__aeabi_dadd+0x530>
 8000ec2:	2480      	movs	r4, #128	; 0x80
 8000ec4:	0424      	lsls	r4, r4, #16
 8000ec6:	4321      	orrs	r1, r4
 8000ec8:	2f38      	cmp	r7, #56	; 0x38
 8000eca:	dd00      	ble.n	8000ece <__aeabi_dadd+0x302>
 8000ecc:	e11e      	b.n	800110c <__aeabi_dadd+0x540>
 8000ece:	2f1f      	cmp	r7, #31
 8000ed0:	dd00      	ble.n	8000ed4 <__aeabi_dadd+0x308>
 8000ed2:	e19e      	b.n	8001212 <__aeabi_dadd+0x646>
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	000c      	movs	r4, r1
 8000ed8:	1bf6      	subs	r6, r6, r7
 8000eda:	0018      	movs	r0, r3
 8000edc:	40b3      	lsls	r3, r6
 8000ede:	40b4      	lsls	r4, r6
 8000ee0:	40f8      	lsrs	r0, r7
 8000ee2:	1e5e      	subs	r6, r3, #1
 8000ee4:	41b3      	sbcs	r3, r6
 8000ee6:	40f9      	lsrs	r1, r7
 8000ee8:	4304      	orrs	r4, r0
 8000eea:	431c      	orrs	r4, r3
 8000eec:	4489      	add	r9, r1
 8000eee:	4444      	add	r4, r8
 8000ef0:	4544      	cmp	r4, r8
 8000ef2:	419b      	sbcs	r3, r3
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	444b      	add	r3, r9
 8000ef8:	469a      	mov	sl, r3
 8000efa:	0016      	movs	r6, r2
 8000efc:	e7a8      	b.n	8000e50 <__aeabi_dadd+0x284>
 8000efe:	4642      	mov	r2, r8
 8000f00:	464c      	mov	r4, r9
 8000f02:	4314      	orrs	r4, r2
 8000f04:	1e62      	subs	r2, r4, #1
 8000f06:	4194      	sbcs	r4, r2
 8000f08:	e6a6      	b.n	8000c58 <__aeabi_dadd+0x8c>
 8000f0a:	4c0d      	ldr	r4, [pc, #52]	; (8000f40 <__aeabi_dadd+0x374>)
 8000f0c:	1c72      	adds	r2, r6, #1
 8000f0e:	4222      	tst	r2, r4
 8000f10:	d000      	beq.n	8000f14 <__aeabi_dadd+0x348>
 8000f12:	e0a8      	b.n	8001066 <__aeabi_dadd+0x49a>
 8000f14:	000a      	movs	r2, r1
 8000f16:	431a      	orrs	r2, r3
 8000f18:	2e00      	cmp	r6, #0
 8000f1a:	d000      	beq.n	8000f1e <__aeabi_dadd+0x352>
 8000f1c:	e10a      	b.n	8001134 <__aeabi_dadd+0x568>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dadd+0x358>
 8000f22:	e15e      	b.n	80011e2 <__aeabi_dadd+0x616>
 8000f24:	464a      	mov	r2, r9
 8000f26:	4302      	orrs	r2, r0
 8000f28:	d000      	beq.n	8000f2c <__aeabi_dadd+0x360>
 8000f2a:	e161      	b.n	80011f0 <__aeabi_dadd+0x624>
 8000f2c:	074a      	lsls	r2, r1, #29
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	08c9      	lsrs	r1, r1, #3
 8000f34:	e77c      	b.n	8000e30 <__aeabi_dadd+0x264>
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	000007ff 	.word	0x000007ff
 8000f3c:	ff7fffff 	.word	0xff7fffff
 8000f40:	000007fe 	.word	0x000007fe
 8000f44:	4ccf      	ldr	r4, [pc, #828]	; (8001284 <__aeabi_dadd+0x6b8>)
 8000f46:	42a2      	cmp	r2, r4
 8000f48:	d100      	bne.n	8000f4c <__aeabi_dadd+0x380>
 8000f4a:	e0ce      	b.n	80010ea <__aeabi_dadd+0x51e>
 8000f4c:	2480      	movs	r4, #128	; 0x80
 8000f4e:	0424      	lsls	r4, r4, #16
 8000f50:	4321      	orrs	r1, r4
 8000f52:	2f38      	cmp	r7, #56	; 0x38
 8000f54:	dc5b      	bgt.n	800100e <__aeabi_dadd+0x442>
 8000f56:	2f1f      	cmp	r7, #31
 8000f58:	dd00      	ble.n	8000f5c <__aeabi_dadd+0x390>
 8000f5a:	e0dc      	b.n	8001116 <__aeabi_dadd+0x54a>
 8000f5c:	2520      	movs	r5, #32
 8000f5e:	000c      	movs	r4, r1
 8000f60:	1bed      	subs	r5, r5, r7
 8000f62:	001e      	movs	r6, r3
 8000f64:	40ab      	lsls	r3, r5
 8000f66:	40ac      	lsls	r4, r5
 8000f68:	40fe      	lsrs	r6, r7
 8000f6a:	1e5d      	subs	r5, r3, #1
 8000f6c:	41ab      	sbcs	r3, r5
 8000f6e:	4334      	orrs	r4, r6
 8000f70:	40f9      	lsrs	r1, r7
 8000f72:	431c      	orrs	r4, r3
 8000f74:	464b      	mov	r3, r9
 8000f76:	1a5b      	subs	r3, r3, r1
 8000f78:	4699      	mov	r9, r3
 8000f7a:	e04c      	b.n	8001016 <__aeabi_dadd+0x44a>
 8000f7c:	464a      	mov	r2, r9
 8000f7e:	1a1c      	subs	r4, r3, r0
 8000f80:	1a88      	subs	r0, r1, r2
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	4192      	sbcs	r2, r2
 8000f86:	4252      	negs	r2, r2
 8000f88:	4692      	mov	sl, r2
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	4650      	mov	r0, sl
 8000f8e:	1a12      	subs	r2, r2, r0
 8000f90:	4692      	mov	sl, r2
 8000f92:	0212      	lsls	r2, r2, #8
 8000f94:	d478      	bmi.n	8001088 <__aeabi_dadd+0x4bc>
 8000f96:	4653      	mov	r3, sl
 8000f98:	4323      	orrs	r3, r4
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_dadd+0x3d2>
 8000f9c:	e66a      	b.n	8000c74 <__aeabi_dadd+0xa8>
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2500      	movs	r5, #0
 8000fa2:	e745      	b.n	8000e30 <__aeabi_dadd+0x264>
 8000fa4:	074a      	lsls	r2, r1, #29
 8000fa6:	08db      	lsrs	r3, r3, #3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	08c9      	lsrs	r1, r1, #3
 8000fac:	e73d      	b.n	8000e2a <__aeabi_dadd+0x25e>
 8000fae:	181c      	adds	r4, r3, r0
 8000fb0:	429c      	cmp	r4, r3
 8000fb2:	419b      	sbcs	r3, r3
 8000fb4:	4449      	add	r1, r9
 8000fb6:	468a      	mov	sl, r1
 8000fb8:	425b      	negs	r3, r3
 8000fba:	449a      	add	sl, r3
 8000fbc:	4653      	mov	r3, sl
 8000fbe:	2601      	movs	r6, #1
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	d400      	bmi.n	8000fc6 <__aeabi_dadd+0x3fa>
 8000fc4:	e727      	b.n	8000e16 <__aeabi_dadd+0x24a>
 8000fc6:	2602      	movs	r6, #2
 8000fc8:	4652      	mov	r2, sl
 8000fca:	4baf      	ldr	r3, [pc, #700]	; (8001288 <__aeabi_dadd+0x6bc>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	401a      	ands	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	4021      	ands	r1, r4
 8000fd4:	0862      	lsrs	r2, r4, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	07dc      	lsls	r4, r3, #31
 8000fda:	085b      	lsrs	r3, r3, #1
 8000fdc:	469a      	mov	sl, r3
 8000fde:	4314      	orrs	r4, r2
 8000fe0:	e670      	b.n	8000cc4 <__aeabi_dadd+0xf8>
 8000fe2:	003a      	movs	r2, r7
 8000fe4:	464c      	mov	r4, r9
 8000fe6:	3a20      	subs	r2, #32
 8000fe8:	40d4      	lsrs	r4, r2
 8000fea:	46a4      	mov	ip, r4
 8000fec:	2f20      	cmp	r7, #32
 8000fee:	d007      	beq.n	8001000 <__aeabi_dadd+0x434>
 8000ff0:	2240      	movs	r2, #64	; 0x40
 8000ff2:	4648      	mov	r0, r9
 8000ff4:	1bd2      	subs	r2, r2, r7
 8000ff6:	4090      	lsls	r0, r2
 8000ff8:	0002      	movs	r2, r0
 8000ffa:	4640      	mov	r0, r8
 8000ffc:	4310      	orrs	r0, r2
 8000ffe:	4680      	mov	r8, r0
 8001000:	4640      	mov	r0, r8
 8001002:	1e42      	subs	r2, r0, #1
 8001004:	4190      	sbcs	r0, r2
 8001006:	4662      	mov	r2, ip
 8001008:	0004      	movs	r4, r0
 800100a:	4314      	orrs	r4, r2
 800100c:	e624      	b.n	8000c58 <__aeabi_dadd+0x8c>
 800100e:	4319      	orrs	r1, r3
 8001010:	000c      	movs	r4, r1
 8001012:	1e63      	subs	r3, r4, #1
 8001014:	419c      	sbcs	r4, r3
 8001016:	4643      	mov	r3, r8
 8001018:	1b1c      	subs	r4, r3, r4
 800101a:	45a0      	cmp	r8, r4
 800101c:	419b      	sbcs	r3, r3
 800101e:	4649      	mov	r1, r9
 8001020:	425b      	negs	r3, r3
 8001022:	1acb      	subs	r3, r1, r3
 8001024:	469a      	mov	sl, r3
 8001026:	4665      	mov	r5, ip
 8001028:	0016      	movs	r6, r2
 800102a:	e61b      	b.n	8000c64 <__aeabi_dadd+0x98>
 800102c:	000c      	movs	r4, r1
 800102e:	431c      	orrs	r4, r3
 8001030:	d100      	bne.n	8001034 <__aeabi_dadd+0x468>
 8001032:	e0c7      	b.n	80011c4 <__aeabi_dadd+0x5f8>
 8001034:	1e7c      	subs	r4, r7, #1
 8001036:	2f01      	cmp	r7, #1
 8001038:	d100      	bne.n	800103c <__aeabi_dadd+0x470>
 800103a:	e0f9      	b.n	8001230 <__aeabi_dadd+0x664>
 800103c:	4e91      	ldr	r6, [pc, #580]	; (8001284 <__aeabi_dadd+0x6b8>)
 800103e:	42b7      	cmp	r7, r6
 8001040:	d05c      	beq.n	80010fc <__aeabi_dadd+0x530>
 8001042:	0027      	movs	r7, r4
 8001044:	e740      	b.n	8000ec8 <__aeabi_dadd+0x2fc>
 8001046:	2220      	movs	r2, #32
 8001048:	464c      	mov	r4, r9
 800104a:	4640      	mov	r0, r8
 800104c:	1bd2      	subs	r2, r2, r7
 800104e:	4094      	lsls	r4, r2
 8001050:	40f8      	lsrs	r0, r7
 8001052:	4304      	orrs	r4, r0
 8001054:	4640      	mov	r0, r8
 8001056:	4090      	lsls	r0, r2
 8001058:	1e42      	subs	r2, r0, #1
 800105a:	4190      	sbcs	r0, r2
 800105c:	464a      	mov	r2, r9
 800105e:	40fa      	lsrs	r2, r7
 8001060:	4304      	orrs	r4, r0
 8001062:	1889      	adds	r1, r1, r2
 8001064:	e6ee      	b.n	8000e44 <__aeabi_dadd+0x278>
 8001066:	4c87      	ldr	r4, [pc, #540]	; (8001284 <__aeabi_dadd+0x6b8>)
 8001068:	42a2      	cmp	r2, r4
 800106a:	d100      	bne.n	800106e <__aeabi_dadd+0x4a2>
 800106c:	e6f9      	b.n	8000e62 <__aeabi_dadd+0x296>
 800106e:	1818      	adds	r0, r3, r0
 8001070:	4298      	cmp	r0, r3
 8001072:	419b      	sbcs	r3, r3
 8001074:	4449      	add	r1, r9
 8001076:	425b      	negs	r3, r3
 8001078:	18cb      	adds	r3, r1, r3
 800107a:	07dc      	lsls	r4, r3, #31
 800107c:	0840      	lsrs	r0, r0, #1
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	469a      	mov	sl, r3
 8001082:	0016      	movs	r6, r2
 8001084:	4304      	orrs	r4, r0
 8001086:	e6c6      	b.n	8000e16 <__aeabi_dadd+0x24a>
 8001088:	4642      	mov	r2, r8
 800108a:	1ad4      	subs	r4, r2, r3
 800108c:	45a0      	cmp	r8, r4
 800108e:	4180      	sbcs	r0, r0
 8001090:	464b      	mov	r3, r9
 8001092:	4240      	negs	r0, r0
 8001094:	1a59      	subs	r1, r3, r1
 8001096:	1a0b      	subs	r3, r1, r0
 8001098:	469a      	mov	sl, r3
 800109a:	4665      	mov	r5, ip
 800109c:	e5ea      	b.n	8000c74 <__aeabi_dadd+0xa8>
 800109e:	464b      	mov	r3, r9
 80010a0:	464a      	mov	r2, r9
 80010a2:	08c0      	lsrs	r0, r0, #3
 80010a4:	075b      	lsls	r3, r3, #29
 80010a6:	4665      	mov	r5, ip
 80010a8:	4303      	orrs	r3, r0
 80010aa:	08d1      	lsrs	r1, r2, #3
 80010ac:	e6bd      	b.n	8000e2a <__aeabi_dadd+0x25e>
 80010ae:	2a00      	cmp	r2, #0
 80010b0:	d000      	beq.n	80010b4 <__aeabi_dadd+0x4e8>
 80010b2:	e08e      	b.n	80011d2 <__aeabi_dadd+0x606>
 80010b4:	464b      	mov	r3, r9
 80010b6:	4303      	orrs	r3, r0
 80010b8:	d117      	bne.n	80010ea <__aeabi_dadd+0x51e>
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	2500      	movs	r5, #0
 80010be:	0309      	lsls	r1, r1, #12
 80010c0:	e6da      	b.n	8000e78 <__aeabi_dadd+0x2ac>
 80010c2:	074a      	lsls	r2, r1, #29
 80010c4:	08db      	lsrs	r3, r3, #3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	08c9      	lsrs	r1, r1, #3
 80010ca:	e6d1      	b.n	8000e70 <__aeabi_dadd+0x2a4>
 80010cc:	1a1c      	subs	r4, r3, r0
 80010ce:	464a      	mov	r2, r9
 80010d0:	42a3      	cmp	r3, r4
 80010d2:	419b      	sbcs	r3, r3
 80010d4:	1a89      	subs	r1, r1, r2
 80010d6:	425b      	negs	r3, r3
 80010d8:	1acb      	subs	r3, r1, r3
 80010da:	469a      	mov	sl, r3
 80010dc:	2601      	movs	r6, #1
 80010de:	e5c1      	b.n	8000c64 <__aeabi_dadd+0x98>
 80010e0:	074a      	lsls	r2, r1, #29
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	08c9      	lsrs	r1, r1, #3
 80010e8:	e69f      	b.n	8000e2a <__aeabi_dadd+0x25e>
 80010ea:	4643      	mov	r3, r8
 80010ec:	08d8      	lsrs	r0, r3, #3
 80010ee:	464b      	mov	r3, r9
 80010f0:	464a      	mov	r2, r9
 80010f2:	075b      	lsls	r3, r3, #29
 80010f4:	4665      	mov	r5, ip
 80010f6:	4303      	orrs	r3, r0
 80010f8:	08d1      	lsrs	r1, r2, #3
 80010fa:	e6b9      	b.n	8000e70 <__aeabi_dadd+0x2a4>
 80010fc:	4643      	mov	r3, r8
 80010fe:	08d8      	lsrs	r0, r3, #3
 8001100:	464b      	mov	r3, r9
 8001102:	464a      	mov	r2, r9
 8001104:	075b      	lsls	r3, r3, #29
 8001106:	4303      	orrs	r3, r0
 8001108:	08d1      	lsrs	r1, r2, #3
 800110a:	e6b1      	b.n	8000e70 <__aeabi_dadd+0x2a4>
 800110c:	4319      	orrs	r1, r3
 800110e:	000c      	movs	r4, r1
 8001110:	1e63      	subs	r3, r4, #1
 8001112:	419c      	sbcs	r4, r3
 8001114:	e6eb      	b.n	8000eee <__aeabi_dadd+0x322>
 8001116:	003c      	movs	r4, r7
 8001118:	000d      	movs	r5, r1
 800111a:	3c20      	subs	r4, #32
 800111c:	40e5      	lsrs	r5, r4
 800111e:	2f20      	cmp	r7, #32
 8001120:	d003      	beq.n	800112a <__aeabi_dadd+0x55e>
 8001122:	2440      	movs	r4, #64	; 0x40
 8001124:	1be4      	subs	r4, r4, r7
 8001126:	40a1      	lsls	r1, r4
 8001128:	430b      	orrs	r3, r1
 800112a:	001c      	movs	r4, r3
 800112c:	1e63      	subs	r3, r4, #1
 800112e:	419c      	sbcs	r4, r3
 8001130:	432c      	orrs	r4, r5
 8001132:	e770      	b.n	8001016 <__aeabi_dadd+0x44a>
 8001134:	2a00      	cmp	r2, #0
 8001136:	d0e1      	beq.n	80010fc <__aeabi_dadd+0x530>
 8001138:	464a      	mov	r2, r9
 800113a:	4302      	orrs	r2, r0
 800113c:	d0c1      	beq.n	80010c2 <__aeabi_dadd+0x4f6>
 800113e:	074a      	lsls	r2, r1, #29
 8001140:	08db      	lsrs	r3, r3, #3
 8001142:	4313      	orrs	r3, r2
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	08c9      	lsrs	r1, r1, #3
 8001148:	0312      	lsls	r2, r2, #12
 800114a:	4211      	tst	r1, r2
 800114c:	d008      	beq.n	8001160 <__aeabi_dadd+0x594>
 800114e:	4648      	mov	r0, r9
 8001150:	08c4      	lsrs	r4, r0, #3
 8001152:	4214      	tst	r4, r2
 8001154:	d104      	bne.n	8001160 <__aeabi_dadd+0x594>
 8001156:	4643      	mov	r3, r8
 8001158:	0021      	movs	r1, r4
 800115a:	08db      	lsrs	r3, r3, #3
 800115c:	0742      	lsls	r2, r0, #29
 800115e:	4313      	orrs	r3, r2
 8001160:	0f5a      	lsrs	r2, r3, #29
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	0752      	lsls	r2, r2, #29
 8001166:	08db      	lsrs	r3, r3, #3
 8001168:	4313      	orrs	r3, r2
 800116a:	e681      	b.n	8000e70 <__aeabi_dadd+0x2a4>
 800116c:	464b      	mov	r3, r9
 800116e:	4303      	orrs	r3, r0
 8001170:	d100      	bne.n	8001174 <__aeabi_dadd+0x5a8>
 8001172:	e714      	b.n	8000f9e <__aeabi_dadd+0x3d2>
 8001174:	464b      	mov	r3, r9
 8001176:	464a      	mov	r2, r9
 8001178:	08c0      	lsrs	r0, r0, #3
 800117a:	075b      	lsls	r3, r3, #29
 800117c:	4665      	mov	r5, ip
 800117e:	4303      	orrs	r3, r0
 8001180:	08d1      	lsrs	r1, r2, #3
 8001182:	e655      	b.n	8000e30 <__aeabi_dadd+0x264>
 8001184:	1ac4      	subs	r4, r0, r3
 8001186:	45a0      	cmp	r8, r4
 8001188:	4180      	sbcs	r0, r0
 800118a:	464b      	mov	r3, r9
 800118c:	4240      	negs	r0, r0
 800118e:	1a59      	subs	r1, r3, r1
 8001190:	1a0b      	subs	r3, r1, r0
 8001192:	469a      	mov	sl, r3
 8001194:	4665      	mov	r5, ip
 8001196:	2601      	movs	r6, #1
 8001198:	e564      	b.n	8000c64 <__aeabi_dadd+0x98>
 800119a:	1a1c      	subs	r4, r3, r0
 800119c:	464a      	mov	r2, r9
 800119e:	42a3      	cmp	r3, r4
 80011a0:	4180      	sbcs	r0, r0
 80011a2:	1a8a      	subs	r2, r1, r2
 80011a4:	4240      	negs	r0, r0
 80011a6:	1a12      	subs	r2, r2, r0
 80011a8:	4692      	mov	sl, r2
 80011aa:	0212      	lsls	r2, r2, #8
 80011ac:	d549      	bpl.n	8001242 <__aeabi_dadd+0x676>
 80011ae:	4642      	mov	r2, r8
 80011b0:	1ad4      	subs	r4, r2, r3
 80011b2:	45a0      	cmp	r8, r4
 80011b4:	4180      	sbcs	r0, r0
 80011b6:	464b      	mov	r3, r9
 80011b8:	4240      	negs	r0, r0
 80011ba:	1a59      	subs	r1, r3, r1
 80011bc:	1a0b      	subs	r3, r1, r0
 80011be:	469a      	mov	sl, r3
 80011c0:	4665      	mov	r5, ip
 80011c2:	e57f      	b.n	8000cc4 <__aeabi_dadd+0xf8>
 80011c4:	464b      	mov	r3, r9
 80011c6:	464a      	mov	r2, r9
 80011c8:	08c0      	lsrs	r0, r0, #3
 80011ca:	075b      	lsls	r3, r3, #29
 80011cc:	4303      	orrs	r3, r0
 80011ce:	08d1      	lsrs	r1, r2, #3
 80011d0:	e62b      	b.n	8000e2a <__aeabi_dadd+0x25e>
 80011d2:	464a      	mov	r2, r9
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	4302      	orrs	r2, r0
 80011d8:	d138      	bne.n	800124c <__aeabi_dadd+0x680>
 80011da:	074a      	lsls	r2, r1, #29
 80011dc:	4313      	orrs	r3, r2
 80011de:	08c9      	lsrs	r1, r1, #3
 80011e0:	e646      	b.n	8000e70 <__aeabi_dadd+0x2a4>
 80011e2:	464b      	mov	r3, r9
 80011e4:	464a      	mov	r2, r9
 80011e6:	08c0      	lsrs	r0, r0, #3
 80011e8:	075b      	lsls	r3, r3, #29
 80011ea:	4303      	orrs	r3, r0
 80011ec:	08d1      	lsrs	r1, r2, #3
 80011ee:	e61f      	b.n	8000e30 <__aeabi_dadd+0x264>
 80011f0:	181c      	adds	r4, r3, r0
 80011f2:	429c      	cmp	r4, r3
 80011f4:	419b      	sbcs	r3, r3
 80011f6:	4449      	add	r1, r9
 80011f8:	468a      	mov	sl, r1
 80011fa:	425b      	negs	r3, r3
 80011fc:	449a      	add	sl, r3
 80011fe:	4653      	mov	r3, sl
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	d400      	bmi.n	8001206 <__aeabi_dadd+0x63a>
 8001204:	e607      	b.n	8000e16 <__aeabi_dadd+0x24a>
 8001206:	4652      	mov	r2, sl
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <__aeabi_dadd+0x6bc>)
 800120a:	2601      	movs	r6, #1
 800120c:	401a      	ands	r2, r3
 800120e:	4692      	mov	sl, r2
 8001210:	e601      	b.n	8000e16 <__aeabi_dadd+0x24a>
 8001212:	003c      	movs	r4, r7
 8001214:	000e      	movs	r6, r1
 8001216:	3c20      	subs	r4, #32
 8001218:	40e6      	lsrs	r6, r4
 800121a:	2f20      	cmp	r7, #32
 800121c:	d003      	beq.n	8001226 <__aeabi_dadd+0x65a>
 800121e:	2440      	movs	r4, #64	; 0x40
 8001220:	1be4      	subs	r4, r4, r7
 8001222:	40a1      	lsls	r1, r4
 8001224:	430b      	orrs	r3, r1
 8001226:	001c      	movs	r4, r3
 8001228:	1e63      	subs	r3, r4, #1
 800122a:	419c      	sbcs	r4, r3
 800122c:	4334      	orrs	r4, r6
 800122e:	e65e      	b.n	8000eee <__aeabi_dadd+0x322>
 8001230:	4443      	add	r3, r8
 8001232:	4283      	cmp	r3, r0
 8001234:	4180      	sbcs	r0, r0
 8001236:	4449      	add	r1, r9
 8001238:	468a      	mov	sl, r1
 800123a:	4240      	negs	r0, r0
 800123c:	001c      	movs	r4, r3
 800123e:	4482      	add	sl, r0
 8001240:	e6bc      	b.n	8000fbc <__aeabi_dadd+0x3f0>
 8001242:	4653      	mov	r3, sl
 8001244:	4323      	orrs	r3, r4
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x67e>
 8001248:	e6a9      	b.n	8000f9e <__aeabi_dadd+0x3d2>
 800124a:	e5e4      	b.n	8000e16 <__aeabi_dadd+0x24a>
 800124c:	074a      	lsls	r2, r1, #29
 800124e:	4313      	orrs	r3, r2
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	08c9      	lsrs	r1, r1, #3
 8001254:	0312      	lsls	r2, r2, #12
 8001256:	4211      	tst	r1, r2
 8001258:	d009      	beq.n	800126e <__aeabi_dadd+0x6a2>
 800125a:	4648      	mov	r0, r9
 800125c:	08c4      	lsrs	r4, r0, #3
 800125e:	4214      	tst	r4, r2
 8001260:	d105      	bne.n	800126e <__aeabi_dadd+0x6a2>
 8001262:	4643      	mov	r3, r8
 8001264:	4665      	mov	r5, ip
 8001266:	0021      	movs	r1, r4
 8001268:	08db      	lsrs	r3, r3, #3
 800126a:	0742      	lsls	r2, r0, #29
 800126c:	4313      	orrs	r3, r2
 800126e:	0f5a      	lsrs	r2, r3, #29
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	0752      	lsls	r2, r2, #29
 8001276:	4313      	orrs	r3, r2
 8001278:	e5fa      	b.n	8000e70 <__aeabi_dadd+0x2a4>
 800127a:	2300      	movs	r3, #0
 800127c:	4a01      	ldr	r2, [pc, #4]	; (8001284 <__aeabi_dadd+0x6b8>)
 800127e:	001c      	movs	r4, r3
 8001280:	e540      	b.n	8000d04 <__aeabi_dadd+0x138>
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	000007ff 	.word	0x000007ff
 8001288:	ff7fffff 	.word	0xff7fffff

0800128c <__aeabi_dmul>:
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	4645      	mov	r5, r8
 8001290:	46de      	mov	lr, fp
 8001292:	4657      	mov	r7, sl
 8001294:	464e      	mov	r6, r9
 8001296:	b5e0      	push	{r5, r6, r7, lr}
 8001298:	001f      	movs	r7, r3
 800129a:	030b      	lsls	r3, r1, #12
 800129c:	0b1b      	lsrs	r3, r3, #12
 800129e:	469b      	mov	fp, r3
 80012a0:	004d      	lsls	r5, r1, #1
 80012a2:	0fcb      	lsrs	r3, r1, #31
 80012a4:	0004      	movs	r4, r0
 80012a6:	4691      	mov	r9, r2
 80012a8:	4698      	mov	r8, r3
 80012aa:	b087      	sub	sp, #28
 80012ac:	0d6d      	lsrs	r5, r5, #21
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dmul+0x26>
 80012b0:	e1cd      	b.n	800164e <__aeabi_dmul+0x3c2>
 80012b2:	4bce      	ldr	r3, [pc, #824]	; (80015ec <__aeabi_dmul+0x360>)
 80012b4:	429d      	cmp	r5, r3
 80012b6:	d100      	bne.n	80012ba <__aeabi_dmul+0x2e>
 80012b8:	e1e9      	b.n	800168e <__aeabi_dmul+0x402>
 80012ba:	465a      	mov	r2, fp
 80012bc:	0f43      	lsrs	r3, r0, #29
 80012be:	00d2      	lsls	r2, r2, #3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	0412      	lsls	r2, r2, #16
 80012c6:	431a      	orrs	r2, r3
 80012c8:	00c3      	lsls	r3, r0, #3
 80012ca:	469a      	mov	sl, r3
 80012cc:	4bc8      	ldr	r3, [pc, #800]	; (80015f0 <__aeabi_dmul+0x364>)
 80012ce:	4693      	mov	fp, r2
 80012d0:	469c      	mov	ip, r3
 80012d2:	2300      	movs	r3, #0
 80012d4:	2600      	movs	r6, #0
 80012d6:	4465      	add	r5, ip
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	033c      	lsls	r4, r7, #12
 80012dc:	007b      	lsls	r3, r7, #1
 80012de:	4648      	mov	r0, r9
 80012e0:	0b24      	lsrs	r4, r4, #12
 80012e2:	0d5b      	lsrs	r3, r3, #21
 80012e4:	0fff      	lsrs	r7, r7, #31
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d100      	bne.n	80012ec <__aeabi_dmul+0x60>
 80012ea:	e189      	b.n	8001600 <__aeabi_dmul+0x374>
 80012ec:	4abf      	ldr	r2, [pc, #764]	; (80015ec <__aeabi_dmul+0x360>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <__aeabi_dmul+0x9a>
 80012f2:	0f42      	lsrs	r2, r0, #29
 80012f4:	00e4      	lsls	r4, r4, #3
 80012f6:	4322      	orrs	r2, r4
 80012f8:	2480      	movs	r4, #128	; 0x80
 80012fa:	0424      	lsls	r4, r4, #16
 80012fc:	4314      	orrs	r4, r2
 80012fe:	4abc      	ldr	r2, [pc, #752]	; (80015f0 <__aeabi_dmul+0x364>)
 8001300:	2100      	movs	r1, #0
 8001302:	4694      	mov	ip, r2
 8001304:	4642      	mov	r2, r8
 8001306:	4463      	add	r3, ip
 8001308:	195b      	adds	r3, r3, r5
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	9b01      	ldr	r3, [sp, #4]
 800130e:	407a      	eors	r2, r7
 8001310:	3301      	adds	r3, #1
 8001312:	00c0      	lsls	r0, r0, #3
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	2e0a      	cmp	r6, #10
 800131a:	dd1c      	ble.n	8001356 <__aeabi_dmul+0xca>
 800131c:	003a      	movs	r2, r7
 800131e:	2e0b      	cmp	r6, #11
 8001320:	d05e      	beq.n	80013e0 <__aeabi_dmul+0x154>
 8001322:	4647      	mov	r7, r8
 8001324:	e056      	b.n	80013d4 <__aeabi_dmul+0x148>
 8001326:	4649      	mov	r1, r9
 8001328:	4bb0      	ldr	r3, [pc, #704]	; (80015ec <__aeabi_dmul+0x360>)
 800132a:	4321      	orrs	r1, r4
 800132c:	18eb      	adds	r3, r5, r3
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2900      	cmp	r1, #0
 8001332:	d12a      	bne.n	800138a <__aeabi_dmul+0xfe>
 8001334:	2080      	movs	r0, #128	; 0x80
 8001336:	2202      	movs	r2, #2
 8001338:	0100      	lsls	r0, r0, #4
 800133a:	002b      	movs	r3, r5
 800133c:	4684      	mov	ip, r0
 800133e:	4316      	orrs	r6, r2
 8001340:	4642      	mov	r2, r8
 8001342:	4463      	add	r3, ip
 8001344:	407a      	eors	r2, r7
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2e0a      	cmp	r6, #10
 800134c:	dd00      	ble.n	8001350 <__aeabi_dmul+0xc4>
 800134e:	e231      	b.n	80017b4 <__aeabi_dmul+0x528>
 8001350:	2000      	movs	r0, #0
 8001352:	2400      	movs	r4, #0
 8001354:	2102      	movs	r1, #2
 8001356:	2e02      	cmp	r6, #2
 8001358:	dc26      	bgt.n	80013a8 <__aeabi_dmul+0x11c>
 800135a:	3e01      	subs	r6, #1
 800135c:	2e01      	cmp	r6, #1
 800135e:	d852      	bhi.n	8001406 <__aeabi_dmul+0x17a>
 8001360:	2902      	cmp	r1, #2
 8001362:	d04c      	beq.n	80013fe <__aeabi_dmul+0x172>
 8001364:	2901      	cmp	r1, #1
 8001366:	d000      	beq.n	800136a <__aeabi_dmul+0xde>
 8001368:	e118      	b.n	800159c <__aeabi_dmul+0x310>
 800136a:	2300      	movs	r3, #0
 800136c:	2400      	movs	r4, #0
 800136e:	2500      	movs	r5, #0
 8001370:	051b      	lsls	r3, r3, #20
 8001372:	4323      	orrs	r3, r4
 8001374:	07d2      	lsls	r2, r2, #31
 8001376:	4313      	orrs	r3, r2
 8001378:	0028      	movs	r0, r5
 800137a:	0019      	movs	r1, r3
 800137c:	b007      	add	sp, #28
 800137e:	bcf0      	pop	{r4, r5, r6, r7}
 8001380:	46bb      	mov	fp, r7
 8001382:	46b2      	mov	sl, r6
 8001384:	46a9      	mov	r9, r5
 8001386:	46a0      	mov	r8, r4
 8001388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	2203      	movs	r2, #3
 800138e:	0109      	lsls	r1, r1, #4
 8001390:	002b      	movs	r3, r5
 8001392:	468c      	mov	ip, r1
 8001394:	4316      	orrs	r6, r2
 8001396:	4642      	mov	r2, r8
 8001398:	4463      	add	r3, ip
 800139a:	407a      	eors	r2, r7
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	2e0a      	cmp	r6, #10
 80013a2:	dd00      	ble.n	80013a6 <__aeabi_dmul+0x11a>
 80013a4:	e228      	b.n	80017f8 <__aeabi_dmul+0x56c>
 80013a6:	2103      	movs	r1, #3
 80013a8:	2501      	movs	r5, #1
 80013aa:	40b5      	lsls	r5, r6
 80013ac:	46ac      	mov	ip, r5
 80013ae:	26a6      	movs	r6, #166	; 0xa6
 80013b0:	4663      	mov	r3, ip
 80013b2:	00f6      	lsls	r6, r6, #3
 80013b4:	4035      	ands	r5, r6
 80013b6:	4233      	tst	r3, r6
 80013b8:	d10b      	bne.n	80013d2 <__aeabi_dmul+0x146>
 80013ba:	2690      	movs	r6, #144	; 0x90
 80013bc:	00b6      	lsls	r6, r6, #2
 80013be:	4233      	tst	r3, r6
 80013c0:	d118      	bne.n	80013f4 <__aeabi_dmul+0x168>
 80013c2:	3eb9      	subs	r6, #185	; 0xb9
 80013c4:	3eff      	subs	r6, #255	; 0xff
 80013c6:	421e      	tst	r6, r3
 80013c8:	d01d      	beq.n	8001406 <__aeabi_dmul+0x17a>
 80013ca:	46a3      	mov	fp, r4
 80013cc:	4682      	mov	sl, r0
 80013ce:	9100      	str	r1, [sp, #0]
 80013d0:	e000      	b.n	80013d4 <__aeabi_dmul+0x148>
 80013d2:	0017      	movs	r7, r2
 80013d4:	9900      	ldr	r1, [sp, #0]
 80013d6:	003a      	movs	r2, r7
 80013d8:	2902      	cmp	r1, #2
 80013da:	d010      	beq.n	80013fe <__aeabi_dmul+0x172>
 80013dc:	465c      	mov	r4, fp
 80013de:	4650      	mov	r0, sl
 80013e0:	2903      	cmp	r1, #3
 80013e2:	d1bf      	bne.n	8001364 <__aeabi_dmul+0xd8>
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	031b      	lsls	r3, r3, #12
 80013e8:	431c      	orrs	r4, r3
 80013ea:	0324      	lsls	r4, r4, #12
 80013ec:	0005      	movs	r5, r0
 80013ee:	4b7f      	ldr	r3, [pc, #508]	; (80015ec <__aeabi_dmul+0x360>)
 80013f0:	0b24      	lsrs	r4, r4, #12
 80013f2:	e7bd      	b.n	8001370 <__aeabi_dmul+0xe4>
 80013f4:	2480      	movs	r4, #128	; 0x80
 80013f6:	2200      	movs	r2, #0
 80013f8:	4b7c      	ldr	r3, [pc, #496]	; (80015ec <__aeabi_dmul+0x360>)
 80013fa:	0324      	lsls	r4, r4, #12
 80013fc:	e7b8      	b.n	8001370 <__aeabi_dmul+0xe4>
 80013fe:	2400      	movs	r4, #0
 8001400:	2500      	movs	r5, #0
 8001402:	4b7a      	ldr	r3, [pc, #488]	; (80015ec <__aeabi_dmul+0x360>)
 8001404:	e7b4      	b.n	8001370 <__aeabi_dmul+0xe4>
 8001406:	4653      	mov	r3, sl
 8001408:	041e      	lsls	r6, r3, #16
 800140a:	0c36      	lsrs	r6, r6, #16
 800140c:	0c1f      	lsrs	r7, r3, #16
 800140e:	0033      	movs	r3, r6
 8001410:	0c01      	lsrs	r1, r0, #16
 8001412:	0400      	lsls	r0, r0, #16
 8001414:	0c00      	lsrs	r0, r0, #16
 8001416:	4343      	muls	r3, r0
 8001418:	4698      	mov	r8, r3
 800141a:	0003      	movs	r3, r0
 800141c:	437b      	muls	r3, r7
 800141e:	4699      	mov	r9, r3
 8001420:	0033      	movs	r3, r6
 8001422:	434b      	muls	r3, r1
 8001424:	469c      	mov	ip, r3
 8001426:	4643      	mov	r3, r8
 8001428:	000d      	movs	r5, r1
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	469a      	mov	sl, r3
 800142e:	437d      	muls	r5, r7
 8001430:	44cc      	add	ip, r9
 8001432:	44d4      	add	ip, sl
 8001434:	9500      	str	r5, [sp, #0]
 8001436:	45e1      	cmp	r9, ip
 8001438:	d904      	bls.n	8001444 <__aeabi_dmul+0x1b8>
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	025b      	lsls	r3, r3, #9
 800143e:	4699      	mov	r9, r3
 8001440:	444d      	add	r5, r9
 8001442:	9500      	str	r5, [sp, #0]
 8001444:	4663      	mov	r3, ip
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	001d      	movs	r5, r3
 800144a:	4663      	mov	r3, ip
 800144c:	041b      	lsls	r3, r3, #16
 800144e:	469c      	mov	ip, r3
 8001450:	4643      	mov	r3, r8
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	4698      	mov	r8, r3
 8001458:	4663      	mov	r3, ip
 800145a:	4443      	add	r3, r8
 800145c:	9303      	str	r3, [sp, #12]
 800145e:	0c23      	lsrs	r3, r4, #16
 8001460:	4698      	mov	r8, r3
 8001462:	0033      	movs	r3, r6
 8001464:	0424      	lsls	r4, r4, #16
 8001466:	0c24      	lsrs	r4, r4, #16
 8001468:	4363      	muls	r3, r4
 800146a:	469c      	mov	ip, r3
 800146c:	0023      	movs	r3, r4
 800146e:	437b      	muls	r3, r7
 8001470:	4699      	mov	r9, r3
 8001472:	4643      	mov	r3, r8
 8001474:	435e      	muls	r6, r3
 8001476:	435f      	muls	r7, r3
 8001478:	444e      	add	r6, r9
 800147a:	4663      	mov	r3, ip
 800147c:	46b2      	mov	sl, r6
 800147e:	0c1e      	lsrs	r6, r3, #16
 8001480:	4456      	add	r6, sl
 8001482:	45b1      	cmp	r9, r6
 8001484:	d903      	bls.n	800148e <__aeabi_dmul+0x202>
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	025b      	lsls	r3, r3, #9
 800148a:	4699      	mov	r9, r3
 800148c:	444f      	add	r7, r9
 800148e:	0c33      	lsrs	r3, r6, #16
 8001490:	4699      	mov	r9, r3
 8001492:	003b      	movs	r3, r7
 8001494:	444b      	add	r3, r9
 8001496:	9305      	str	r3, [sp, #20]
 8001498:	4663      	mov	r3, ip
 800149a:	46ac      	mov	ip, r5
 800149c:	041f      	lsls	r7, r3, #16
 800149e:	0c3f      	lsrs	r7, r7, #16
 80014a0:	0436      	lsls	r6, r6, #16
 80014a2:	19f6      	adds	r6, r6, r7
 80014a4:	44b4      	add	ip, r6
 80014a6:	4663      	mov	r3, ip
 80014a8:	9304      	str	r3, [sp, #16]
 80014aa:	465b      	mov	r3, fp
 80014ac:	0c1b      	lsrs	r3, r3, #16
 80014ae:	469c      	mov	ip, r3
 80014b0:	465b      	mov	r3, fp
 80014b2:	041f      	lsls	r7, r3, #16
 80014b4:	0c3f      	lsrs	r7, r7, #16
 80014b6:	003b      	movs	r3, r7
 80014b8:	4343      	muls	r3, r0
 80014ba:	4699      	mov	r9, r3
 80014bc:	4663      	mov	r3, ip
 80014be:	4343      	muls	r3, r0
 80014c0:	469a      	mov	sl, r3
 80014c2:	464b      	mov	r3, r9
 80014c4:	4660      	mov	r0, ip
 80014c6:	0c1b      	lsrs	r3, r3, #16
 80014c8:	469b      	mov	fp, r3
 80014ca:	4348      	muls	r0, r1
 80014cc:	4379      	muls	r1, r7
 80014ce:	4451      	add	r1, sl
 80014d0:	4459      	add	r1, fp
 80014d2:	458a      	cmp	sl, r1
 80014d4:	d903      	bls.n	80014de <__aeabi_dmul+0x252>
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	025b      	lsls	r3, r3, #9
 80014da:	469a      	mov	sl, r3
 80014dc:	4450      	add	r0, sl
 80014de:	0c0b      	lsrs	r3, r1, #16
 80014e0:	469a      	mov	sl, r3
 80014e2:	464b      	mov	r3, r9
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	4699      	mov	r9, r3
 80014ea:	003b      	movs	r3, r7
 80014ec:	4363      	muls	r3, r4
 80014ee:	0409      	lsls	r1, r1, #16
 80014f0:	4645      	mov	r5, r8
 80014f2:	4449      	add	r1, r9
 80014f4:	4699      	mov	r9, r3
 80014f6:	4663      	mov	r3, ip
 80014f8:	435c      	muls	r4, r3
 80014fa:	436b      	muls	r3, r5
 80014fc:	469c      	mov	ip, r3
 80014fe:	464b      	mov	r3, r9
 8001500:	0c1b      	lsrs	r3, r3, #16
 8001502:	4698      	mov	r8, r3
 8001504:	436f      	muls	r7, r5
 8001506:	193f      	adds	r7, r7, r4
 8001508:	4447      	add	r7, r8
 800150a:	4450      	add	r0, sl
 800150c:	42bc      	cmp	r4, r7
 800150e:	d903      	bls.n	8001518 <__aeabi_dmul+0x28c>
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	025b      	lsls	r3, r3, #9
 8001514:	4698      	mov	r8, r3
 8001516:	44c4      	add	ip, r8
 8001518:	9b04      	ldr	r3, [sp, #16]
 800151a:	9d00      	ldr	r5, [sp, #0]
 800151c:	4698      	mov	r8, r3
 800151e:	4445      	add	r5, r8
 8001520:	42b5      	cmp	r5, r6
 8001522:	41b6      	sbcs	r6, r6
 8001524:	4273      	negs	r3, r6
 8001526:	4698      	mov	r8, r3
 8001528:	464b      	mov	r3, r9
 800152a:	041e      	lsls	r6, r3, #16
 800152c:	9b05      	ldr	r3, [sp, #20]
 800152e:	043c      	lsls	r4, r7, #16
 8001530:	4699      	mov	r9, r3
 8001532:	0c36      	lsrs	r6, r6, #16
 8001534:	19a4      	adds	r4, r4, r6
 8001536:	444c      	add	r4, r9
 8001538:	46a1      	mov	r9, r4
 800153a:	4683      	mov	fp, r0
 800153c:	186e      	adds	r6, r5, r1
 800153e:	44c1      	add	r9, r8
 8001540:	428e      	cmp	r6, r1
 8001542:	4189      	sbcs	r1, r1
 8001544:	44cb      	add	fp, r9
 8001546:	465d      	mov	r5, fp
 8001548:	4249      	negs	r1, r1
 800154a:	186d      	adds	r5, r5, r1
 800154c:	429c      	cmp	r4, r3
 800154e:	41a4      	sbcs	r4, r4
 8001550:	45c1      	cmp	r9, r8
 8001552:	419b      	sbcs	r3, r3
 8001554:	4583      	cmp	fp, r0
 8001556:	4180      	sbcs	r0, r0
 8001558:	428d      	cmp	r5, r1
 800155a:	4189      	sbcs	r1, r1
 800155c:	425b      	negs	r3, r3
 800155e:	4264      	negs	r4, r4
 8001560:	431c      	orrs	r4, r3
 8001562:	4240      	negs	r0, r0
 8001564:	9b03      	ldr	r3, [sp, #12]
 8001566:	4249      	negs	r1, r1
 8001568:	4301      	orrs	r1, r0
 800156a:	0270      	lsls	r0, r6, #9
 800156c:	0c3f      	lsrs	r7, r7, #16
 800156e:	4318      	orrs	r0, r3
 8001570:	19e4      	adds	r4, r4, r7
 8001572:	1e47      	subs	r7, r0, #1
 8001574:	41b8      	sbcs	r0, r7
 8001576:	1864      	adds	r4, r4, r1
 8001578:	4464      	add	r4, ip
 800157a:	0df6      	lsrs	r6, r6, #23
 800157c:	0261      	lsls	r1, r4, #9
 800157e:	4330      	orrs	r0, r6
 8001580:	0dec      	lsrs	r4, r5, #23
 8001582:	026e      	lsls	r6, r5, #9
 8001584:	430c      	orrs	r4, r1
 8001586:	4330      	orrs	r0, r6
 8001588:	01c9      	lsls	r1, r1, #7
 800158a:	d400      	bmi.n	800158e <__aeabi_dmul+0x302>
 800158c:	e0f1      	b.n	8001772 <__aeabi_dmul+0x4e6>
 800158e:	2101      	movs	r1, #1
 8001590:	0843      	lsrs	r3, r0, #1
 8001592:	4001      	ands	r1, r0
 8001594:	430b      	orrs	r3, r1
 8001596:	07e0      	lsls	r0, r4, #31
 8001598:	4318      	orrs	r0, r3
 800159a:	0864      	lsrs	r4, r4, #1
 800159c:	4915      	ldr	r1, [pc, #84]	; (80015f4 <__aeabi_dmul+0x368>)
 800159e:	9b02      	ldr	r3, [sp, #8]
 80015a0:	468c      	mov	ip, r1
 80015a2:	4463      	add	r3, ip
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	dc00      	bgt.n	80015aa <__aeabi_dmul+0x31e>
 80015a8:	e097      	b.n	80016da <__aeabi_dmul+0x44e>
 80015aa:	0741      	lsls	r1, r0, #29
 80015ac:	d009      	beq.n	80015c2 <__aeabi_dmul+0x336>
 80015ae:	210f      	movs	r1, #15
 80015b0:	4001      	ands	r1, r0
 80015b2:	2904      	cmp	r1, #4
 80015b4:	d005      	beq.n	80015c2 <__aeabi_dmul+0x336>
 80015b6:	1d01      	adds	r1, r0, #4
 80015b8:	4281      	cmp	r1, r0
 80015ba:	4180      	sbcs	r0, r0
 80015bc:	4240      	negs	r0, r0
 80015be:	1824      	adds	r4, r4, r0
 80015c0:	0008      	movs	r0, r1
 80015c2:	01e1      	lsls	r1, r4, #7
 80015c4:	d506      	bpl.n	80015d4 <__aeabi_dmul+0x348>
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	00c9      	lsls	r1, r1, #3
 80015ca:	468c      	mov	ip, r1
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <__aeabi_dmul+0x36c>)
 80015ce:	401c      	ands	r4, r3
 80015d0:	9b02      	ldr	r3, [sp, #8]
 80015d2:	4463      	add	r3, ip
 80015d4:	4909      	ldr	r1, [pc, #36]	; (80015fc <__aeabi_dmul+0x370>)
 80015d6:	428b      	cmp	r3, r1
 80015d8:	dd00      	ble.n	80015dc <__aeabi_dmul+0x350>
 80015da:	e710      	b.n	80013fe <__aeabi_dmul+0x172>
 80015dc:	0761      	lsls	r1, r4, #29
 80015de:	08c5      	lsrs	r5, r0, #3
 80015e0:	0264      	lsls	r4, r4, #9
 80015e2:	055b      	lsls	r3, r3, #21
 80015e4:	430d      	orrs	r5, r1
 80015e6:	0b24      	lsrs	r4, r4, #12
 80015e8:	0d5b      	lsrs	r3, r3, #21
 80015ea:	e6c1      	b.n	8001370 <__aeabi_dmul+0xe4>
 80015ec:	000007ff 	.word	0x000007ff
 80015f0:	fffffc01 	.word	0xfffffc01
 80015f4:	000003ff 	.word	0x000003ff
 80015f8:	feffffff 	.word	0xfeffffff
 80015fc:	000007fe 	.word	0x000007fe
 8001600:	464b      	mov	r3, r9
 8001602:	4323      	orrs	r3, r4
 8001604:	d059      	beq.n	80016ba <__aeabi_dmul+0x42e>
 8001606:	2c00      	cmp	r4, #0
 8001608:	d100      	bne.n	800160c <__aeabi_dmul+0x380>
 800160a:	e0a3      	b.n	8001754 <__aeabi_dmul+0x4c8>
 800160c:	0020      	movs	r0, r4
 800160e:	f000 fd4b 	bl	80020a8 <__clzsi2>
 8001612:	0001      	movs	r1, r0
 8001614:	0003      	movs	r3, r0
 8001616:	390b      	subs	r1, #11
 8001618:	221d      	movs	r2, #29
 800161a:	1a52      	subs	r2, r2, r1
 800161c:	4649      	mov	r1, r9
 800161e:	0018      	movs	r0, r3
 8001620:	40d1      	lsrs	r1, r2
 8001622:	464a      	mov	r2, r9
 8001624:	3808      	subs	r0, #8
 8001626:	4082      	lsls	r2, r0
 8001628:	4084      	lsls	r4, r0
 800162a:	0010      	movs	r0, r2
 800162c:	430c      	orrs	r4, r1
 800162e:	4a74      	ldr	r2, [pc, #464]	; (8001800 <__aeabi_dmul+0x574>)
 8001630:	1aeb      	subs	r3, r5, r3
 8001632:	4694      	mov	ip, r2
 8001634:	4642      	mov	r2, r8
 8001636:	4463      	add	r3, ip
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	9b01      	ldr	r3, [sp, #4]
 800163c:	407a      	eors	r2, r7
 800163e:	3301      	adds	r3, #1
 8001640:	2100      	movs	r1, #0
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	2e0a      	cmp	r6, #10
 8001648:	dd00      	ble.n	800164c <__aeabi_dmul+0x3c0>
 800164a:	e667      	b.n	800131c <__aeabi_dmul+0x90>
 800164c:	e683      	b.n	8001356 <__aeabi_dmul+0xca>
 800164e:	465b      	mov	r3, fp
 8001650:	4303      	orrs	r3, r0
 8001652:	469a      	mov	sl, r3
 8001654:	d02a      	beq.n	80016ac <__aeabi_dmul+0x420>
 8001656:	465b      	mov	r3, fp
 8001658:	2b00      	cmp	r3, #0
 800165a:	d06d      	beq.n	8001738 <__aeabi_dmul+0x4ac>
 800165c:	4658      	mov	r0, fp
 800165e:	f000 fd23 	bl	80020a8 <__clzsi2>
 8001662:	0001      	movs	r1, r0
 8001664:	0003      	movs	r3, r0
 8001666:	390b      	subs	r1, #11
 8001668:	221d      	movs	r2, #29
 800166a:	1a52      	subs	r2, r2, r1
 800166c:	0021      	movs	r1, r4
 800166e:	0018      	movs	r0, r3
 8001670:	465d      	mov	r5, fp
 8001672:	40d1      	lsrs	r1, r2
 8001674:	3808      	subs	r0, #8
 8001676:	4085      	lsls	r5, r0
 8001678:	000a      	movs	r2, r1
 800167a:	4084      	lsls	r4, r0
 800167c:	432a      	orrs	r2, r5
 800167e:	4693      	mov	fp, r2
 8001680:	46a2      	mov	sl, r4
 8001682:	4d5f      	ldr	r5, [pc, #380]	; (8001800 <__aeabi_dmul+0x574>)
 8001684:	2600      	movs	r6, #0
 8001686:	1aed      	subs	r5, r5, r3
 8001688:	2300      	movs	r3, #0
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	e625      	b.n	80012da <__aeabi_dmul+0x4e>
 800168e:	465b      	mov	r3, fp
 8001690:	4303      	orrs	r3, r0
 8001692:	469a      	mov	sl, r3
 8001694:	d105      	bne.n	80016a2 <__aeabi_dmul+0x416>
 8001696:	2300      	movs	r3, #0
 8001698:	469b      	mov	fp, r3
 800169a:	3302      	adds	r3, #2
 800169c:	2608      	movs	r6, #8
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	e61b      	b.n	80012da <__aeabi_dmul+0x4e>
 80016a2:	2303      	movs	r3, #3
 80016a4:	4682      	mov	sl, r0
 80016a6:	260c      	movs	r6, #12
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	e616      	b.n	80012da <__aeabi_dmul+0x4e>
 80016ac:	2300      	movs	r3, #0
 80016ae:	469b      	mov	fp, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	2604      	movs	r6, #4
 80016b4:	2500      	movs	r5, #0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	e60f      	b.n	80012da <__aeabi_dmul+0x4e>
 80016ba:	4642      	mov	r2, r8
 80016bc:	3301      	adds	r3, #1
 80016be:	9501      	str	r5, [sp, #4]
 80016c0:	431e      	orrs	r6, r3
 80016c2:	9b01      	ldr	r3, [sp, #4]
 80016c4:	407a      	eors	r2, r7
 80016c6:	3301      	adds	r3, #1
 80016c8:	2400      	movs	r4, #0
 80016ca:	2000      	movs	r0, #0
 80016cc:	2101      	movs	r1, #1
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	9302      	str	r3, [sp, #8]
 80016d2:	2e0a      	cmp	r6, #10
 80016d4:	dd00      	ble.n	80016d8 <__aeabi_dmul+0x44c>
 80016d6:	e621      	b.n	800131c <__aeabi_dmul+0x90>
 80016d8:	e63d      	b.n	8001356 <__aeabi_dmul+0xca>
 80016da:	2101      	movs	r1, #1
 80016dc:	1ac9      	subs	r1, r1, r3
 80016de:	2938      	cmp	r1, #56	; 0x38
 80016e0:	dd00      	ble.n	80016e4 <__aeabi_dmul+0x458>
 80016e2:	e642      	b.n	800136a <__aeabi_dmul+0xde>
 80016e4:	291f      	cmp	r1, #31
 80016e6:	dd47      	ble.n	8001778 <__aeabi_dmul+0x4ec>
 80016e8:	261f      	movs	r6, #31
 80016ea:	0025      	movs	r5, r4
 80016ec:	4276      	negs	r6, r6
 80016ee:	1af3      	subs	r3, r6, r3
 80016f0:	40dd      	lsrs	r5, r3
 80016f2:	002b      	movs	r3, r5
 80016f4:	2920      	cmp	r1, #32
 80016f6:	d005      	beq.n	8001704 <__aeabi_dmul+0x478>
 80016f8:	4942      	ldr	r1, [pc, #264]	; (8001804 <__aeabi_dmul+0x578>)
 80016fa:	9d02      	ldr	r5, [sp, #8]
 80016fc:	468c      	mov	ip, r1
 80016fe:	4465      	add	r5, ip
 8001700:	40ac      	lsls	r4, r5
 8001702:	4320      	orrs	r0, r4
 8001704:	1e41      	subs	r1, r0, #1
 8001706:	4188      	sbcs	r0, r1
 8001708:	4318      	orrs	r0, r3
 800170a:	2307      	movs	r3, #7
 800170c:	001d      	movs	r5, r3
 800170e:	2400      	movs	r4, #0
 8001710:	4005      	ands	r5, r0
 8001712:	4203      	tst	r3, r0
 8001714:	d04a      	beq.n	80017ac <__aeabi_dmul+0x520>
 8001716:	230f      	movs	r3, #15
 8001718:	2400      	movs	r4, #0
 800171a:	4003      	ands	r3, r0
 800171c:	2b04      	cmp	r3, #4
 800171e:	d042      	beq.n	80017a6 <__aeabi_dmul+0x51a>
 8001720:	1d03      	adds	r3, r0, #4
 8001722:	4283      	cmp	r3, r0
 8001724:	4180      	sbcs	r0, r0
 8001726:	4240      	negs	r0, r0
 8001728:	1824      	adds	r4, r4, r0
 800172a:	0018      	movs	r0, r3
 800172c:	0223      	lsls	r3, r4, #8
 800172e:	d53a      	bpl.n	80017a6 <__aeabi_dmul+0x51a>
 8001730:	2301      	movs	r3, #1
 8001732:	2400      	movs	r4, #0
 8001734:	2500      	movs	r5, #0
 8001736:	e61b      	b.n	8001370 <__aeabi_dmul+0xe4>
 8001738:	f000 fcb6 	bl	80020a8 <__clzsi2>
 800173c:	0001      	movs	r1, r0
 800173e:	0003      	movs	r3, r0
 8001740:	3115      	adds	r1, #21
 8001742:	3320      	adds	r3, #32
 8001744:	291c      	cmp	r1, #28
 8001746:	dd8f      	ble.n	8001668 <__aeabi_dmul+0x3dc>
 8001748:	3808      	subs	r0, #8
 800174a:	2200      	movs	r2, #0
 800174c:	4084      	lsls	r4, r0
 800174e:	4692      	mov	sl, r2
 8001750:	46a3      	mov	fp, r4
 8001752:	e796      	b.n	8001682 <__aeabi_dmul+0x3f6>
 8001754:	f000 fca8 	bl	80020a8 <__clzsi2>
 8001758:	0001      	movs	r1, r0
 800175a:	0003      	movs	r3, r0
 800175c:	3115      	adds	r1, #21
 800175e:	3320      	adds	r3, #32
 8001760:	291c      	cmp	r1, #28
 8001762:	dc00      	bgt.n	8001766 <__aeabi_dmul+0x4da>
 8001764:	e758      	b.n	8001618 <__aeabi_dmul+0x38c>
 8001766:	0002      	movs	r2, r0
 8001768:	464c      	mov	r4, r9
 800176a:	3a08      	subs	r2, #8
 800176c:	2000      	movs	r0, #0
 800176e:	4094      	lsls	r4, r2
 8001770:	e75d      	b.n	800162e <__aeabi_dmul+0x3a2>
 8001772:	9b01      	ldr	r3, [sp, #4]
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	e711      	b.n	800159c <__aeabi_dmul+0x310>
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <__aeabi_dmul+0x57c>)
 800177a:	0026      	movs	r6, r4
 800177c:	469c      	mov	ip, r3
 800177e:	0003      	movs	r3, r0
 8001780:	9d02      	ldr	r5, [sp, #8]
 8001782:	40cb      	lsrs	r3, r1
 8001784:	4465      	add	r5, ip
 8001786:	40ae      	lsls	r6, r5
 8001788:	431e      	orrs	r6, r3
 800178a:	0003      	movs	r3, r0
 800178c:	40ab      	lsls	r3, r5
 800178e:	1e58      	subs	r0, r3, #1
 8001790:	4183      	sbcs	r3, r0
 8001792:	0030      	movs	r0, r6
 8001794:	4318      	orrs	r0, r3
 8001796:	40cc      	lsrs	r4, r1
 8001798:	0743      	lsls	r3, r0, #29
 800179a:	d0c7      	beq.n	800172c <__aeabi_dmul+0x4a0>
 800179c:	230f      	movs	r3, #15
 800179e:	4003      	ands	r3, r0
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d1bd      	bne.n	8001720 <__aeabi_dmul+0x494>
 80017a4:	e7c2      	b.n	800172c <__aeabi_dmul+0x4a0>
 80017a6:	0765      	lsls	r5, r4, #29
 80017a8:	0264      	lsls	r4, r4, #9
 80017aa:	0b24      	lsrs	r4, r4, #12
 80017ac:	08c0      	lsrs	r0, r0, #3
 80017ae:	2300      	movs	r3, #0
 80017b0:	4305      	orrs	r5, r0
 80017b2:	e5dd      	b.n	8001370 <__aeabi_dmul+0xe4>
 80017b4:	2500      	movs	r5, #0
 80017b6:	2302      	movs	r3, #2
 80017b8:	2e0f      	cmp	r6, #15
 80017ba:	d10c      	bne.n	80017d6 <__aeabi_dmul+0x54a>
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	465b      	mov	r3, fp
 80017c0:	0324      	lsls	r4, r4, #12
 80017c2:	4223      	tst	r3, r4
 80017c4:	d00e      	beq.n	80017e4 <__aeabi_dmul+0x558>
 80017c6:	4221      	tst	r1, r4
 80017c8:	d10c      	bne.n	80017e4 <__aeabi_dmul+0x558>
 80017ca:	430c      	orrs	r4, r1
 80017cc:	0324      	lsls	r4, r4, #12
 80017ce:	003a      	movs	r2, r7
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <__aeabi_dmul+0x580>)
 80017d2:	0b24      	lsrs	r4, r4, #12
 80017d4:	e5cc      	b.n	8001370 <__aeabi_dmul+0xe4>
 80017d6:	2e0b      	cmp	r6, #11
 80017d8:	d000      	beq.n	80017dc <__aeabi_dmul+0x550>
 80017da:	e5a2      	b.n	8001322 <__aeabi_dmul+0x96>
 80017dc:	468b      	mov	fp, r1
 80017de:	46aa      	mov	sl, r5
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	e5f7      	b.n	80013d4 <__aeabi_dmul+0x148>
 80017e4:	2480      	movs	r4, #128	; 0x80
 80017e6:	465b      	mov	r3, fp
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	431c      	orrs	r4, r3
 80017ec:	0324      	lsls	r4, r4, #12
 80017ee:	4642      	mov	r2, r8
 80017f0:	4655      	mov	r5, sl
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <__aeabi_dmul+0x580>)
 80017f4:	0b24      	lsrs	r4, r4, #12
 80017f6:	e5bb      	b.n	8001370 <__aeabi_dmul+0xe4>
 80017f8:	464d      	mov	r5, r9
 80017fa:	0021      	movs	r1, r4
 80017fc:	2303      	movs	r3, #3
 80017fe:	e7db      	b.n	80017b8 <__aeabi_dmul+0x52c>
 8001800:	fffffc0d 	.word	0xfffffc0d
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000007ff 	.word	0x000007ff

08001810 <__aeabi_dsub>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	4657      	mov	r7, sl
 8001814:	464e      	mov	r6, r9
 8001816:	4645      	mov	r5, r8
 8001818:	46de      	mov	lr, fp
 800181a:	b5e0      	push	{r5, r6, r7, lr}
 800181c:	000d      	movs	r5, r1
 800181e:	0004      	movs	r4, r0
 8001820:	0019      	movs	r1, r3
 8001822:	0010      	movs	r0, r2
 8001824:	032b      	lsls	r3, r5, #12
 8001826:	0a5b      	lsrs	r3, r3, #9
 8001828:	0f62      	lsrs	r2, r4, #29
 800182a:	431a      	orrs	r2, r3
 800182c:	00e3      	lsls	r3, r4, #3
 800182e:	030c      	lsls	r4, r1, #12
 8001830:	0a64      	lsrs	r4, r4, #9
 8001832:	0f47      	lsrs	r7, r0, #29
 8001834:	4327      	orrs	r7, r4
 8001836:	4cd0      	ldr	r4, [pc, #832]	; (8001b78 <__aeabi_dsub+0x368>)
 8001838:	006e      	lsls	r6, r5, #1
 800183a:	4691      	mov	r9, r2
 800183c:	b083      	sub	sp, #12
 800183e:	004a      	lsls	r2, r1, #1
 8001840:	00c0      	lsls	r0, r0, #3
 8001842:	4698      	mov	r8, r3
 8001844:	46a2      	mov	sl, r4
 8001846:	0d76      	lsrs	r6, r6, #21
 8001848:	0fed      	lsrs	r5, r5, #31
 800184a:	0d52      	lsrs	r2, r2, #21
 800184c:	0fc9      	lsrs	r1, r1, #31
 800184e:	9001      	str	r0, [sp, #4]
 8001850:	42a2      	cmp	r2, r4
 8001852:	d100      	bne.n	8001856 <__aeabi_dsub+0x46>
 8001854:	e0b9      	b.n	80019ca <__aeabi_dsub+0x1ba>
 8001856:	2401      	movs	r4, #1
 8001858:	4061      	eors	r1, r4
 800185a:	468b      	mov	fp, r1
 800185c:	428d      	cmp	r5, r1
 800185e:	d100      	bne.n	8001862 <__aeabi_dsub+0x52>
 8001860:	e08d      	b.n	800197e <__aeabi_dsub+0x16e>
 8001862:	1ab4      	subs	r4, r6, r2
 8001864:	46a4      	mov	ip, r4
 8001866:	2c00      	cmp	r4, #0
 8001868:	dc00      	bgt.n	800186c <__aeabi_dsub+0x5c>
 800186a:	e0b7      	b.n	80019dc <__aeabi_dsub+0x1cc>
 800186c:	2a00      	cmp	r2, #0
 800186e:	d100      	bne.n	8001872 <__aeabi_dsub+0x62>
 8001870:	e0cb      	b.n	8001a0a <__aeabi_dsub+0x1fa>
 8001872:	4ac1      	ldr	r2, [pc, #772]	; (8001b78 <__aeabi_dsub+0x368>)
 8001874:	4296      	cmp	r6, r2
 8001876:	d100      	bne.n	800187a <__aeabi_dsub+0x6a>
 8001878:	e186      	b.n	8001b88 <__aeabi_dsub+0x378>
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	0412      	lsls	r2, r2, #16
 800187e:	4317      	orrs	r7, r2
 8001880:	4662      	mov	r2, ip
 8001882:	2a38      	cmp	r2, #56	; 0x38
 8001884:	dd00      	ble.n	8001888 <__aeabi_dsub+0x78>
 8001886:	e1a4      	b.n	8001bd2 <__aeabi_dsub+0x3c2>
 8001888:	2a1f      	cmp	r2, #31
 800188a:	dd00      	ble.n	800188e <__aeabi_dsub+0x7e>
 800188c:	e21d      	b.n	8001cca <__aeabi_dsub+0x4ba>
 800188e:	4661      	mov	r1, ip
 8001890:	2220      	movs	r2, #32
 8001892:	003c      	movs	r4, r7
 8001894:	1a52      	subs	r2, r2, r1
 8001896:	0001      	movs	r1, r0
 8001898:	4090      	lsls	r0, r2
 800189a:	4094      	lsls	r4, r2
 800189c:	1e42      	subs	r2, r0, #1
 800189e:	4190      	sbcs	r0, r2
 80018a0:	4662      	mov	r2, ip
 80018a2:	46a0      	mov	r8, r4
 80018a4:	4664      	mov	r4, ip
 80018a6:	40d7      	lsrs	r7, r2
 80018a8:	464a      	mov	r2, r9
 80018aa:	40e1      	lsrs	r1, r4
 80018ac:	4644      	mov	r4, r8
 80018ae:	1bd2      	subs	r2, r2, r7
 80018b0:	4691      	mov	r9, r2
 80018b2:	430c      	orrs	r4, r1
 80018b4:	4304      	orrs	r4, r0
 80018b6:	1b1c      	subs	r4, r3, r4
 80018b8:	42a3      	cmp	r3, r4
 80018ba:	4192      	sbcs	r2, r2
 80018bc:	464b      	mov	r3, r9
 80018be:	4252      	negs	r2, r2
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	469a      	mov	sl, r3
 80018c4:	4653      	mov	r3, sl
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	d400      	bmi.n	80018cc <__aeabi_dsub+0xbc>
 80018ca:	e12b      	b.n	8001b24 <__aeabi_dsub+0x314>
 80018cc:	4653      	mov	r3, sl
 80018ce:	025a      	lsls	r2, r3, #9
 80018d0:	0a53      	lsrs	r3, r2, #9
 80018d2:	469a      	mov	sl, r3
 80018d4:	4653      	mov	r3, sl
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d100      	bne.n	80018dc <__aeabi_dsub+0xcc>
 80018da:	e166      	b.n	8001baa <__aeabi_dsub+0x39a>
 80018dc:	4650      	mov	r0, sl
 80018de:	f000 fbe3 	bl	80020a8 <__clzsi2>
 80018e2:	0003      	movs	r3, r0
 80018e4:	3b08      	subs	r3, #8
 80018e6:	2220      	movs	r2, #32
 80018e8:	0020      	movs	r0, r4
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	4651      	mov	r1, sl
 80018ee:	40d0      	lsrs	r0, r2
 80018f0:	4099      	lsls	r1, r3
 80018f2:	0002      	movs	r2, r0
 80018f4:	409c      	lsls	r4, r3
 80018f6:	430a      	orrs	r2, r1
 80018f8:	429e      	cmp	r6, r3
 80018fa:	dd00      	ble.n	80018fe <__aeabi_dsub+0xee>
 80018fc:	e164      	b.n	8001bc8 <__aeabi_dsub+0x3b8>
 80018fe:	1b9b      	subs	r3, r3, r6
 8001900:	1c59      	adds	r1, r3, #1
 8001902:	291f      	cmp	r1, #31
 8001904:	dd00      	ble.n	8001908 <__aeabi_dsub+0xf8>
 8001906:	e0fe      	b.n	8001b06 <__aeabi_dsub+0x2f6>
 8001908:	2320      	movs	r3, #32
 800190a:	0010      	movs	r0, r2
 800190c:	0026      	movs	r6, r4
 800190e:	1a5b      	subs	r3, r3, r1
 8001910:	409c      	lsls	r4, r3
 8001912:	4098      	lsls	r0, r3
 8001914:	40ce      	lsrs	r6, r1
 8001916:	40ca      	lsrs	r2, r1
 8001918:	1e63      	subs	r3, r4, #1
 800191a:	419c      	sbcs	r4, r3
 800191c:	4330      	orrs	r0, r6
 800191e:	4692      	mov	sl, r2
 8001920:	2600      	movs	r6, #0
 8001922:	4304      	orrs	r4, r0
 8001924:	0763      	lsls	r3, r4, #29
 8001926:	d009      	beq.n	800193c <__aeabi_dsub+0x12c>
 8001928:	230f      	movs	r3, #15
 800192a:	4023      	ands	r3, r4
 800192c:	2b04      	cmp	r3, #4
 800192e:	d005      	beq.n	800193c <__aeabi_dsub+0x12c>
 8001930:	1d23      	adds	r3, r4, #4
 8001932:	42a3      	cmp	r3, r4
 8001934:	41a4      	sbcs	r4, r4
 8001936:	4264      	negs	r4, r4
 8001938:	44a2      	add	sl, r4
 800193a:	001c      	movs	r4, r3
 800193c:	4653      	mov	r3, sl
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	d400      	bmi.n	8001944 <__aeabi_dsub+0x134>
 8001942:	e0f2      	b.n	8001b2a <__aeabi_dsub+0x31a>
 8001944:	4b8c      	ldr	r3, [pc, #560]	; (8001b78 <__aeabi_dsub+0x368>)
 8001946:	3601      	adds	r6, #1
 8001948:	429e      	cmp	r6, r3
 800194a:	d100      	bne.n	800194e <__aeabi_dsub+0x13e>
 800194c:	e10f      	b.n	8001b6e <__aeabi_dsub+0x35e>
 800194e:	4653      	mov	r3, sl
 8001950:	498a      	ldr	r1, [pc, #552]	; (8001b7c <__aeabi_dsub+0x36c>)
 8001952:	08e4      	lsrs	r4, r4, #3
 8001954:	400b      	ands	r3, r1
 8001956:	0019      	movs	r1, r3
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	4323      	orrs	r3, r4
 800195c:	0572      	lsls	r2, r6, #21
 800195e:	024c      	lsls	r4, r1, #9
 8001960:	0b24      	lsrs	r4, r4, #12
 8001962:	0d52      	lsrs	r2, r2, #21
 8001964:	0512      	lsls	r2, r2, #20
 8001966:	4322      	orrs	r2, r4
 8001968:	07ed      	lsls	r5, r5, #31
 800196a:	432a      	orrs	r2, r5
 800196c:	0018      	movs	r0, r3
 800196e:	0011      	movs	r1, r2
 8001970:	b003      	add	sp, #12
 8001972:	bcf0      	pop	{r4, r5, r6, r7}
 8001974:	46bb      	mov	fp, r7
 8001976:	46b2      	mov	sl, r6
 8001978:	46a9      	mov	r9, r5
 800197a:	46a0      	mov	r8, r4
 800197c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197e:	1ab4      	subs	r4, r6, r2
 8001980:	46a4      	mov	ip, r4
 8001982:	2c00      	cmp	r4, #0
 8001984:	dd59      	ble.n	8001a3a <__aeabi_dsub+0x22a>
 8001986:	2a00      	cmp	r2, #0
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x17c>
 800198a:	e0b0      	b.n	8001aee <__aeabi_dsub+0x2de>
 800198c:	4556      	cmp	r6, sl
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x182>
 8001990:	e0fa      	b.n	8001b88 <__aeabi_dsub+0x378>
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	0412      	lsls	r2, r2, #16
 8001996:	4317      	orrs	r7, r2
 8001998:	4662      	mov	r2, ip
 800199a:	2a38      	cmp	r2, #56	; 0x38
 800199c:	dd00      	ble.n	80019a0 <__aeabi_dsub+0x190>
 800199e:	e0d4      	b.n	8001b4a <__aeabi_dsub+0x33a>
 80019a0:	2a1f      	cmp	r2, #31
 80019a2:	dc00      	bgt.n	80019a6 <__aeabi_dsub+0x196>
 80019a4:	e1c0      	b.n	8001d28 <__aeabi_dsub+0x518>
 80019a6:	0039      	movs	r1, r7
 80019a8:	3a20      	subs	r2, #32
 80019aa:	40d1      	lsrs	r1, r2
 80019ac:	4662      	mov	r2, ip
 80019ae:	2a20      	cmp	r2, #32
 80019b0:	d006      	beq.n	80019c0 <__aeabi_dsub+0x1b0>
 80019b2:	4664      	mov	r4, ip
 80019b4:	2240      	movs	r2, #64	; 0x40
 80019b6:	1b12      	subs	r2, r2, r4
 80019b8:	003c      	movs	r4, r7
 80019ba:	4094      	lsls	r4, r2
 80019bc:	4304      	orrs	r4, r0
 80019be:	9401      	str	r4, [sp, #4]
 80019c0:	9c01      	ldr	r4, [sp, #4]
 80019c2:	1e62      	subs	r2, r4, #1
 80019c4:	4194      	sbcs	r4, r2
 80019c6:	430c      	orrs	r4, r1
 80019c8:	e0c3      	b.n	8001b52 <__aeabi_dsub+0x342>
 80019ca:	003c      	movs	r4, r7
 80019cc:	4304      	orrs	r4, r0
 80019ce:	d02b      	beq.n	8001a28 <__aeabi_dsub+0x218>
 80019d0:	468b      	mov	fp, r1
 80019d2:	428d      	cmp	r5, r1
 80019d4:	d02e      	beq.n	8001a34 <__aeabi_dsub+0x224>
 80019d6:	4c6a      	ldr	r4, [pc, #424]	; (8001b80 <__aeabi_dsub+0x370>)
 80019d8:	46a4      	mov	ip, r4
 80019da:	44b4      	add	ip, r6
 80019dc:	4664      	mov	r4, ip
 80019de:	2c00      	cmp	r4, #0
 80019e0:	d05f      	beq.n	8001aa2 <__aeabi_dsub+0x292>
 80019e2:	1b94      	subs	r4, r2, r6
 80019e4:	46a4      	mov	ip, r4
 80019e6:	2e00      	cmp	r6, #0
 80019e8:	d000      	beq.n	80019ec <__aeabi_dsub+0x1dc>
 80019ea:	e120      	b.n	8001c2e <__aeabi_dsub+0x41e>
 80019ec:	464c      	mov	r4, r9
 80019ee:	431c      	orrs	r4, r3
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1e4>
 80019f2:	e1c7      	b.n	8001d84 <__aeabi_dsub+0x574>
 80019f4:	4661      	mov	r1, ip
 80019f6:	1e4c      	subs	r4, r1, #1
 80019f8:	2901      	cmp	r1, #1
 80019fa:	d100      	bne.n	80019fe <__aeabi_dsub+0x1ee>
 80019fc:	e223      	b.n	8001e46 <__aeabi_dsub+0x636>
 80019fe:	4d5e      	ldr	r5, [pc, #376]	; (8001b78 <__aeabi_dsub+0x368>)
 8001a00:	45ac      	cmp	ip, r5
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x1f6>
 8001a04:	e1d8      	b.n	8001db8 <__aeabi_dsub+0x5a8>
 8001a06:	46a4      	mov	ip, r4
 8001a08:	e11a      	b.n	8001c40 <__aeabi_dsub+0x430>
 8001a0a:	003a      	movs	r2, r7
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x202>
 8001a10:	e0e4      	b.n	8001bdc <__aeabi_dsub+0x3cc>
 8001a12:	0022      	movs	r2, r4
 8001a14:	3a01      	subs	r2, #1
 8001a16:	2c01      	cmp	r4, #1
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x20c>
 8001a1a:	e1c3      	b.n	8001da4 <__aeabi_dsub+0x594>
 8001a1c:	4956      	ldr	r1, [pc, #344]	; (8001b78 <__aeabi_dsub+0x368>)
 8001a1e:	428c      	cmp	r4, r1
 8001a20:	d100      	bne.n	8001a24 <__aeabi_dsub+0x214>
 8001a22:	e0b1      	b.n	8001b88 <__aeabi_dsub+0x378>
 8001a24:	4694      	mov	ip, r2
 8001a26:	e72b      	b.n	8001880 <__aeabi_dsub+0x70>
 8001a28:	2401      	movs	r4, #1
 8001a2a:	4061      	eors	r1, r4
 8001a2c:	468b      	mov	fp, r1
 8001a2e:	428d      	cmp	r5, r1
 8001a30:	d000      	beq.n	8001a34 <__aeabi_dsub+0x224>
 8001a32:	e716      	b.n	8001862 <__aeabi_dsub+0x52>
 8001a34:	4952      	ldr	r1, [pc, #328]	; (8001b80 <__aeabi_dsub+0x370>)
 8001a36:	468c      	mov	ip, r1
 8001a38:	44b4      	add	ip, r6
 8001a3a:	4664      	mov	r4, ip
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dsub+0x232>
 8001a40:	e0d3      	b.n	8001bea <__aeabi_dsub+0x3da>
 8001a42:	1b91      	subs	r1, r2, r6
 8001a44:	468c      	mov	ip, r1
 8001a46:	2e00      	cmp	r6, #0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x23c>
 8001a4a:	e15e      	b.n	8001d0a <__aeabi_dsub+0x4fa>
 8001a4c:	494a      	ldr	r1, [pc, #296]	; (8001b78 <__aeabi_dsub+0x368>)
 8001a4e:	428a      	cmp	r2, r1
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dsub+0x244>
 8001a52:	e1be      	b.n	8001dd2 <__aeabi_dsub+0x5c2>
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	464c      	mov	r4, r9
 8001a58:	0409      	lsls	r1, r1, #16
 8001a5a:	430c      	orrs	r4, r1
 8001a5c:	46a1      	mov	r9, r4
 8001a5e:	4661      	mov	r1, ip
 8001a60:	2938      	cmp	r1, #56	; 0x38
 8001a62:	dd00      	ble.n	8001a66 <__aeabi_dsub+0x256>
 8001a64:	e1ba      	b.n	8001ddc <__aeabi_dsub+0x5cc>
 8001a66:	291f      	cmp	r1, #31
 8001a68:	dd00      	ble.n	8001a6c <__aeabi_dsub+0x25c>
 8001a6a:	e227      	b.n	8001ebc <__aeabi_dsub+0x6ac>
 8001a6c:	2420      	movs	r4, #32
 8001a6e:	1a64      	subs	r4, r4, r1
 8001a70:	4649      	mov	r1, r9
 8001a72:	40a1      	lsls	r1, r4
 8001a74:	001e      	movs	r6, r3
 8001a76:	4688      	mov	r8, r1
 8001a78:	4661      	mov	r1, ip
 8001a7a:	40a3      	lsls	r3, r4
 8001a7c:	40ce      	lsrs	r6, r1
 8001a7e:	4641      	mov	r1, r8
 8001a80:	1e5c      	subs	r4, r3, #1
 8001a82:	41a3      	sbcs	r3, r4
 8001a84:	4331      	orrs	r1, r6
 8001a86:	4319      	orrs	r1, r3
 8001a88:	000c      	movs	r4, r1
 8001a8a:	4663      	mov	r3, ip
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	40d9      	lsrs	r1, r3
 8001a90:	187f      	adds	r7, r7, r1
 8001a92:	1824      	adds	r4, r4, r0
 8001a94:	4284      	cmp	r4, r0
 8001a96:	419b      	sbcs	r3, r3
 8001a98:	425b      	negs	r3, r3
 8001a9a:	469a      	mov	sl, r3
 8001a9c:	0016      	movs	r6, r2
 8001a9e:	44ba      	add	sl, r7
 8001aa0:	e05d      	b.n	8001b5e <__aeabi_dsub+0x34e>
 8001aa2:	4c38      	ldr	r4, [pc, #224]	; (8001b84 <__aeabi_dsub+0x374>)
 8001aa4:	1c72      	adds	r2, r6, #1
 8001aa6:	4222      	tst	r2, r4
 8001aa8:	d000      	beq.n	8001aac <__aeabi_dsub+0x29c>
 8001aaa:	e0df      	b.n	8001c6c <__aeabi_dsub+0x45c>
 8001aac:	464a      	mov	r2, r9
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	2e00      	cmp	r6, #0
 8001ab2:	d000      	beq.n	8001ab6 <__aeabi_dsub+0x2a6>
 8001ab4:	e15c      	b.n	8001d70 <__aeabi_dsub+0x560>
 8001ab6:	2a00      	cmp	r2, #0
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x2ac>
 8001aba:	e1cf      	b.n	8001e5c <__aeabi_dsub+0x64c>
 8001abc:	003a      	movs	r2, r7
 8001abe:	4302      	orrs	r2, r0
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x2b4>
 8001ac2:	e17f      	b.n	8001dc4 <__aeabi_dsub+0x5b4>
 8001ac4:	1a1c      	subs	r4, r3, r0
 8001ac6:	464a      	mov	r2, r9
 8001ac8:	42a3      	cmp	r3, r4
 8001aca:	4189      	sbcs	r1, r1
 8001acc:	1bd2      	subs	r2, r2, r7
 8001ace:	4249      	negs	r1, r1
 8001ad0:	1a52      	subs	r2, r2, r1
 8001ad2:	4692      	mov	sl, r2
 8001ad4:	0212      	lsls	r2, r2, #8
 8001ad6:	d400      	bmi.n	8001ada <__aeabi_dsub+0x2ca>
 8001ad8:	e20a      	b.n	8001ef0 <__aeabi_dsub+0x6e0>
 8001ada:	1ac4      	subs	r4, r0, r3
 8001adc:	42a0      	cmp	r0, r4
 8001ade:	4180      	sbcs	r0, r0
 8001ae0:	464b      	mov	r3, r9
 8001ae2:	4240      	negs	r0, r0
 8001ae4:	1aff      	subs	r7, r7, r3
 8001ae6:	1a3b      	subs	r3, r7, r0
 8001ae8:	469a      	mov	sl, r3
 8001aea:	465d      	mov	r5, fp
 8001aec:	e71a      	b.n	8001924 <__aeabi_dsub+0x114>
 8001aee:	003a      	movs	r2, r7
 8001af0:	4302      	orrs	r2, r0
 8001af2:	d073      	beq.n	8001bdc <__aeabi_dsub+0x3cc>
 8001af4:	0022      	movs	r2, r4
 8001af6:	3a01      	subs	r2, #1
 8001af8:	2c01      	cmp	r4, #1
 8001afa:	d100      	bne.n	8001afe <__aeabi_dsub+0x2ee>
 8001afc:	e0cb      	b.n	8001c96 <__aeabi_dsub+0x486>
 8001afe:	4554      	cmp	r4, sl
 8001b00:	d042      	beq.n	8001b88 <__aeabi_dsub+0x378>
 8001b02:	4694      	mov	ip, r2
 8001b04:	e748      	b.n	8001998 <__aeabi_dsub+0x188>
 8001b06:	0010      	movs	r0, r2
 8001b08:	3b1f      	subs	r3, #31
 8001b0a:	40d8      	lsrs	r0, r3
 8001b0c:	2920      	cmp	r1, #32
 8001b0e:	d003      	beq.n	8001b18 <__aeabi_dsub+0x308>
 8001b10:	2340      	movs	r3, #64	; 0x40
 8001b12:	1a5b      	subs	r3, r3, r1
 8001b14:	409a      	lsls	r2, r3
 8001b16:	4314      	orrs	r4, r2
 8001b18:	1e63      	subs	r3, r4, #1
 8001b1a:	419c      	sbcs	r4, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	2600      	movs	r6, #0
 8001b20:	469a      	mov	sl, r3
 8001b22:	4304      	orrs	r4, r0
 8001b24:	0763      	lsls	r3, r4, #29
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dsub+0x31a>
 8001b28:	e6fe      	b.n	8001928 <__aeabi_dsub+0x118>
 8001b2a:	4652      	mov	r2, sl
 8001b2c:	08e3      	lsrs	r3, r4, #3
 8001b2e:	0752      	lsls	r2, r2, #29
 8001b30:	4313      	orrs	r3, r2
 8001b32:	4652      	mov	r2, sl
 8001b34:	46b4      	mov	ip, r6
 8001b36:	08d2      	lsrs	r2, r2, #3
 8001b38:	490f      	ldr	r1, [pc, #60]	; (8001b78 <__aeabi_dsub+0x368>)
 8001b3a:	458c      	cmp	ip, r1
 8001b3c:	d02a      	beq.n	8001b94 <__aeabi_dsub+0x384>
 8001b3e:	0312      	lsls	r2, r2, #12
 8001b40:	0b14      	lsrs	r4, r2, #12
 8001b42:	4662      	mov	r2, ip
 8001b44:	0552      	lsls	r2, r2, #21
 8001b46:	0d52      	lsrs	r2, r2, #21
 8001b48:	e70c      	b.n	8001964 <__aeabi_dsub+0x154>
 8001b4a:	003c      	movs	r4, r7
 8001b4c:	4304      	orrs	r4, r0
 8001b4e:	1e62      	subs	r2, r4, #1
 8001b50:	4194      	sbcs	r4, r2
 8001b52:	18e4      	adds	r4, r4, r3
 8001b54:	429c      	cmp	r4, r3
 8001b56:	4192      	sbcs	r2, r2
 8001b58:	4252      	negs	r2, r2
 8001b5a:	444a      	add	r2, r9
 8001b5c:	4692      	mov	sl, r2
 8001b5e:	4653      	mov	r3, sl
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	d5df      	bpl.n	8001b24 <__aeabi_dsub+0x314>
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__aeabi_dsub+0x368>)
 8001b66:	3601      	adds	r6, #1
 8001b68:	429e      	cmp	r6, r3
 8001b6a:	d000      	beq.n	8001b6e <__aeabi_dsub+0x35e>
 8001b6c:	e0a0      	b.n	8001cb0 <__aeabi_dsub+0x4a0>
 8001b6e:	0032      	movs	r2, r6
 8001b70:	2400      	movs	r4, #0
 8001b72:	2300      	movs	r3, #0
 8001b74:	e6f6      	b.n	8001964 <__aeabi_dsub+0x154>
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	000007ff 	.word	0x000007ff
 8001b7c:	ff7fffff 	.word	0xff7fffff
 8001b80:	fffff801 	.word	0xfffff801
 8001b84:	000007fe 	.word	0x000007fe
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	464a      	mov	r2, r9
 8001b8c:	0752      	lsls	r2, r2, #29
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	464a      	mov	r2, r9
 8001b92:	08d2      	lsrs	r2, r2, #3
 8001b94:	0019      	movs	r1, r3
 8001b96:	4311      	orrs	r1, r2
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x38c>
 8001b9a:	e1b5      	b.n	8001f08 <__aeabi_dsub+0x6f8>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	0324      	lsls	r4, r4, #12
 8001ba0:	4314      	orrs	r4, r2
 8001ba2:	0324      	lsls	r4, r4, #12
 8001ba4:	4ad5      	ldr	r2, [pc, #852]	; (8001efc <__aeabi_dsub+0x6ec>)
 8001ba6:	0b24      	lsrs	r4, r4, #12
 8001ba8:	e6dc      	b.n	8001964 <__aeabi_dsub+0x154>
 8001baa:	0020      	movs	r0, r4
 8001bac:	f000 fa7c 	bl	80020a8 <__clzsi2>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	3318      	adds	r3, #24
 8001bb4:	2b1f      	cmp	r3, #31
 8001bb6:	dc00      	bgt.n	8001bba <__aeabi_dsub+0x3aa>
 8001bb8:	e695      	b.n	80018e6 <__aeabi_dsub+0xd6>
 8001bba:	0022      	movs	r2, r4
 8001bbc:	3808      	subs	r0, #8
 8001bbe:	4082      	lsls	r2, r0
 8001bc0:	2400      	movs	r4, #0
 8001bc2:	429e      	cmp	r6, r3
 8001bc4:	dc00      	bgt.n	8001bc8 <__aeabi_dsub+0x3b8>
 8001bc6:	e69a      	b.n	80018fe <__aeabi_dsub+0xee>
 8001bc8:	1af6      	subs	r6, r6, r3
 8001bca:	4bcd      	ldr	r3, [pc, #820]	; (8001f00 <__aeabi_dsub+0x6f0>)
 8001bcc:	401a      	ands	r2, r3
 8001bce:	4692      	mov	sl, r2
 8001bd0:	e6a8      	b.n	8001924 <__aeabi_dsub+0x114>
 8001bd2:	003c      	movs	r4, r7
 8001bd4:	4304      	orrs	r4, r0
 8001bd6:	1e62      	subs	r2, r4, #1
 8001bd8:	4194      	sbcs	r4, r2
 8001bda:	e66c      	b.n	80018b6 <__aeabi_dsub+0xa6>
 8001bdc:	464a      	mov	r2, r9
 8001bde:	08db      	lsrs	r3, r3, #3
 8001be0:	0752      	lsls	r2, r2, #29
 8001be2:	4313      	orrs	r3, r2
 8001be4:	464a      	mov	r2, r9
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	e7a6      	b.n	8001b38 <__aeabi_dsub+0x328>
 8001bea:	4cc6      	ldr	r4, [pc, #792]	; (8001f04 <__aeabi_dsub+0x6f4>)
 8001bec:	1c72      	adds	r2, r6, #1
 8001bee:	4222      	tst	r2, r4
 8001bf0:	d000      	beq.n	8001bf4 <__aeabi_dsub+0x3e4>
 8001bf2:	e0ac      	b.n	8001d4e <__aeabi_dsub+0x53e>
 8001bf4:	464a      	mov	r2, r9
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	2e00      	cmp	r6, #0
 8001bfa:	d000      	beq.n	8001bfe <__aeabi_dsub+0x3ee>
 8001bfc:	e105      	b.n	8001e0a <__aeabi_dsub+0x5fa>
 8001bfe:	2a00      	cmp	r2, #0
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x3f4>
 8001c02:	e156      	b.n	8001eb2 <__aeabi_dsub+0x6a2>
 8001c04:	003a      	movs	r2, r7
 8001c06:	4302      	orrs	r2, r0
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x3fc>
 8001c0a:	e0db      	b.n	8001dc4 <__aeabi_dsub+0x5b4>
 8001c0c:	181c      	adds	r4, r3, r0
 8001c0e:	429c      	cmp	r4, r3
 8001c10:	419b      	sbcs	r3, r3
 8001c12:	444f      	add	r7, r9
 8001c14:	46ba      	mov	sl, r7
 8001c16:	425b      	negs	r3, r3
 8001c18:	449a      	add	sl, r3
 8001c1a:	4653      	mov	r3, sl
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	d400      	bmi.n	8001c22 <__aeabi_dsub+0x412>
 8001c20:	e780      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001c22:	4652      	mov	r2, sl
 8001c24:	4bb6      	ldr	r3, [pc, #728]	; (8001f00 <__aeabi_dsub+0x6f0>)
 8001c26:	2601      	movs	r6, #1
 8001c28:	401a      	ands	r2, r3
 8001c2a:	4692      	mov	sl, r2
 8001c2c:	e77a      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001c2e:	4cb3      	ldr	r4, [pc, #716]	; (8001efc <__aeabi_dsub+0x6ec>)
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x426>
 8001c34:	e0c0      	b.n	8001db8 <__aeabi_dsub+0x5a8>
 8001c36:	2480      	movs	r4, #128	; 0x80
 8001c38:	464d      	mov	r5, r9
 8001c3a:	0424      	lsls	r4, r4, #16
 8001c3c:	4325      	orrs	r5, r4
 8001c3e:	46a9      	mov	r9, r5
 8001c40:	4664      	mov	r4, ip
 8001c42:	2c38      	cmp	r4, #56	; 0x38
 8001c44:	dc53      	bgt.n	8001cee <__aeabi_dsub+0x4de>
 8001c46:	4661      	mov	r1, ip
 8001c48:	2c1f      	cmp	r4, #31
 8001c4a:	dd00      	ble.n	8001c4e <__aeabi_dsub+0x43e>
 8001c4c:	e0cd      	b.n	8001dea <__aeabi_dsub+0x5da>
 8001c4e:	2520      	movs	r5, #32
 8001c50:	001e      	movs	r6, r3
 8001c52:	1b2d      	subs	r5, r5, r4
 8001c54:	464c      	mov	r4, r9
 8001c56:	40ab      	lsls	r3, r5
 8001c58:	40ac      	lsls	r4, r5
 8001c5a:	40ce      	lsrs	r6, r1
 8001c5c:	1e5d      	subs	r5, r3, #1
 8001c5e:	41ab      	sbcs	r3, r5
 8001c60:	4334      	orrs	r4, r6
 8001c62:	4323      	orrs	r3, r4
 8001c64:	464c      	mov	r4, r9
 8001c66:	40cc      	lsrs	r4, r1
 8001c68:	1b3f      	subs	r7, r7, r4
 8001c6a:	e045      	b.n	8001cf8 <__aeabi_dsub+0x4e8>
 8001c6c:	464a      	mov	r2, r9
 8001c6e:	1a1c      	subs	r4, r3, r0
 8001c70:	1bd1      	subs	r1, r2, r7
 8001c72:	42a3      	cmp	r3, r4
 8001c74:	4192      	sbcs	r2, r2
 8001c76:	4252      	negs	r2, r2
 8001c78:	4692      	mov	sl, r2
 8001c7a:	000a      	movs	r2, r1
 8001c7c:	4651      	mov	r1, sl
 8001c7e:	1a52      	subs	r2, r2, r1
 8001c80:	4692      	mov	sl, r2
 8001c82:	0212      	lsls	r2, r2, #8
 8001c84:	d500      	bpl.n	8001c88 <__aeabi_dsub+0x478>
 8001c86:	e083      	b.n	8001d90 <__aeabi_dsub+0x580>
 8001c88:	4653      	mov	r3, sl
 8001c8a:	4323      	orrs	r3, r4
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x480>
 8001c8e:	e621      	b.n	80018d4 <__aeabi_dsub+0xc4>
 8001c90:	2200      	movs	r2, #0
 8001c92:	2500      	movs	r5, #0
 8001c94:	e753      	b.n	8001b3e <__aeabi_dsub+0x32e>
 8001c96:	181c      	adds	r4, r3, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	419b      	sbcs	r3, r3
 8001c9c:	444f      	add	r7, r9
 8001c9e:	46ba      	mov	sl, r7
 8001ca0:	425b      	negs	r3, r3
 8001ca2:	449a      	add	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	2601      	movs	r6, #1
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	d400      	bmi.n	8001cae <__aeabi_dsub+0x49e>
 8001cac:	e73a      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001cae:	2602      	movs	r6, #2
 8001cb0:	4652      	mov	r2, sl
 8001cb2:	4b93      	ldr	r3, [pc, #588]	; (8001f00 <__aeabi_dsub+0x6f0>)
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	0013      	movs	r3, r2
 8001cba:	4021      	ands	r1, r4
 8001cbc:	0862      	lsrs	r2, r4, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	07dc      	lsls	r4, r3, #31
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	469a      	mov	sl, r3
 8001cc6:	4314      	orrs	r4, r2
 8001cc8:	e62c      	b.n	8001924 <__aeabi_dsub+0x114>
 8001cca:	0039      	movs	r1, r7
 8001ccc:	3a20      	subs	r2, #32
 8001cce:	40d1      	lsrs	r1, r2
 8001cd0:	4662      	mov	r2, ip
 8001cd2:	2a20      	cmp	r2, #32
 8001cd4:	d006      	beq.n	8001ce4 <__aeabi_dsub+0x4d4>
 8001cd6:	4664      	mov	r4, ip
 8001cd8:	2240      	movs	r2, #64	; 0x40
 8001cda:	1b12      	subs	r2, r2, r4
 8001cdc:	003c      	movs	r4, r7
 8001cde:	4094      	lsls	r4, r2
 8001ce0:	4304      	orrs	r4, r0
 8001ce2:	9401      	str	r4, [sp, #4]
 8001ce4:	9c01      	ldr	r4, [sp, #4]
 8001ce6:	1e62      	subs	r2, r4, #1
 8001ce8:	4194      	sbcs	r4, r2
 8001cea:	430c      	orrs	r4, r1
 8001cec:	e5e3      	b.n	80018b6 <__aeabi_dsub+0xa6>
 8001cee:	4649      	mov	r1, r9
 8001cf0:	4319      	orrs	r1, r3
 8001cf2:	000b      	movs	r3, r1
 8001cf4:	1e5c      	subs	r4, r3, #1
 8001cf6:	41a3      	sbcs	r3, r4
 8001cf8:	1ac4      	subs	r4, r0, r3
 8001cfa:	42a0      	cmp	r0, r4
 8001cfc:	419b      	sbcs	r3, r3
 8001cfe:	425b      	negs	r3, r3
 8001d00:	1afb      	subs	r3, r7, r3
 8001d02:	469a      	mov	sl, r3
 8001d04:	465d      	mov	r5, fp
 8001d06:	0016      	movs	r6, r2
 8001d08:	e5dc      	b.n	80018c4 <__aeabi_dsub+0xb4>
 8001d0a:	4649      	mov	r1, r9
 8001d0c:	4319      	orrs	r1, r3
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x502>
 8001d10:	e0ae      	b.n	8001e70 <__aeabi_dsub+0x660>
 8001d12:	4661      	mov	r1, ip
 8001d14:	4664      	mov	r4, ip
 8001d16:	3901      	subs	r1, #1
 8001d18:	2c01      	cmp	r4, #1
 8001d1a:	d100      	bne.n	8001d1e <__aeabi_dsub+0x50e>
 8001d1c:	e0e0      	b.n	8001ee0 <__aeabi_dsub+0x6d0>
 8001d1e:	4c77      	ldr	r4, [pc, #476]	; (8001efc <__aeabi_dsub+0x6ec>)
 8001d20:	45a4      	cmp	ip, r4
 8001d22:	d056      	beq.n	8001dd2 <__aeabi_dsub+0x5c2>
 8001d24:	468c      	mov	ip, r1
 8001d26:	e69a      	b.n	8001a5e <__aeabi_dsub+0x24e>
 8001d28:	4661      	mov	r1, ip
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	003c      	movs	r4, r7
 8001d2e:	1a52      	subs	r2, r2, r1
 8001d30:	4094      	lsls	r4, r2
 8001d32:	0001      	movs	r1, r0
 8001d34:	4090      	lsls	r0, r2
 8001d36:	46a0      	mov	r8, r4
 8001d38:	4664      	mov	r4, ip
 8001d3a:	1e42      	subs	r2, r0, #1
 8001d3c:	4190      	sbcs	r0, r2
 8001d3e:	4662      	mov	r2, ip
 8001d40:	40e1      	lsrs	r1, r4
 8001d42:	4644      	mov	r4, r8
 8001d44:	40d7      	lsrs	r7, r2
 8001d46:	430c      	orrs	r4, r1
 8001d48:	4304      	orrs	r4, r0
 8001d4a:	44b9      	add	r9, r7
 8001d4c:	e701      	b.n	8001b52 <__aeabi_dsub+0x342>
 8001d4e:	496b      	ldr	r1, [pc, #428]	; (8001efc <__aeabi_dsub+0x6ec>)
 8001d50:	428a      	cmp	r2, r1
 8001d52:	d100      	bne.n	8001d56 <__aeabi_dsub+0x546>
 8001d54:	e70c      	b.n	8001b70 <__aeabi_dsub+0x360>
 8001d56:	1818      	adds	r0, r3, r0
 8001d58:	4298      	cmp	r0, r3
 8001d5a:	419b      	sbcs	r3, r3
 8001d5c:	444f      	add	r7, r9
 8001d5e:	425b      	negs	r3, r3
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	07dc      	lsls	r4, r3, #31
 8001d64:	0840      	lsrs	r0, r0, #1
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	469a      	mov	sl, r3
 8001d6a:	0016      	movs	r6, r2
 8001d6c:	4304      	orrs	r4, r0
 8001d6e:	e6d9      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001d70:	2a00      	cmp	r2, #0
 8001d72:	d000      	beq.n	8001d76 <__aeabi_dsub+0x566>
 8001d74:	e081      	b.n	8001e7a <__aeabi_dsub+0x66a>
 8001d76:	003b      	movs	r3, r7
 8001d78:	4303      	orrs	r3, r0
 8001d7a:	d11d      	bne.n	8001db8 <__aeabi_dsub+0x5a8>
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	2500      	movs	r5, #0
 8001d80:	0312      	lsls	r2, r2, #12
 8001d82:	e70b      	b.n	8001b9c <__aeabi_dsub+0x38c>
 8001d84:	08c0      	lsrs	r0, r0, #3
 8001d86:	077b      	lsls	r3, r7, #29
 8001d88:	465d      	mov	r5, fp
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	08fa      	lsrs	r2, r7, #3
 8001d8e:	e6d3      	b.n	8001b38 <__aeabi_dsub+0x328>
 8001d90:	1ac4      	subs	r4, r0, r3
 8001d92:	42a0      	cmp	r0, r4
 8001d94:	4180      	sbcs	r0, r0
 8001d96:	464b      	mov	r3, r9
 8001d98:	4240      	negs	r0, r0
 8001d9a:	1aff      	subs	r7, r7, r3
 8001d9c:	1a3b      	subs	r3, r7, r0
 8001d9e:	469a      	mov	sl, r3
 8001da0:	465d      	mov	r5, fp
 8001da2:	e597      	b.n	80018d4 <__aeabi_dsub+0xc4>
 8001da4:	1a1c      	subs	r4, r3, r0
 8001da6:	464a      	mov	r2, r9
 8001da8:	42a3      	cmp	r3, r4
 8001daa:	419b      	sbcs	r3, r3
 8001dac:	1bd7      	subs	r7, r2, r7
 8001dae:	425b      	negs	r3, r3
 8001db0:	1afb      	subs	r3, r7, r3
 8001db2:	469a      	mov	sl, r3
 8001db4:	2601      	movs	r6, #1
 8001db6:	e585      	b.n	80018c4 <__aeabi_dsub+0xb4>
 8001db8:	08c0      	lsrs	r0, r0, #3
 8001dba:	077b      	lsls	r3, r7, #29
 8001dbc:	465d      	mov	r5, fp
 8001dbe:	4303      	orrs	r3, r0
 8001dc0:	08fa      	lsrs	r2, r7, #3
 8001dc2:	e6e7      	b.n	8001b94 <__aeabi_dsub+0x384>
 8001dc4:	464a      	mov	r2, r9
 8001dc6:	08db      	lsrs	r3, r3, #3
 8001dc8:	0752      	lsls	r2, r2, #29
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	464a      	mov	r2, r9
 8001dce:	08d2      	lsrs	r2, r2, #3
 8001dd0:	e6b5      	b.n	8001b3e <__aeabi_dsub+0x32e>
 8001dd2:	08c0      	lsrs	r0, r0, #3
 8001dd4:	077b      	lsls	r3, r7, #29
 8001dd6:	4303      	orrs	r3, r0
 8001dd8:	08fa      	lsrs	r2, r7, #3
 8001dda:	e6db      	b.n	8001b94 <__aeabi_dsub+0x384>
 8001ddc:	4649      	mov	r1, r9
 8001dde:	4319      	orrs	r1, r3
 8001de0:	000b      	movs	r3, r1
 8001de2:	1e59      	subs	r1, r3, #1
 8001de4:	418b      	sbcs	r3, r1
 8001de6:	001c      	movs	r4, r3
 8001de8:	e653      	b.n	8001a92 <__aeabi_dsub+0x282>
 8001dea:	464d      	mov	r5, r9
 8001dec:	3c20      	subs	r4, #32
 8001dee:	40e5      	lsrs	r5, r4
 8001df0:	2920      	cmp	r1, #32
 8001df2:	d005      	beq.n	8001e00 <__aeabi_dsub+0x5f0>
 8001df4:	2440      	movs	r4, #64	; 0x40
 8001df6:	1a64      	subs	r4, r4, r1
 8001df8:	4649      	mov	r1, r9
 8001dfa:	40a1      	lsls	r1, r4
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	4698      	mov	r8, r3
 8001e00:	4643      	mov	r3, r8
 8001e02:	1e5c      	subs	r4, r3, #1
 8001e04:	41a3      	sbcs	r3, r4
 8001e06:	432b      	orrs	r3, r5
 8001e08:	e776      	b.n	8001cf8 <__aeabi_dsub+0x4e8>
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d0e1      	beq.n	8001dd2 <__aeabi_dsub+0x5c2>
 8001e0e:	003a      	movs	r2, r7
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	4302      	orrs	r2, r0
 8001e14:	d100      	bne.n	8001e18 <__aeabi_dsub+0x608>
 8001e16:	e6b8      	b.n	8001b8a <__aeabi_dsub+0x37a>
 8001e18:	464a      	mov	r2, r9
 8001e1a:	0752      	lsls	r2, r2, #29
 8001e1c:	2480      	movs	r4, #128	; 0x80
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	464a      	mov	r2, r9
 8001e22:	0324      	lsls	r4, r4, #12
 8001e24:	08d2      	lsrs	r2, r2, #3
 8001e26:	4222      	tst	r2, r4
 8001e28:	d007      	beq.n	8001e3a <__aeabi_dsub+0x62a>
 8001e2a:	08fe      	lsrs	r6, r7, #3
 8001e2c:	4226      	tst	r6, r4
 8001e2e:	d104      	bne.n	8001e3a <__aeabi_dsub+0x62a>
 8001e30:	465d      	mov	r5, fp
 8001e32:	0032      	movs	r2, r6
 8001e34:	08c3      	lsrs	r3, r0, #3
 8001e36:	077f      	lsls	r7, r7, #29
 8001e38:	433b      	orrs	r3, r7
 8001e3a:	0f59      	lsrs	r1, r3, #29
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	0749      	lsls	r1, r1, #29
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	430b      	orrs	r3, r1
 8001e44:	e6a6      	b.n	8001b94 <__aeabi_dsub+0x384>
 8001e46:	1ac4      	subs	r4, r0, r3
 8001e48:	42a0      	cmp	r0, r4
 8001e4a:	4180      	sbcs	r0, r0
 8001e4c:	464b      	mov	r3, r9
 8001e4e:	4240      	negs	r0, r0
 8001e50:	1aff      	subs	r7, r7, r3
 8001e52:	1a3b      	subs	r3, r7, r0
 8001e54:	469a      	mov	sl, r3
 8001e56:	465d      	mov	r5, fp
 8001e58:	2601      	movs	r6, #1
 8001e5a:	e533      	b.n	80018c4 <__aeabi_dsub+0xb4>
 8001e5c:	003b      	movs	r3, r7
 8001e5e:	4303      	orrs	r3, r0
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x654>
 8001e62:	e715      	b.n	8001c90 <__aeabi_dsub+0x480>
 8001e64:	08c0      	lsrs	r0, r0, #3
 8001e66:	077b      	lsls	r3, r7, #29
 8001e68:	465d      	mov	r5, fp
 8001e6a:	4303      	orrs	r3, r0
 8001e6c:	08fa      	lsrs	r2, r7, #3
 8001e6e:	e666      	b.n	8001b3e <__aeabi_dsub+0x32e>
 8001e70:	08c0      	lsrs	r0, r0, #3
 8001e72:	077b      	lsls	r3, r7, #29
 8001e74:	4303      	orrs	r3, r0
 8001e76:	08fa      	lsrs	r2, r7, #3
 8001e78:	e65e      	b.n	8001b38 <__aeabi_dsub+0x328>
 8001e7a:	003a      	movs	r2, r7
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	4302      	orrs	r2, r0
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x674>
 8001e82:	e682      	b.n	8001b8a <__aeabi_dsub+0x37a>
 8001e84:	464a      	mov	r2, r9
 8001e86:	0752      	lsls	r2, r2, #29
 8001e88:	2480      	movs	r4, #128	; 0x80
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	0324      	lsls	r4, r4, #12
 8001e90:	08d2      	lsrs	r2, r2, #3
 8001e92:	4222      	tst	r2, r4
 8001e94:	d007      	beq.n	8001ea6 <__aeabi_dsub+0x696>
 8001e96:	08fe      	lsrs	r6, r7, #3
 8001e98:	4226      	tst	r6, r4
 8001e9a:	d104      	bne.n	8001ea6 <__aeabi_dsub+0x696>
 8001e9c:	465d      	mov	r5, fp
 8001e9e:	0032      	movs	r2, r6
 8001ea0:	08c3      	lsrs	r3, r0, #3
 8001ea2:	077f      	lsls	r7, r7, #29
 8001ea4:	433b      	orrs	r3, r7
 8001ea6:	0f59      	lsrs	r1, r3, #29
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	08db      	lsrs	r3, r3, #3
 8001eac:	0749      	lsls	r1, r1, #29
 8001eae:	430b      	orrs	r3, r1
 8001eb0:	e670      	b.n	8001b94 <__aeabi_dsub+0x384>
 8001eb2:	08c0      	lsrs	r0, r0, #3
 8001eb4:	077b      	lsls	r3, r7, #29
 8001eb6:	4303      	orrs	r3, r0
 8001eb8:	08fa      	lsrs	r2, r7, #3
 8001eba:	e640      	b.n	8001b3e <__aeabi_dsub+0x32e>
 8001ebc:	464c      	mov	r4, r9
 8001ebe:	3920      	subs	r1, #32
 8001ec0:	40cc      	lsrs	r4, r1
 8001ec2:	4661      	mov	r1, ip
 8001ec4:	2920      	cmp	r1, #32
 8001ec6:	d006      	beq.n	8001ed6 <__aeabi_dsub+0x6c6>
 8001ec8:	4666      	mov	r6, ip
 8001eca:	2140      	movs	r1, #64	; 0x40
 8001ecc:	1b89      	subs	r1, r1, r6
 8001ece:	464e      	mov	r6, r9
 8001ed0:	408e      	lsls	r6, r1
 8001ed2:	4333      	orrs	r3, r6
 8001ed4:	4698      	mov	r8, r3
 8001ed6:	4643      	mov	r3, r8
 8001ed8:	1e59      	subs	r1, r3, #1
 8001eda:	418b      	sbcs	r3, r1
 8001edc:	431c      	orrs	r4, r3
 8001ede:	e5d8      	b.n	8001a92 <__aeabi_dsub+0x282>
 8001ee0:	181c      	adds	r4, r3, r0
 8001ee2:	4284      	cmp	r4, r0
 8001ee4:	4180      	sbcs	r0, r0
 8001ee6:	444f      	add	r7, r9
 8001ee8:	46ba      	mov	sl, r7
 8001eea:	4240      	negs	r0, r0
 8001eec:	4482      	add	sl, r0
 8001eee:	e6d9      	b.n	8001ca4 <__aeabi_dsub+0x494>
 8001ef0:	4653      	mov	r3, sl
 8001ef2:	4323      	orrs	r3, r4
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dsub+0x6e8>
 8001ef6:	e6cb      	b.n	8001c90 <__aeabi_dsub+0x480>
 8001ef8:	e614      	b.n	8001b24 <__aeabi_dsub+0x314>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	ff7fffff 	.word	0xff7fffff
 8001f04:	000007fe 	.word	0x000007fe
 8001f08:	2300      	movs	r3, #0
 8001f0a:	4a01      	ldr	r2, [pc, #4]	; (8001f10 <__aeabi_dsub+0x700>)
 8001f0c:	001c      	movs	r4, r3
 8001f0e:	e529      	b.n	8001964 <__aeabi_dsub+0x154>
 8001f10:	000007ff 	.word	0x000007ff

08001f14 <__aeabi_d2iz>:
 8001f14:	000a      	movs	r2, r1
 8001f16:	b530      	push	{r4, r5, lr}
 8001f18:	4c13      	ldr	r4, [pc, #76]	; (8001f68 <__aeabi_d2iz+0x54>)
 8001f1a:	0053      	lsls	r3, r2, #1
 8001f1c:	0309      	lsls	r1, r1, #12
 8001f1e:	0005      	movs	r5, r0
 8001f20:	0b09      	lsrs	r1, r1, #12
 8001f22:	2000      	movs	r0, #0
 8001f24:	0d5b      	lsrs	r3, r3, #21
 8001f26:	0fd2      	lsrs	r2, r2, #31
 8001f28:	42a3      	cmp	r3, r4
 8001f2a:	dd04      	ble.n	8001f36 <__aeabi_d2iz+0x22>
 8001f2c:	480f      	ldr	r0, [pc, #60]	; (8001f6c <__aeabi_d2iz+0x58>)
 8001f2e:	4283      	cmp	r3, r0
 8001f30:	dd02      	ble.n	8001f38 <__aeabi_d2iz+0x24>
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <__aeabi_d2iz+0x5c>)
 8001f34:	18d0      	adds	r0, r2, r3
 8001f36:	bd30      	pop	{r4, r5, pc}
 8001f38:	2080      	movs	r0, #128	; 0x80
 8001f3a:	0340      	lsls	r0, r0, #13
 8001f3c:	4301      	orrs	r1, r0
 8001f3e:	480d      	ldr	r0, [pc, #52]	; (8001f74 <__aeabi_d2iz+0x60>)
 8001f40:	1ac0      	subs	r0, r0, r3
 8001f42:	281f      	cmp	r0, #31
 8001f44:	dd08      	ble.n	8001f58 <__aeabi_d2iz+0x44>
 8001f46:	480c      	ldr	r0, [pc, #48]	; (8001f78 <__aeabi_d2iz+0x64>)
 8001f48:	1ac3      	subs	r3, r0, r3
 8001f4a:	40d9      	lsrs	r1, r3
 8001f4c:	000b      	movs	r3, r1
 8001f4e:	4258      	negs	r0, r3
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d1f0      	bne.n	8001f36 <__aeabi_d2iz+0x22>
 8001f54:	0018      	movs	r0, r3
 8001f56:	e7ee      	b.n	8001f36 <__aeabi_d2iz+0x22>
 8001f58:	4c08      	ldr	r4, [pc, #32]	; (8001f7c <__aeabi_d2iz+0x68>)
 8001f5a:	40c5      	lsrs	r5, r0
 8001f5c:	46a4      	mov	ip, r4
 8001f5e:	4463      	add	r3, ip
 8001f60:	4099      	lsls	r1, r3
 8001f62:	000b      	movs	r3, r1
 8001f64:	432b      	orrs	r3, r5
 8001f66:	e7f2      	b.n	8001f4e <__aeabi_d2iz+0x3a>
 8001f68:	000003fe 	.word	0x000003fe
 8001f6c:	0000041d 	.word	0x0000041d
 8001f70:	7fffffff 	.word	0x7fffffff
 8001f74:	00000433 	.word	0x00000433
 8001f78:	00000413 	.word	0x00000413
 8001f7c:	fffffbed 	.word	0xfffffbed

08001f80 <__aeabi_i2d>:
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d016      	beq.n	8001fb4 <__aeabi_i2d+0x34>
 8001f86:	17c3      	asrs	r3, r0, #31
 8001f88:	18c5      	adds	r5, r0, r3
 8001f8a:	405d      	eors	r5, r3
 8001f8c:	0fc4      	lsrs	r4, r0, #31
 8001f8e:	0028      	movs	r0, r5
 8001f90:	f000 f88a 	bl	80020a8 <__clzsi2>
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <__aeabi_i2d+0x5c>)
 8001f96:	1a1b      	subs	r3, r3, r0
 8001f98:	280a      	cmp	r0, #10
 8001f9a:	dc16      	bgt.n	8001fca <__aeabi_i2d+0x4a>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	002e      	movs	r6, r5
 8001fa0:	3215      	adds	r2, #21
 8001fa2:	4096      	lsls	r6, r2
 8001fa4:	220b      	movs	r2, #11
 8001fa6:	1a12      	subs	r2, r2, r0
 8001fa8:	40d5      	lsrs	r5, r2
 8001faa:	055b      	lsls	r3, r3, #21
 8001fac:	032d      	lsls	r5, r5, #12
 8001fae:	0b2d      	lsrs	r5, r5, #12
 8001fb0:	0d5b      	lsrs	r3, r3, #21
 8001fb2:	e003      	b.n	8001fbc <__aeabi_i2d+0x3c>
 8001fb4:	2400      	movs	r4, #0
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2500      	movs	r5, #0
 8001fba:	2600      	movs	r6, #0
 8001fbc:	051b      	lsls	r3, r3, #20
 8001fbe:	432b      	orrs	r3, r5
 8001fc0:	07e4      	lsls	r4, r4, #31
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	0030      	movs	r0, r6
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
 8001fca:	380b      	subs	r0, #11
 8001fcc:	4085      	lsls	r5, r0
 8001fce:	055b      	lsls	r3, r3, #21
 8001fd0:	032d      	lsls	r5, r5, #12
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	0b2d      	lsrs	r5, r5, #12
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	e7f0      	b.n	8001fbc <__aeabi_i2d+0x3c>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	0000041e 	.word	0x0000041e

08001fe0 <__aeabi_ui2d>:
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	1e04      	subs	r4, r0, #0
 8001fe4:	d010      	beq.n	8002008 <__aeabi_ui2d+0x28>
 8001fe6:	f000 f85f 	bl	80020a8 <__clzsi2>
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <__aeabi_ui2d+0x48>)
 8001fec:	1a1b      	subs	r3, r3, r0
 8001fee:	280a      	cmp	r0, #10
 8001ff0:	dc11      	bgt.n	8002016 <__aeabi_ui2d+0x36>
 8001ff2:	220b      	movs	r2, #11
 8001ff4:	0021      	movs	r1, r4
 8001ff6:	1a12      	subs	r2, r2, r0
 8001ff8:	40d1      	lsrs	r1, r2
 8001ffa:	3015      	adds	r0, #21
 8001ffc:	030a      	lsls	r2, r1, #12
 8001ffe:	055b      	lsls	r3, r3, #21
 8002000:	4084      	lsls	r4, r0
 8002002:	0b12      	lsrs	r2, r2, #12
 8002004:	0d5b      	lsrs	r3, r3, #21
 8002006:	e001      	b.n	800200c <__aeabi_ui2d+0x2c>
 8002008:	2300      	movs	r3, #0
 800200a:	2200      	movs	r2, #0
 800200c:	051b      	lsls	r3, r3, #20
 800200e:	4313      	orrs	r3, r2
 8002010:	0020      	movs	r0, r4
 8002012:	0019      	movs	r1, r3
 8002014:	bd10      	pop	{r4, pc}
 8002016:	0022      	movs	r2, r4
 8002018:	380b      	subs	r0, #11
 800201a:	4082      	lsls	r2, r0
 800201c:	055b      	lsls	r3, r3, #21
 800201e:	0312      	lsls	r2, r2, #12
 8002020:	2400      	movs	r4, #0
 8002022:	0b12      	lsrs	r2, r2, #12
 8002024:	0d5b      	lsrs	r3, r3, #21
 8002026:	e7f1      	b.n	800200c <__aeabi_ui2d+0x2c>
 8002028:	0000041e 	.word	0x0000041e

0800202c <__aeabi_cdrcmple>:
 800202c:	4684      	mov	ip, r0
 800202e:	0010      	movs	r0, r2
 8002030:	4662      	mov	r2, ip
 8002032:	468c      	mov	ip, r1
 8002034:	0019      	movs	r1, r3
 8002036:	4663      	mov	r3, ip
 8002038:	e000      	b.n	800203c <__aeabi_cdcmpeq>
 800203a:	46c0      	nop			; (mov r8, r8)

0800203c <__aeabi_cdcmpeq>:
 800203c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800203e:	f000 f905 	bl	800224c <__ledf2>
 8002042:	2800      	cmp	r0, #0
 8002044:	d401      	bmi.n	800204a <__aeabi_cdcmpeq+0xe>
 8002046:	2100      	movs	r1, #0
 8002048:	42c8      	cmn	r0, r1
 800204a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800204c <__aeabi_dcmpeq>:
 800204c:	b510      	push	{r4, lr}
 800204e:	f000 f855 	bl	80020fc <__eqdf2>
 8002052:	4240      	negs	r0, r0
 8002054:	3001      	adds	r0, #1
 8002056:	bd10      	pop	{r4, pc}

08002058 <__aeabi_dcmplt>:
 8002058:	b510      	push	{r4, lr}
 800205a:	f000 f8f7 	bl	800224c <__ledf2>
 800205e:	2800      	cmp	r0, #0
 8002060:	db01      	blt.n	8002066 <__aeabi_dcmplt+0xe>
 8002062:	2000      	movs	r0, #0
 8002064:	bd10      	pop	{r4, pc}
 8002066:	2001      	movs	r0, #1
 8002068:	bd10      	pop	{r4, pc}
 800206a:	46c0      	nop			; (mov r8, r8)

0800206c <__aeabi_dcmple>:
 800206c:	b510      	push	{r4, lr}
 800206e:	f000 f8ed 	bl	800224c <__ledf2>
 8002072:	2800      	cmp	r0, #0
 8002074:	dd01      	ble.n	800207a <__aeabi_dcmple+0xe>
 8002076:	2000      	movs	r0, #0
 8002078:	bd10      	pop	{r4, pc}
 800207a:	2001      	movs	r0, #1
 800207c:	bd10      	pop	{r4, pc}
 800207e:	46c0      	nop			; (mov r8, r8)

08002080 <__aeabi_dcmpgt>:
 8002080:	b510      	push	{r4, lr}
 8002082:	f000 f87d 	bl	8002180 <__gedf2>
 8002086:	2800      	cmp	r0, #0
 8002088:	dc01      	bgt.n	800208e <__aeabi_dcmpgt+0xe>
 800208a:	2000      	movs	r0, #0
 800208c:	bd10      	pop	{r4, pc}
 800208e:	2001      	movs	r0, #1
 8002090:	bd10      	pop	{r4, pc}
 8002092:	46c0      	nop			; (mov r8, r8)

08002094 <__aeabi_dcmpge>:
 8002094:	b510      	push	{r4, lr}
 8002096:	f000 f873 	bl	8002180 <__gedf2>
 800209a:	2800      	cmp	r0, #0
 800209c:	da01      	bge.n	80020a2 <__aeabi_dcmpge+0xe>
 800209e:	2000      	movs	r0, #0
 80020a0:	bd10      	pop	{r4, pc}
 80020a2:	2001      	movs	r0, #1
 80020a4:	bd10      	pop	{r4, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)

080020a8 <__clzsi2>:
 80020a8:	211c      	movs	r1, #28
 80020aa:	2301      	movs	r3, #1
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	4298      	cmp	r0, r3
 80020b0:	d301      	bcc.n	80020b6 <__clzsi2+0xe>
 80020b2:	0c00      	lsrs	r0, r0, #16
 80020b4:	3910      	subs	r1, #16
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	4298      	cmp	r0, r3
 80020ba:	d301      	bcc.n	80020c0 <__clzsi2+0x18>
 80020bc:	0a00      	lsrs	r0, r0, #8
 80020be:	3908      	subs	r1, #8
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	4298      	cmp	r0, r3
 80020c4:	d301      	bcc.n	80020ca <__clzsi2+0x22>
 80020c6:	0900      	lsrs	r0, r0, #4
 80020c8:	3904      	subs	r1, #4
 80020ca:	a202      	add	r2, pc, #8	; (adr r2, 80020d4 <__clzsi2+0x2c>)
 80020cc:	5c10      	ldrb	r0, [r2, r0]
 80020ce:	1840      	adds	r0, r0, r1
 80020d0:	4770      	bx	lr
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	02020304 	.word	0x02020304
 80020d8:	01010101 	.word	0x01010101
	...

080020e4 <__clzdi2>:
 80020e4:	b510      	push	{r4, lr}
 80020e6:	2900      	cmp	r1, #0
 80020e8:	d103      	bne.n	80020f2 <__clzdi2+0xe>
 80020ea:	f7ff ffdd 	bl	80020a8 <__clzsi2>
 80020ee:	3020      	adds	r0, #32
 80020f0:	e002      	b.n	80020f8 <__clzdi2+0x14>
 80020f2:	0008      	movs	r0, r1
 80020f4:	f7ff ffd8 	bl	80020a8 <__clzsi2>
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)

080020fc <__eqdf2>:
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	464e      	mov	r6, r9
 8002100:	4645      	mov	r5, r8
 8002102:	46de      	mov	lr, fp
 8002104:	4657      	mov	r7, sl
 8002106:	4690      	mov	r8, r2
 8002108:	b5e0      	push	{r5, r6, r7, lr}
 800210a:	0017      	movs	r7, r2
 800210c:	031a      	lsls	r2, r3, #12
 800210e:	0b12      	lsrs	r2, r2, #12
 8002110:	0005      	movs	r5, r0
 8002112:	4684      	mov	ip, r0
 8002114:	4819      	ldr	r0, [pc, #100]	; (800217c <__eqdf2+0x80>)
 8002116:	030e      	lsls	r6, r1, #12
 8002118:	004c      	lsls	r4, r1, #1
 800211a:	4691      	mov	r9, r2
 800211c:	005a      	lsls	r2, r3, #1
 800211e:	0fdb      	lsrs	r3, r3, #31
 8002120:	469b      	mov	fp, r3
 8002122:	0b36      	lsrs	r6, r6, #12
 8002124:	0d64      	lsrs	r4, r4, #21
 8002126:	0fc9      	lsrs	r1, r1, #31
 8002128:	0d52      	lsrs	r2, r2, #21
 800212a:	4284      	cmp	r4, r0
 800212c:	d019      	beq.n	8002162 <__eqdf2+0x66>
 800212e:	4282      	cmp	r2, r0
 8002130:	d010      	beq.n	8002154 <__eqdf2+0x58>
 8002132:	2001      	movs	r0, #1
 8002134:	4294      	cmp	r4, r2
 8002136:	d10e      	bne.n	8002156 <__eqdf2+0x5a>
 8002138:	454e      	cmp	r6, r9
 800213a:	d10c      	bne.n	8002156 <__eqdf2+0x5a>
 800213c:	2001      	movs	r0, #1
 800213e:	45c4      	cmp	ip, r8
 8002140:	d109      	bne.n	8002156 <__eqdf2+0x5a>
 8002142:	4559      	cmp	r1, fp
 8002144:	d017      	beq.n	8002176 <__eqdf2+0x7a>
 8002146:	2c00      	cmp	r4, #0
 8002148:	d105      	bne.n	8002156 <__eqdf2+0x5a>
 800214a:	0030      	movs	r0, r6
 800214c:	4328      	orrs	r0, r5
 800214e:	1e43      	subs	r3, r0, #1
 8002150:	4198      	sbcs	r0, r3
 8002152:	e000      	b.n	8002156 <__eqdf2+0x5a>
 8002154:	2001      	movs	r0, #1
 8002156:	bcf0      	pop	{r4, r5, r6, r7}
 8002158:	46bb      	mov	fp, r7
 800215a:	46b2      	mov	sl, r6
 800215c:	46a9      	mov	r9, r5
 800215e:	46a0      	mov	r8, r4
 8002160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002162:	0033      	movs	r3, r6
 8002164:	2001      	movs	r0, #1
 8002166:	432b      	orrs	r3, r5
 8002168:	d1f5      	bne.n	8002156 <__eqdf2+0x5a>
 800216a:	42a2      	cmp	r2, r4
 800216c:	d1f3      	bne.n	8002156 <__eqdf2+0x5a>
 800216e:	464b      	mov	r3, r9
 8002170:	433b      	orrs	r3, r7
 8002172:	d1f0      	bne.n	8002156 <__eqdf2+0x5a>
 8002174:	e7e2      	b.n	800213c <__eqdf2+0x40>
 8002176:	2000      	movs	r0, #0
 8002178:	e7ed      	b.n	8002156 <__eqdf2+0x5a>
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	000007ff 	.word	0x000007ff

08002180 <__gedf2>:
 8002180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002182:	4647      	mov	r7, r8
 8002184:	46ce      	mov	lr, r9
 8002186:	0004      	movs	r4, r0
 8002188:	0018      	movs	r0, r3
 800218a:	0016      	movs	r6, r2
 800218c:	031b      	lsls	r3, r3, #12
 800218e:	0b1b      	lsrs	r3, r3, #12
 8002190:	4d2d      	ldr	r5, [pc, #180]	; (8002248 <__gedf2+0xc8>)
 8002192:	004a      	lsls	r2, r1, #1
 8002194:	4699      	mov	r9, r3
 8002196:	b580      	push	{r7, lr}
 8002198:	0043      	lsls	r3, r0, #1
 800219a:	030f      	lsls	r7, r1, #12
 800219c:	46a4      	mov	ip, r4
 800219e:	46b0      	mov	r8, r6
 80021a0:	0b3f      	lsrs	r7, r7, #12
 80021a2:	0d52      	lsrs	r2, r2, #21
 80021a4:	0fc9      	lsrs	r1, r1, #31
 80021a6:	0d5b      	lsrs	r3, r3, #21
 80021a8:	0fc0      	lsrs	r0, r0, #31
 80021aa:	42aa      	cmp	r2, r5
 80021ac:	d021      	beq.n	80021f2 <__gedf2+0x72>
 80021ae:	42ab      	cmp	r3, r5
 80021b0:	d013      	beq.n	80021da <__gedf2+0x5a>
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d122      	bne.n	80021fc <__gedf2+0x7c>
 80021b6:	433c      	orrs	r4, r7
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <__gedf2+0x42>
 80021bc:	464d      	mov	r5, r9
 80021be:	432e      	orrs	r6, r5
 80021c0:	d022      	beq.n	8002208 <__gedf2+0x88>
 80021c2:	2c00      	cmp	r4, #0
 80021c4:	d010      	beq.n	80021e8 <__gedf2+0x68>
 80021c6:	4281      	cmp	r1, r0
 80021c8:	d022      	beq.n	8002210 <__gedf2+0x90>
 80021ca:	2002      	movs	r0, #2
 80021cc:	3901      	subs	r1, #1
 80021ce:	4008      	ands	r0, r1
 80021d0:	3801      	subs	r0, #1
 80021d2:	bcc0      	pop	{r6, r7}
 80021d4:	46b9      	mov	r9, r7
 80021d6:	46b0      	mov	r8, r6
 80021d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021da:	464d      	mov	r5, r9
 80021dc:	432e      	orrs	r6, r5
 80021de:	d129      	bne.n	8002234 <__gedf2+0xb4>
 80021e0:	2a00      	cmp	r2, #0
 80021e2:	d1f0      	bne.n	80021c6 <__gedf2+0x46>
 80021e4:	433c      	orrs	r4, r7
 80021e6:	d1ee      	bne.n	80021c6 <__gedf2+0x46>
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d1f2      	bne.n	80021d2 <__gedf2+0x52>
 80021ec:	2001      	movs	r0, #1
 80021ee:	4240      	negs	r0, r0
 80021f0:	e7ef      	b.n	80021d2 <__gedf2+0x52>
 80021f2:	003d      	movs	r5, r7
 80021f4:	4325      	orrs	r5, r4
 80021f6:	d11d      	bne.n	8002234 <__gedf2+0xb4>
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d0ee      	beq.n	80021da <__gedf2+0x5a>
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e2      	bne.n	80021c6 <__gedf2+0x46>
 8002200:	464c      	mov	r4, r9
 8002202:	4326      	orrs	r6, r4
 8002204:	d1df      	bne.n	80021c6 <__gedf2+0x46>
 8002206:	e7e0      	b.n	80021ca <__gedf2+0x4a>
 8002208:	2000      	movs	r0, #0
 800220a:	2c00      	cmp	r4, #0
 800220c:	d0e1      	beq.n	80021d2 <__gedf2+0x52>
 800220e:	e7dc      	b.n	80021ca <__gedf2+0x4a>
 8002210:	429a      	cmp	r2, r3
 8002212:	dc0a      	bgt.n	800222a <__gedf2+0xaa>
 8002214:	dbe8      	blt.n	80021e8 <__gedf2+0x68>
 8002216:	454f      	cmp	r7, r9
 8002218:	d8d7      	bhi.n	80021ca <__gedf2+0x4a>
 800221a:	d00e      	beq.n	800223a <__gedf2+0xba>
 800221c:	2000      	movs	r0, #0
 800221e:	454f      	cmp	r7, r9
 8002220:	d2d7      	bcs.n	80021d2 <__gedf2+0x52>
 8002222:	2900      	cmp	r1, #0
 8002224:	d0e2      	beq.n	80021ec <__gedf2+0x6c>
 8002226:	0008      	movs	r0, r1
 8002228:	e7d3      	b.n	80021d2 <__gedf2+0x52>
 800222a:	4243      	negs	r3, r0
 800222c:	4158      	adcs	r0, r3
 800222e:	0040      	lsls	r0, r0, #1
 8002230:	3801      	subs	r0, #1
 8002232:	e7ce      	b.n	80021d2 <__gedf2+0x52>
 8002234:	2002      	movs	r0, #2
 8002236:	4240      	negs	r0, r0
 8002238:	e7cb      	b.n	80021d2 <__gedf2+0x52>
 800223a:	45c4      	cmp	ip, r8
 800223c:	d8c5      	bhi.n	80021ca <__gedf2+0x4a>
 800223e:	2000      	movs	r0, #0
 8002240:	45c4      	cmp	ip, r8
 8002242:	d2c6      	bcs.n	80021d2 <__gedf2+0x52>
 8002244:	e7ed      	b.n	8002222 <__gedf2+0xa2>
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	000007ff 	.word	0x000007ff

0800224c <__ledf2>:
 800224c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224e:	4647      	mov	r7, r8
 8002250:	46ce      	mov	lr, r9
 8002252:	0004      	movs	r4, r0
 8002254:	0018      	movs	r0, r3
 8002256:	0016      	movs	r6, r2
 8002258:	031b      	lsls	r3, r3, #12
 800225a:	0b1b      	lsrs	r3, r3, #12
 800225c:	4d2c      	ldr	r5, [pc, #176]	; (8002310 <__ledf2+0xc4>)
 800225e:	004a      	lsls	r2, r1, #1
 8002260:	4699      	mov	r9, r3
 8002262:	b580      	push	{r7, lr}
 8002264:	0043      	lsls	r3, r0, #1
 8002266:	030f      	lsls	r7, r1, #12
 8002268:	46a4      	mov	ip, r4
 800226a:	46b0      	mov	r8, r6
 800226c:	0b3f      	lsrs	r7, r7, #12
 800226e:	0d52      	lsrs	r2, r2, #21
 8002270:	0fc9      	lsrs	r1, r1, #31
 8002272:	0d5b      	lsrs	r3, r3, #21
 8002274:	0fc0      	lsrs	r0, r0, #31
 8002276:	42aa      	cmp	r2, r5
 8002278:	d00d      	beq.n	8002296 <__ledf2+0x4a>
 800227a:	42ab      	cmp	r3, r5
 800227c:	d010      	beq.n	80022a0 <__ledf2+0x54>
 800227e:	2a00      	cmp	r2, #0
 8002280:	d127      	bne.n	80022d2 <__ledf2+0x86>
 8002282:	433c      	orrs	r4, r7
 8002284:	2b00      	cmp	r3, #0
 8002286:	d111      	bne.n	80022ac <__ledf2+0x60>
 8002288:	464d      	mov	r5, r9
 800228a:	432e      	orrs	r6, r5
 800228c:	d10e      	bne.n	80022ac <__ledf2+0x60>
 800228e:	2000      	movs	r0, #0
 8002290:	2c00      	cmp	r4, #0
 8002292:	d015      	beq.n	80022c0 <__ledf2+0x74>
 8002294:	e00e      	b.n	80022b4 <__ledf2+0x68>
 8002296:	003d      	movs	r5, r7
 8002298:	4325      	orrs	r5, r4
 800229a:	d110      	bne.n	80022be <__ledf2+0x72>
 800229c:	4293      	cmp	r3, r2
 800229e:	d118      	bne.n	80022d2 <__ledf2+0x86>
 80022a0:	464d      	mov	r5, r9
 80022a2:	432e      	orrs	r6, r5
 80022a4:	d10b      	bne.n	80022be <__ledf2+0x72>
 80022a6:	2a00      	cmp	r2, #0
 80022a8:	d102      	bne.n	80022b0 <__ledf2+0x64>
 80022aa:	433c      	orrs	r4, r7
 80022ac:	2c00      	cmp	r4, #0
 80022ae:	d00b      	beq.n	80022c8 <__ledf2+0x7c>
 80022b0:	4281      	cmp	r1, r0
 80022b2:	d014      	beq.n	80022de <__ledf2+0x92>
 80022b4:	2002      	movs	r0, #2
 80022b6:	3901      	subs	r1, #1
 80022b8:	4008      	ands	r0, r1
 80022ba:	3801      	subs	r0, #1
 80022bc:	e000      	b.n	80022c0 <__ledf2+0x74>
 80022be:	2002      	movs	r0, #2
 80022c0:	bcc0      	pop	{r6, r7}
 80022c2:	46b9      	mov	r9, r7
 80022c4:	46b0      	mov	r8, r6
 80022c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d1f9      	bne.n	80022c0 <__ledf2+0x74>
 80022cc:	2001      	movs	r0, #1
 80022ce:	4240      	negs	r0, r0
 80022d0:	e7f6      	b.n	80022c0 <__ledf2+0x74>
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ec      	bne.n	80022b0 <__ledf2+0x64>
 80022d6:	464c      	mov	r4, r9
 80022d8:	4326      	orrs	r6, r4
 80022da:	d1e9      	bne.n	80022b0 <__ledf2+0x64>
 80022dc:	e7ea      	b.n	80022b4 <__ledf2+0x68>
 80022de:	429a      	cmp	r2, r3
 80022e0:	dd04      	ble.n	80022ec <__ledf2+0xa0>
 80022e2:	4243      	negs	r3, r0
 80022e4:	4158      	adcs	r0, r3
 80022e6:	0040      	lsls	r0, r0, #1
 80022e8:	3801      	subs	r0, #1
 80022ea:	e7e9      	b.n	80022c0 <__ledf2+0x74>
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbeb      	blt.n	80022c8 <__ledf2+0x7c>
 80022f0:	454f      	cmp	r7, r9
 80022f2:	d8df      	bhi.n	80022b4 <__ledf2+0x68>
 80022f4:	d006      	beq.n	8002304 <__ledf2+0xb8>
 80022f6:	2000      	movs	r0, #0
 80022f8:	454f      	cmp	r7, r9
 80022fa:	d2e1      	bcs.n	80022c0 <__ledf2+0x74>
 80022fc:	2900      	cmp	r1, #0
 80022fe:	d0e5      	beq.n	80022cc <__ledf2+0x80>
 8002300:	0008      	movs	r0, r1
 8002302:	e7dd      	b.n	80022c0 <__ledf2+0x74>
 8002304:	45c4      	cmp	ip, r8
 8002306:	d8d5      	bhi.n	80022b4 <__ledf2+0x68>
 8002308:	2000      	movs	r0, #0
 800230a:	45c4      	cmp	ip, r8
 800230c:	d2d8      	bcs.n	80022c0 <__ledf2+0x74>
 800230e:	e7f5      	b.n	80022fc <__ledf2+0xb0>
 8002310:	000007ff 	.word	0x000007ff

08002314 <_ZN11Convert_ADCC1EP10Sean_queue>:

// Flags -============================================
extern volatile bool ADC_FLAG;


Convert_ADC::Convert_ADC(Sean_queue *q_volt)
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
{
	this -> q_volt = q_volt;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	601a      	str	r2, [r3, #0]
	this -> voltage = 0;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	809a      	strh	r2, [r3, #4]
}
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}

08002334 <_ZN11Convert_ADC11get_ADC_VALEv>:


void Convert_ADC::get_ADC_VAL()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	// Only runs if told to
	if (ADC_FLAG)
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <_ZN11Convert_ADC11get_ADC_VALEv+0x78>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d02d      	beq.n	80023a2 <_ZN11Convert_ADC11get_ADC_VALEv+0x6e>
	{
		// Getting ADC value by polling -========================
		HAL_ADC_Start_IT(&hadc1);
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <_ZN11Convert_ADC11get_ADC_VALEv+0x7c>)
 8002348:	0018      	movs	r0, r3
 800234a:	f002 f951 	bl	80045f0 <HAL_ADC_Start_IT>
		HAL_ADC_ConvCpltCallback(&hadc1);
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <_ZN11Convert_ADC11get_ADC_VALEv+0x7c>)
 8002350:	0018      	movs	r0, r3
 8002352:	f002 f9d0 	bl	80046f6 <HAL_ADC_ConvCpltCallback>
		voltage = HAL_ADC_GetValue(&hadc1);
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <_ZN11Convert_ADC11get_ADC_VALEv+0x7c>)
 8002358:	0018      	movs	r0, r3
 800235a:	f002 f9c1 	bl	80046e0 <HAL_ADC_GetValue>
 800235e:	0003      	movs	r3, r0
 8002360:	b29a      	uxth	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	809a      	strh	r2, [r3, #4]
		//=======================================================

		// enqueues the raw voltage to a queue, resets storage value to 0 (just in case) and acknowledges flag
		uint8_t check = q_volt -> enqueue(voltage);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	889b      	ldrh	r3, [r3, #4]
 800236e:	b21b      	sxth	r3, r3
 8002370:	0019      	movs	r1, r3
 8002372:	0010      	movs	r0, r2
 8002374:	f000 feb8 	bl	80030e8 <_ZN10Sean_queue7enqueueEs>
 8002378:	0003      	movs	r3, r0
 800237a:	001a      	movs	r2, r3
 800237c:	210f      	movs	r1, #15
 800237e:	187b      	adds	r3, r7, r1
 8002380:	701a      	strb	r2, [r3, #0]
		assert(check);
 8002382:	187b      	adds	r3, r7, r1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d105      	bne.n	8002396 <_ZN11Convert_ADC11get_ADC_VALEv+0x62>
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <_ZN11Convert_ADC11get_ADC_VALEv+0x80>)
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <_ZN11Convert_ADC11get_ADC_VALEv+0x84>)
 800238e:	480b      	ldr	r0, [pc, #44]	; (80023bc <_ZN11Convert_ADC11get_ADC_VALEv+0x88>)
 8002390:	212f      	movs	r1, #47	; 0x2f
 8002392:	f005 f97f 	bl	8007694 <__assert_func>

		voltage = 0;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	809a      	strh	r2, [r3, #4]
		ADC_FLAG = 0;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <_ZN11Convert_ADC11get_ADC_VALEv+0x78>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]

	}

}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	2000028a 	.word	0x2000028a
 80023b0:	20000290 	.word	0x20000290
 80023b4:	0800864c 	.word	0x0800864c
 80023b8:	08008654 	.word	0x08008654
 80023bc:	08008674 	.word	0x08008674

080023c0 <_ZN9DataStoreC1Ev>:
extern Sean_queue q_volt;
extern Sean_queue q_raw;
extern volatile uint8_t DISPLAYFLAG;


DataStore::DataStore()
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
{
	trigger_level = 2048; 		// The trigger level ranges from 0 - 4095, same as the values for the ADC
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	801a      	strh	r2, [r3, #0]
	checkspot = 1; 				// This variable tracks the state of the state machine across runs.
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	709a      	strb	r2, [r3, #2]
	bucket = 0;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	809a      	strh	r2, [r3, #4]
	DATAREADY = 0;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	719a      	strb	r2, [r3, #6]
}
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_ZN9DataStore10updatedataEv>:


void DataStore::updatedata()
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	int16_t volt = 0;
 80023f4:	210c      	movs	r1, #12
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	2200      	movs	r2, #0
 80023fa:	801a      	strh	r2, [r3, #0]
	if (q_volt.dequeue(&volt))
 80023fc:	187a      	adds	r2, r7, r1
 80023fe:	4b43      	ldr	r3, [pc, #268]	; (800250c <_ZN9DataStore10updatedataEv+0x120>)
 8002400:	0011      	movs	r1, r2
 8002402:	0018      	movs	r0, r3
 8002404:	f000 feb4 	bl	8003170 <_ZN10Sean_queue7dequeueEPs>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d100      	bne.n	800240e <_ZN9DataStore10updatedataEv+0x22>
 800240c:	e07a      	b.n	8002504 <_ZN9DataStore10updatedataEv+0x118>
	{
		switch(checkspot)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	789b      	ldrb	r3, [r3, #2]
 8002412:	b25b      	sxtb	r3, r3
 8002414:	2b05      	cmp	r3, #5
 8002416:	d900      	bls.n	800241a <_ZN9DataStore10updatedataEv+0x2e>
 8002418:	e074      	b.n	8002504 <_ZN9DataStore10updatedataEv+0x118>
 800241a:	009a      	lsls	r2, r3, #2
 800241c:	4b3c      	ldr	r3, [pc, #240]	; (8002510 <_ZN9DataStore10updatedataEv+0x124>)
 800241e:	18d3      	adds	r3, r2, r3
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	469f      	mov	pc, r3
		{
			case 1:
			{
				if (volt < trigger_level)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	5e9a      	ldrsh	r2, [r3, r2]
 800242a:	230c      	movs	r3, #12
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	2100      	movs	r1, #0
 8002430:	5e5b      	ldrsh	r3, [r3, r1]
 8002432:	429a      	cmp	r2, r3
 8002434:	dd63      	ble.n	80024fe <_ZN9DataStore10updatedataEv+0x112>
				{
					checkspot=2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2202      	movs	r2, #2
 800243a:	709a      	strb	r2, [r3, #2]
				}
				break;
 800243c:	e05f      	b.n	80024fe <_ZN9DataStore10updatedataEv+0x112>
			}
			case 2:
			{
				if (volt < trigger_level)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	5e9a      	ldrsh	r2, [r3, r2]
 8002444:	230c      	movs	r3, #12
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2100      	movs	r1, #0
 800244a:	5e5b      	ldrsh	r3, [r3, r1]
 800244c:	429a      	cmp	r2, r3
 800244e:	dd03      	ble.n	8002458 <_ZN9DataStore10updatedataEv+0x6c>
				{
					checkspot=3;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2203      	movs	r2, #3
 8002454:	709a      	strb	r2, [r3, #2]
				}
				else
				{
					checkspot = 1;
				}
				break;
 8002456:	e055      	b.n	8002504 <_ZN9DataStore10updatedataEv+0x118>
					checkspot = 1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	709a      	strb	r2, [r3, #2]
				break;
 800245e:	e051      	b.n	8002504 <_ZN9DataStore10updatedataEv+0x118>
			}
			case 3:
			{
				if (volt > trigger_level)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	5e9a      	ldrsh	r2, [r3, r2]
 8002466:	230c      	movs	r3, #12
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2100      	movs	r1, #0
 800246c:	5e5b      	ldrsh	r3, [r3, r1]
 800246e:	429a      	cmp	r2, r3
 8002470:	da03      	bge.n	800247a <_ZN9DataStore10updatedataEv+0x8e>
				{
					checkspot=4;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2204      	movs	r2, #4
 8002476:	709a      	strb	r2, [r3, #2]
				}
				else
				{
					checkspot = 1;
				}
				break;
 8002478:	e044      	b.n	8002504 <_ZN9DataStore10updatedataEv+0x118>
					checkspot = 1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	709a      	strb	r2, [r3, #2]
				break;
 8002480:	e040      	b.n	8002504 <_ZN9DataStore10updatedataEv+0x118>
			}
			case 4:
			{
				if (volt > trigger_level)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	5e9a      	ldrsh	r2, [r3, r2]
 8002488:	230c      	movs	r3, #12
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2100      	movs	r1, #0
 800248e:	5e5b      	ldrsh	r3, [r3, r1]
 8002490:	429a      	cmp	r2, r3
 8002492:	da03      	bge.n	800249c <_ZN9DataStore10updatedataEv+0xb0>
				{
					checkspot=5;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2205      	movs	r2, #5
 8002498:	709a      	strb	r2, [r3, #2]
				}
				else
				{
					checkspot = 1;
				}
				break;
 800249a:	e033      	b.n	8002504 <_ZN9DataStore10updatedataEv+0x118>
					checkspot = 1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	709a      	strb	r2, [r3, #2]
				break;
 80024a2:	e02f      	b.n	8002504 <_ZN9DataStore10updatedataEv+0x118>
			}
			case 5:							// Once in the final state of the machine, the state will lock for a set number of runs
			{
				uint8_t check = q_raw.enqueue(volt);
 80024a4:	230c      	movs	r3, #12
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2200      	movs	r2, #0
 80024aa:	5e9a      	ldrsh	r2, [r3, r2]
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <_ZN9DataStore10updatedataEv+0x128>)
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 fe19 	bl	80030e8 <_ZN10Sean_queue7enqueueEs>
 80024b6:	0003      	movs	r3, r0
 80024b8:	001a      	movs	r2, r3
 80024ba:	210f      	movs	r1, #15
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	701a      	strb	r2, [r3, #0]
				assert(check);
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d105      	bne.n	80024d4 <_ZN9DataStore10updatedataEv+0xe8>
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <_ZN9DataStore10updatedataEv+0x12c>)
 80024ca:	4a14      	ldr	r2, [pc, #80]	; (800251c <_ZN9DataStore10updatedataEv+0x130>)
 80024cc:	4814      	ldr	r0, [pc, #80]	; (8002520 <_ZN9DataStore10updatedataEv+0x134>)
 80024ce:	2158      	movs	r1, #88	; 0x58
 80024d0:	f005 f8e0 	bl	8007694 <__assert_func>
				bucket++;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2204      	movs	r2, #4
 80024d8:	5e9b      	ldrsh	r3, [r3, r2]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b21a      	sxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	809a      	strh	r2, [r3, #4]

				if (bucket >= 102)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2204      	movs	r2, #4
 80024ea:	5e9b      	ldrsh	r3, [r3, r2]
 80024ec:	2b65      	cmp	r3, #101	; 0x65
 80024ee:	dd08      	ble.n	8002502 <_ZN9DataStore10updatedataEv+0x116>
				{
					bucket = 0;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	809a      	strh	r2, [r3, #4]
					checkspot = 1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	709a      	strb	r2, [r3, #2]
				}
				break;
 80024fc:	e001      	b.n	8002502 <_ZN9DataStore10updatedataEv+0x116>
				break;
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	e000      	b.n	8002504 <_ZN9DataStore10updatedataEv+0x118>
				break;
 8002502:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b004      	add	sp, #16
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000090 	.word	0x20000090
 8002510:	08008764 	.word	0x08008764
 8002514:	20000160 	.word	0x20000160
 8002518:	08008690 	.word	0x08008690
 800251c:	08008698 	.word	0x08008698
 8002520:	080086b8 	.word	0x080086b8

08002524 <_ZN9DataStore10setTriggerEs>:


void DataStore::setTrigger(int16_t newTrigger)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	000a      	movs	r2, r1
 800252e:	1cbb      	adds	r3, r7, #2
 8002530:	801a      	strh	r2, [r3, #0]
	trigger_level = newTrigger;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	1cba      	adds	r2, r7, #2
 8002536:	8812      	ldrh	r2, [r2, #0]
 8002538:	801a      	strh	r2, [r3, #0]
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b002      	add	sp, #8
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <_ZN7DisplayC1EP9Mal_queue>:
 */

#include "Display.h"
#include "main.h"

Display::Display(Mal_queue *q_buffer) : initCommands{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a06      	ldr	r2, [pc, #24]	; (800256c <_ZN7DisplayC1EP9Mal_queue+0x28>)
 8002552:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002554:	c313      	stmia	r3!, {r0, r1, r4}
 8002556:	8812      	ldrh	r2, [r2, #0]
 8002558:	801a      	strh	r2, [r3, #0]
    0x10, // Set Electronic Volume (Part 2)
    0xFA, // Set Adv. Program Control (Set Temperature compensation)
    0x93, // Set Adv. Program Control (curve to -0.11%/°C)
    0xAF  // Set Display Enable (Display on)
} {
	this -> framebuffer = q_buffer;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4904      	ldr	r1, [pc, #16]	; (8002570 <_ZN7DisplayC1EP9Mal_queue+0x2c>)
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	505a      	str	r2, [r3, r1]

}
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b003      	add	sp, #12
 800256a:	bd90      	pop	{r4, r7, pc}
 800256c:	080086d4 	.word	0x080086d4
 8002570:	00003310 	.word	0x00003310

08002574 <_ZN7Display11sendCommandEh>:

// This function sets the data line to allow the transmission of a command
void Display::sendCommand(uint8_t command)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	000a      	movs	r2, r1
 800257e:	1cfb      	adds	r3, r7, #3
 8002580:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CD_GPIO_PORT, CD_PIN, GPIO_PIN_RESET); 	// Set CD pin low (command mode)
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <_ZN7Display11sendCommandEh+0x30>)
 8002584:	2200      	movs	r2, #0
 8002586:	2110      	movs	r1, #16
 8002588:	0018      	movs	r0, r3
 800258a:	f002 fd7a 	bl	8005082 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &command, 1, 100);					// Push command
 800258e:	1cf9      	adds	r1, r7, #3
 8002590:	4805      	ldr	r0, [pc, #20]	; (80025a8 <_ZN7Display11sendCommandEh+0x34>)
 8002592:	2364      	movs	r3, #100	; 0x64
 8002594:	2201      	movs	r2, #1
 8002596:	f003 fd11 	bl	8005fbc <HAL_SPI_Transmit>
}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b002      	add	sp, #8
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	50000c00 	.word	0x50000c00
 80025a8:	200002f4 	.word	0x200002f4

080025ac <_ZN7Display8sendDataEPh>:


// This function sets the data line to allow the transmission of data
void Display::sendData(uint8_t *data)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(CD_GPIO_PORT, CD_PIN, GPIO_PIN_SET);		// Set CD pin low (data mode)
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <_ZN7Display8sendDataEPh+0x2c>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	2110      	movs	r1, #16
 80025bc:	0018      	movs	r0, r3
 80025be:	f002 fd60 	bl	8005082 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, 1, 100);						// Push data
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <_ZN7Display8sendDataEPh+0x30>)
 80025c6:	2364      	movs	r3, #100	; 0x64
 80025c8:	2201      	movs	r2, #1
 80025ca:	f003 fcf7 	bl	8005fbc <HAL_SPI_Transmit>
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b002      	add	sp, #8
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	50000c00 	.word	0x50000c00
 80025dc:	200002f4 	.word	0x200002f4

080025e0 <_ZN7Display4initEv>:


// This function just pushes the commands to set up the screen upon initialization
void Display::init()
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < sizeof(initCommands) / sizeof(initCommands[0]); i++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e00b      	b.n	8002606 <_ZN7Display4initEv+0x26>
    {
        sendCommand(initCommands[i]);
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	18d3      	adds	r3, r2, r3
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0011      	movs	r1, r2
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff ffba 	bl	8002574 <_ZN7Display11sendCommandEh>
    for (size_t i = 0; i < sizeof(initCommands) / sizeof(initCommands[0]); i++)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3301      	adds	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b0d      	cmp	r3, #13
 800260a:	d9f0      	bls.n	80025ee <_ZN7Display4initEv+0xe>
    }
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}

08002616 <_ZN7Display9clearSRAMEv>:
}


// This function's job is to go through each page and clear out the screen's onboard RAM
void Display::clearSRAM()
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
	uint8_t pageCommand;
	uint8_t RAMClear = 0x00;
 800261e:	230a      	movs	r3, #10
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
	uint8_t columnMSB_CMD = 0x10;
 8002626:	230d      	movs	r3, #13
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2210      	movs	r2, #16
 800262c:	701a      	strb	r2, [r3, #0]
	uint8_t columnLSB_CMD = 0x00;
 800262e:	230c      	movs	r3, #12
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]

		// Iterates through the pages
		for(uint8_t pages = 0; pages < 9; pages++)
 8002636:	230f      	movs	r3, #15
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e03f      	b.n	80026c0 <_ZN7Display9clearSRAMEv+0xaa>
		{
			pageCommand = (0xB0 | (pages & 0x07));
 8002640:	230f      	movs	r3, #15
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2207      	movs	r2, #7
 8002648:	4013      	ands	r3, r2
 800264a:	b2da      	uxtb	r2, r3
 800264c:	200b      	movs	r0, #11
 800264e:	183b      	adds	r3, r7, r0
 8002650:	2150      	movs	r1, #80	; 0x50
 8002652:	4249      	negs	r1, r1
 8002654:	430a      	orrs	r2, r1
 8002656:	701a      	strb	r2, [r3, #0]
			sendCommand(pageCommand);
 8002658:	183b      	adds	r3, r7, r0
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0011      	movs	r1, r2
 8002660:	0018      	movs	r0, r3
 8002662:	f7ff ff87 	bl	8002574 <_ZN7Display11sendCommandEh>

			// Iterates through each column for each page
			for(uint8_t columns = 132; columns > 0; columns--)
 8002666:	230e      	movs	r3, #14
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	2284      	movs	r2, #132	; 0x84
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	e00c      	b.n	800268a <_ZN7Display9clearSRAMEv+0x74>
			{
				sendData(&RAMClear);
 8002670:	230a      	movs	r3, #10
 8002672:	18fa      	adds	r2, r7, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	0011      	movs	r1, r2
 8002678:	0018      	movs	r0, r3
 800267a:	f7ff ff97 	bl	80025ac <_ZN7Display8sendDataEPh>
			for(uint8_t columns = 132; columns > 0; columns--)
 800267e:	210e      	movs	r1, #14
 8002680:	187b      	adds	r3, r7, r1
 8002682:	781a      	ldrb	r2, [r3, #0]
 8002684:	187b      	adds	r3, r7, r1
 8002686:	3a01      	subs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	230e      	movs	r3, #14
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ed      	bne.n	8002670 <_ZN7Display9clearSRAMEv+0x5a>
			}

			// Moves the cursor back to the beginning
			sendCommand(columnLSB_CMD);
 8002694:	230c      	movs	r3, #12
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0011      	movs	r1, r2
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff ff68 	bl	8002574 <_ZN7Display11sendCommandEh>
			sendCommand(columnMSB_CMD);
 80026a4:	230d      	movs	r3, #13
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0011      	movs	r1, r2
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7ff ff60 	bl	8002574 <_ZN7Display11sendCommandEh>
		for(uint8_t pages = 0; pages < 9; pages++)
 80026b4:	210f      	movs	r1, #15
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	187b      	adds	r3, r7, r1
 80026bc:	3201      	adds	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	230f      	movs	r3, #15
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d9ba      	bls.n	8002640 <_ZN7Display9clearSRAMEv+0x2a>
		}
}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b004      	add	sp, #16
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <_ZN7Display11drawVoltageEv>:


// Once a frame has been collected, it is sent to the screen with this function
void Display::drawVoltage()
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	uint8_t page;
	uint8_t pageCommand;
	uint8_t pixel;
	uint8_t columnMSB;
	uint8_t columnLSB;
	uint8_t currentcolumn = 0;
 80026dc:	230f      	movs	r3, #15
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]

	// For each column, a page and bit have to calculated from a pixel height
	for (int8_t i = 0; i < 102; i++)
 80026e4:	230e      	movs	r3, #14
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e061      	b.n	80027b2 <_ZN7Display11drawVoltageEv+0xde>
	{
		pixel = activeArray[i];
 80026ee:	250e      	movs	r5, #14
 80026f0:	197b      	adds	r3, r7, r5
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4933      	ldr	r1, [pc, #204]	; (80027c8 <_ZN7Display11drawVoltageEv+0xf4>)
 80026fa:	18d3      	adds	r3, r2, r3
 80026fc:	185b      	adds	r3, r3, r1
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	2409      	movs	r4, #9
 8002702:	193b      	adds	r3, r7, r4
 8002704:	701a      	strb	r2, [r3, #0]

		page = (pixel / NUM_PAGE_BITS);
 8002706:	193b      	adds	r3, r7, r4
 8002708:	781a      	ldrb	r2, [r3, #0]
 800270a:	210d      	movs	r1, #13
 800270c:	187b      	adds	r3, r7, r1
 800270e:	08d2      	lsrs	r2, r2, #3
 8002710:	701a      	strb	r2, [r3, #0]
		pageCommand = (STARTPAGE | (page & 0x07));  // Ensure that only the lower 3 bits are used
 8002712:	187b      	adds	r3, r7, r1
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2207      	movs	r2, #7
 8002718:	4013      	ands	r3, r2
 800271a:	b2da      	uxtb	r2, r3
 800271c:	200c      	movs	r0, #12
 800271e:	183b      	adds	r3, r7, r0
 8002720:	2150      	movs	r1, #80	; 0x50
 8002722:	4249      	negs	r1, r1
 8002724:	430a      	orrs	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]
		sendCommand(pageCommand);
 8002728:	183b      	adds	r3, r7, r0
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0011      	movs	r1, r2
 8002730:	0018      	movs	r0, r3
 8002732:	f7ff ff1f 	bl	8002574 <_ZN7Display11sendCommandEh>

		columnMSB = (0x10 | (currentcolumn >> 4));
 8002736:	200f      	movs	r0, #15
 8002738:	183b      	adds	r3, r7, r0
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	b2da      	uxtb	r2, r3
 8002740:	260b      	movs	r6, #11
 8002742:	19bb      	adds	r3, r7, r6
 8002744:	2110      	movs	r1, #16
 8002746:	430a      	orrs	r2, r1
 8002748:	701a      	strb	r2, [r3, #0]
		columnLSB = (0x00 | (currentcolumn & 0x0F));
 800274a:	230a      	movs	r3, #10
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	183a      	adds	r2, r7, r0
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	210f      	movs	r1, #15
 8002754:	400a      	ands	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
		currentcolumn++;
 8002758:	183b      	adds	r3, r7, r0
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	183b      	adds	r3, r7, r0
 800275e:	3201      	adds	r2, #1
 8002760:	701a      	strb	r2, [r3, #0]

		sendCommand(columnLSB);
 8002762:	230a      	movs	r3, #10
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	0011      	movs	r1, r2
 800276c:	0018      	movs	r0, r3
 800276e:	f7ff ff01 	bl	8002574 <_ZN7Display11sendCommandEh>
		sendCommand(columnMSB);
 8002772:	19bb      	adds	r3, r7, r6
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0011      	movs	r1, r2
 800277a:	0018      	movs	r0, r3
 800277c:	f7ff fefa 	bl	8002574 <_ZN7Display11sendCommandEh>

		pixel = (0x01 << (pixel % 8));
 8002780:	193b      	adds	r3, r7, r4
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	001a      	movs	r2, r3
 8002786:	2307      	movs	r3, #7
 8002788:	4013      	ands	r3, r2
 800278a:	2201      	movs	r2, #1
 800278c:	409a      	lsls	r2, r3
 800278e:	0013      	movs	r3, r2
 8002790:	b2da      	uxtb	r2, r3
 8002792:	193b      	adds	r3, r7, r4
 8002794:	701a      	strb	r2, [r3, #0]
		sendData(&pixel);
 8002796:	193a      	adds	r2, r7, r4
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0011      	movs	r1, r2
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff ff05 	bl	80025ac <_ZN7Display8sendDataEPh>
	for (int8_t i = 0; i < 102; i++)
 80027a2:	197b      	adds	r3, r7, r5
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	197b      	adds	r3, r7, r5
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	230e      	movs	r3, #14
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	2b65      	cmp	r3, #101	; 0x65
 80027bc:	dd97      	ble.n	80026ee <_ZN7Display11drawVoltageEv+0x1a>
	}
}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b005      	add	sp, #20
 80027c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c8:	0000337a 	.word	0x0000337a

080027cc <_ZN7Display12CheckForDataEv>:


// This is the function that is constantly called to attempt to dequeue and add a pixel to a render
void Display::CheckForData()
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	static uint8_t bufferReverseIndex = SCREEN_WIDTH - 1;
	packet msg;
	uint8_t pixelHeight;

	if (framebuffer->Mdequeue(&msg))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a45      	ldr	r2, [pc, #276]	; (80028ec <_ZN7Display12CheckForDataEv+0x120>)
 80027d8:	589b      	ldr	r3, [r3, r2]
 80027da:	240c      	movs	r4, #12
 80027dc:	193a      	adds	r2, r7, r4
 80027de:	0011      	movs	r1, r2
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 fa9d 	bl	8002d20 <_ZN9Mal_queue8MdequeueEP6packet>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d100      	bne.n	80027ec <_ZN7Display12CheckForDataEv+0x20>
 80027ea:	e07b      	b.n	80028e4 <_ZN7Display12CheckForDataEv+0x118>
	{
		pixelHeight = msg.height;
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	2015      	movs	r0, #21
 80027f2:	183b      	adds	r3, r7, r0
 80027f4:	701a      	strb	r2, [r3, #0]

		if (bufferReverseIndex)
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <_ZN7Display12CheckForDataEv+0x124>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d012      	beq.n	8002824 <_ZN7Display12CheckForDataEv+0x58>
		{
			bufferArray[SCREEN_WIDTH - bufferReverseIndex] = pixelHeight;
 80027fe:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <_ZN7Display12CheckForDataEv+0x124>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	001a      	movs	r2, r3
 8002804:	2366      	movs	r3, #102	; 0x66
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	493a      	ldr	r1, [pc, #232]	; (80028f4 <_ZN7Display12CheckForDataEv+0x128>)
 800280c:	18d3      	adds	r3, r2, r3
 800280e:	185b      	adds	r3, r3, r1
 8002810:	183a      	adds	r2, r7, r0
 8002812:	7812      	ldrb	r2, [r2, #0]
 8002814:	701a      	strb	r2, [r3, #0]
			bufferReverseIndex--;
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <_ZN7Display12CheckForDataEv+0x124>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	3b01      	subs	r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <_ZN7Display12CheckForDataEv+0x124>)
 8002820:	701a      	strb	r2, [r3, #0]
			{
				activeArray[SCREEN_WIDTH - i] = 0;
			}
		}
	}
}
 8002822:	e05f      	b.n	80028e4 <_ZN7Display12CheckForDataEv+0x118>
			bufferArray[SCREEN_WIDTH - bufferReverseIndex] = pixelHeight;
 8002824:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <_ZN7Display12CheckForDataEv+0x124>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	001a      	movs	r2, r3
 800282a:	2366      	movs	r3, #102	; 0x66
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4930      	ldr	r1, [pc, #192]	; (80028f4 <_ZN7Display12CheckForDataEv+0x128>)
 8002832:	18d3      	adds	r3, r2, r3
 8002834:	185b      	adds	r3, r3, r1
 8002836:	2215      	movs	r2, #21
 8002838:	18ba      	adds	r2, r7, r2
 800283a:	7812      	ldrb	r2, [r2, #0]
 800283c:	701a      	strb	r2, [r3, #0]
			for(int8_t i = 0; i < SCREEN_WIDTH; i++)
 800283e:	2317      	movs	r3, #23
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e01d      	b.n	8002884 <_ZN7Display12CheckForDataEv+0xb8>
				activeArray[SCREEN_WIDTH - i] = bufferArray[SCREEN_WIDTH - i];
 8002848:	2417      	movs	r4, #23
 800284a:	193b      	adds	r3, r7, r4
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b25b      	sxtb	r3, r3
 8002850:	2266      	movs	r2, #102	; 0x66
 8002852:	1ad2      	subs	r2, r2, r3
 8002854:	193b      	adds	r3, r7, r4
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b25b      	sxtb	r3, r3
 800285a:	2166      	movs	r1, #102	; 0x66
 800285c:	1acb      	subs	r3, r1, r3
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4824      	ldr	r0, [pc, #144]	; (80028f4 <_ZN7Display12CheckForDataEv+0x128>)
 8002862:	188a      	adds	r2, r1, r2
 8002864:	1812      	adds	r2, r2, r0
 8002866:	7810      	ldrb	r0, [r2, #0]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4923      	ldr	r1, [pc, #140]	; (80028f8 <_ZN7Display12CheckForDataEv+0x12c>)
 800286c:	18d3      	adds	r3, r2, r3
 800286e:	185b      	adds	r3, r3, r1
 8002870:	1c02      	adds	r2, r0, #0
 8002872:	701a      	strb	r2, [r3, #0]
			for(int8_t i = 0; i < SCREEN_WIDTH; i++)
 8002874:	193b      	adds	r3, r7, r4
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b25b      	sxtb	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	3301      	adds	r3, #1
 800287e:	b2da      	uxtb	r2, r3
 8002880:	193b      	adds	r3, r7, r4
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	2317      	movs	r3, #23
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b25b      	sxtb	r3, r3
 800288c:	2b65      	cmp	r3, #101	; 0x65
 800288e:	dddb      	ble.n	8002848 <_ZN7Display12CheckForDataEv+0x7c>
			bufferReverseIndex = SCREEN_WIDTH - 1;
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <_ZN7Display12CheckForDataEv+0x124>)
 8002892:	2265      	movs	r2, #101	; 0x65
 8002894:	701a      	strb	r2, [r3, #0]
			clearSRAM();
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f7ff febc 	bl	8002616 <_ZN7Display9clearSRAMEv>
			drawVoltage();
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff ff17 	bl	80026d4 <_ZN7Display11drawVoltageEv>
			for(int8_t i = 0; i < SCREEN_WIDTH; i++)
 80028a6:	2316      	movs	r3, #22
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e013      	b.n	80028d8 <_ZN7Display12CheckForDataEv+0x10c>
				activeArray[SCREEN_WIDTH - i] = 0;
 80028b0:	2016      	movs	r0, #22
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	b25b      	sxtb	r3, r3
 80028b8:	2266      	movs	r2, #102	; 0x66
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	490e      	ldr	r1, [pc, #56]	; (80028f8 <_ZN7Display12CheckForDataEv+0x12c>)
 80028c0:	18d3      	adds	r3, r2, r3
 80028c2:	185b      	adds	r3, r3, r1
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
			for(int8_t i = 0; i < SCREEN_WIDTH; i++)
 80028c8:	183b      	adds	r3, r7, r0
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	183b      	adds	r3, r7, r0
 80028d6:	701a      	strb	r2, [r3, #0]
 80028d8:	2316      	movs	r3, #22
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	b25b      	sxtb	r3, r3
 80028e0:	2b65      	cmp	r3, #101	; 0x65
 80028e2:	dde5      	ble.n	80028b0 <_ZN7Display12CheckForDataEv+0xe4>
}
 80028e4:	46c0      	nop			; (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b007      	add	sp, #28
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	00003310 	.word	0x00003310
 80028f0:	20000000 	.word	0x20000000
 80028f4:	00003314 	.word	0x00003314
 80028f8:	0000337a 	.word	0x0000337a

080028fc <_ZN13Edge_detectorC1Ev>:
 *  Untouched from Dr. Carroll's repo
 */

#include "../Repo/Edgedetector.h"

Edge_detector::Edge_detector() {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	4a08      	ldr	r2, [pc, #32]	; (8002928 <_ZN13Edge_detectorC1Ev+0x2c>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	601a      	str	r2, [r3, #0]
	this->b = B_LOW;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	711a      	strb	r2, [r3, #4]
	this->gpio_port = GPIOB;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a06      	ldr	r2, [pc, #24]	; (800292c <_ZN13Edge_detectorC1Ev+0x30>)
 8002914:	609a      	str	r2, [r3, #8]
	this->pin_mask = 0x0001;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	819a      	strh	r2, [r3, #12]
}
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b002      	add	sp, #8
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	08008784 	.word	0x08008784
 800292c:	50000400 	.word	0x50000400

08002930 <_ZN13Edge_detectorD1Ev>:

Edge_detector::~Edge_detector() {
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	4a03      	ldr	r2, [pc, #12]	; (8002948 <_ZN13Edge_detectorD1Ev+0x18>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}
 8002948:	08008784 	.word	0x08008784

0800294c <_ZN13Edge_detectorD0Ev>:
Edge_detector::~Edge_detector() {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
}
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	0018      	movs	r0, r3
 8002958:	f7ff ffea 	bl	8002930 <_ZN13Edge_detectorD1Ev>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2110      	movs	r1, #16
 8002960:	0018      	movs	r0, r3
 8002962:	f004 fe8f 	bl	8007684 <_ZdlPvj>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}

08002970 <_ZN13Edge_detector13config_pinoutEP12GPIO_TypeDeft>:
	this->pin_mask = other.pin_mask;
	this->b = other.b;
}


void Edge_detector::config_pinout(GPIO_TypeDef *gpio_port, uint16_t pin_mask){
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	1dbb      	adds	r3, r7, #6
 800297c:	801a      	strh	r2, [r3, #0]
	this->gpio_port = gpio_port;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	609a      	str	r2, [r3, #8]
	this->pin_mask = pin_mask;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1dba      	adds	r2, r7, #6
 8002988:	8812      	ldrh	r2, [r2, #0]
 800298a:	819a      	strh	r2, [r3, #12]
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b004      	add	sp, #16
 8002992:	bd80      	pop	{r7, pc}

08002994 <_ZN13Edge_detector6updateEv>:


Edge_sense Edge_detector::update(void){
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	Edge_sense e = EDGE_NONE_LOW;
 800299c:	230f      	movs	r3, #15
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
	GPIO_PinState x = HAL_GPIO_ReadPin(this->gpio_port, this->pin_mask);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	899b      	ldrh	r3, [r3, #12]
 80029ac:	210e      	movs	r1, #14
 80029ae:	187c      	adds	r4, r7, r1
 80029b0:	0019      	movs	r1, r3
 80029b2:	0010      	movs	r0, r2
 80029b4:	f002 fb48 	bl	8005048 <HAL_GPIO_ReadPin>
 80029b8:	0003      	movs	r3, r0
 80029ba:	7023      	strb	r3, [r4, #0]
	switch (this->b)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	791b      	ldrb	r3, [r3, #4]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d047      	beq.n	8002a54 <_ZN13Edge_detector6updateEv+0xc0>
 80029c4:	dc5b      	bgt.n	8002a7e <_ZN13Edge_detector6updateEv+0xea>
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d02f      	beq.n	8002a2a <_ZN13Edge_detector6updateEv+0x96>
 80029ca:	dc58      	bgt.n	8002a7e <_ZN13Edge_detector6updateEv+0xea>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <_ZN13Edge_detector6updateEv+0x42>
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d015      	beq.n	8002a00 <_ZN13Edge_detector6updateEv+0x6c>
 80029d4:	e053      	b.n	8002a7e <_ZN13Edge_detector6updateEv+0xea>
	{

	case B_LOW:
		if (x == GPIO_PIN_SET){
 80029d6:	230e      	movs	r3, #14
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d107      	bne.n	80029f0 <_ZN13Edge_detector6updateEv+0x5c>
			this->b = B_MAY_RISE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	711a      	strb	r2, [r3, #4]
			e = EDGE_NONE_LOW;
 80029e6:	230f      	movs	r3, #15
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]
		}
		else {
			this->b = B_LOW;
			e = EDGE_NONE_LOW;
		}
		break;
 80029ee:	e046      	b.n	8002a7e <_ZN13Edge_detector6updateEv+0xea>
			this->b = B_LOW;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	711a      	strb	r2, [r3, #4]
			e = EDGE_NONE_LOW;
 80029f6:	230f      	movs	r3, #15
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
		break;
 80029fe:	e03e      	b.n	8002a7e <_ZN13Edge_detector6updateEv+0xea>

	case B_MAY_RISE:
		if (x == GPIO_PIN_SET){
 8002a00:	230e      	movs	r3, #14
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d107      	bne.n	8002a1a <_ZN13Edge_detector6updateEv+0x86>
			this->b = B_HIGH;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	711a      	strb	r2, [r3, #4]
			e = EDGE_RISING;
 8002a10:	230f      	movs	r3, #15
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2202      	movs	r2, #2
 8002a16:	701a      	strb	r2, [r3, #0]
		}
		else {
			this->b = B_LOW;
			e = EDGE_NONE_LOW;
		}
		break;
 8002a18:	e031      	b.n	8002a7e <_ZN13Edge_detector6updateEv+0xea>
			this->b = B_LOW;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	711a      	strb	r2, [r3, #4]
			e = EDGE_NONE_LOW;
 8002a20:	230f      	movs	r3, #15
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
		break;
 8002a28:	e029      	b.n	8002a7e <_ZN13Edge_detector6updateEv+0xea>

	case B_HIGH:
		if (x == GPIO_PIN_RESET){
 8002a2a:	230e      	movs	r3, #14
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d107      	bne.n	8002a44 <_ZN13Edge_detector6updateEv+0xb0>
			this->b = B_MAY_FALL;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2203      	movs	r2, #3
 8002a38:	711a      	strb	r2, [r3, #4]
			e = EDGE_NONE_HIGH;
 8002a3a:	230f      	movs	r3, #15
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
		}
		else {
			this->b = B_HIGH;
			e = EDGE_NONE_HIGH;
		}
		break;
 8002a42:	e01c      	b.n	8002a7e <_ZN13Edge_detector6updateEv+0xea>
			this->b = B_HIGH;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	711a      	strb	r2, [r3, #4]
			e = EDGE_NONE_HIGH;
 8002a4a:	230f      	movs	r3, #15
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
		break;
 8002a52:	e014      	b.n	8002a7e <_ZN13Edge_detector6updateEv+0xea>

	case B_MAY_FALL:
		if (x == GPIO_PIN_RESET){
 8002a54:	230e      	movs	r3, #14
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <_ZN13Edge_detector6updateEv+0xda>
			this->b = B_LOW;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	711a      	strb	r2, [r3, #4]
			e = EDGE_FALLING;
 8002a64:	230f      	movs	r3, #15
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2203      	movs	r2, #3
 8002a6a:	701a      	strb	r2, [r3, #0]
		}
		else {
			this->b = B_HIGH;
			e = EDGE_NONE_HIGH;
		}
		break;
 8002a6c:	e006      	b.n	8002a7c <_ZN13Edge_detector6updateEv+0xe8>
			this->b = B_HIGH;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	711a      	strb	r2, [r3, #4]
			e = EDGE_NONE_HIGH;
 8002a74:	230f      	movs	r3, #15
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
		break;
 8002a7c:	46c0      	nop			; (mov r8, r8)

	}
	return e;
 8002a7e:	230f      	movs	r3, #15
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	781b      	ldrb	r3, [r3, #0]
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b005      	add	sp, #20
 8002a8a:	bd90      	pop	{r4, r7, pc}

08002a8c <_ZN8Knob_FSMC1EP12GPIO_TypeDeftS1_tPVh>:
 * insert a value into a queue.
 */

#include "../Repo/KnobFSM.h"

Knob_FSM::Knob_FSM(GPIO_TypeDef *A_gpio_port, uint16_t A_pin_mask, GPIO_TypeDef *B_gpio_port, uint16_t B_pin_mask, volatile uint8_t* READYFLAG) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	1dbb      	adds	r3, r7, #6
 8002a9a:	801a      	strh	r2, [r3, #0]
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <_ZN8Knob_FSMC1EP12GPIO_TypeDeftS1_tPVh+0x7c>)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7ff ff28 	bl	80028fc <_ZN13Edge_detectorC1Ev>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3318      	adds	r3, #24
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7ff ff23 	bl	80028fc <_ZN13Edge_detectorC1Ev>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3328      	adds	r3, #40	; 0x28
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7ff ff1e 	bl	80028fc <_ZN13Edge_detectorC1Ev>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3338      	adds	r3, #56	; 0x38
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff ff19 	bl	80028fc <_ZN13Edge_detectorC1Ev>
	this->pinA_debounced_edge.config_pinout(A_gpio_port, A_pin_mask);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	3308      	adds	r3, #8
 8002ace:	0018      	movs	r0, r3
 8002ad0:	1dbb      	adds	r3, r7, #6
 8002ad2:	881a      	ldrh	r2, [r3, #0]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	f7ff ff4a 	bl	8002970 <_ZN13Edge_detector13config_pinoutEP12GPIO_TypeDeft>
	this->pinB_debounced_edge.config_pinout(B_gpio_port, B_pin_mask);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3328      	adds	r3, #40	; 0x28
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	2318      	movs	r3, #24
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	0019      	movs	r1, r3
 8002aec:	f7ff ff40 	bl	8002970 <_ZN13Edge_detector13config_pinoutEP12GPIO_TypeDeft>
	//this->pinA_old_debounced_edge.config_pinout(A_gpio_port, A_pin_mask);
	//this->pinB_old_debounced_edge.config_pinout(B_gpio_port, B_pin_mask);
	count = 100;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2264      	movs	r2, #100	; 0x64
 8002af4:	649a      	str	r2, [r3, #72]	; 0x48
	this -> READYFLAG = READYFLAG;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b004      	add	sp, #16
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	08008794 	.word	0x08008794

08002b0c <_ZN8Knob_FSM6updateEv>:

void Knob_FSM::update(void){
 8002b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	// AWAIT a message. If none, abort this call.
	if (*READYFLAG)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	1e5a      	subs	r2, r3, #1
 8002b1e:	4193      	sbcs	r3, r2
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d03a      	beq.n	8002b9c <_ZN8Knob_FSM6updateEv+0x90>
	{
		Edge_sense A_edge = this->pinA_debounced_edge.update();
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3308      	adds	r3, #8
 8002b2a:	250f      	movs	r5, #15
 8002b2c:	197c      	adds	r4, r7, r5
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7ff ff30 	bl	8002994 <_ZN13Edge_detector6updateEv>
 8002b34:	0003      	movs	r3, r0
 8002b36:	7023      	strb	r3, [r4, #0]
		Edge_sense B_edge = this->pinB_debounced_edge.update();
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3328      	adds	r3, #40	; 0x28
 8002b3c:	260e      	movs	r6, #14
 8002b3e:	19bc      	adds	r4, r7, r6
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7ff ff27 	bl	8002994 <_ZN13Edge_detector6updateEv>
 8002b46:	0003      	movs	r3, r0
 8002b48:	7023      	strb	r3, [r4, #0]

		// Intended: Pin A is pulled up, so when the knob turns CW, the A switch
		// opens first (thus rising), and the B opens & rises while A is still
		// high.
		if ((A_edge == EDGE_NONE_HIGH) && (B_edge == EDGE_RISING))
 8002b4a:	197b      	adds	r3, r7, r5
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <_ZN8Knob_FSM6updateEv+0x62>
 8002b52:	19bb      	adds	r3, r7, r6
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d109      	bne.n	8002b6e <_ZN8Knob_FSM6updateEv+0x62>
		{
			if (count < 200)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5e:	2bc7      	cmp	r3, #199	; 0xc7
 8002b60:	d818      	bhi.n	8002b94 <_ZN8Knob_FSM6updateEv+0x88>
			{
				count++;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	649a      	str	r2, [r3, #72]	; 0x48
			if (count < 200)
 8002b6c:	e012      	b.n	8002b94 <_ZN8Knob_FSM6updateEv+0x88>
			}
		}
		else if ((A_edge == EDGE_RISING) && (B_edge == EDGE_NONE_HIGH))
 8002b6e:	230f      	movs	r3, #15
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d10d      	bne.n	8002b94 <_ZN8Knob_FSM6updateEv+0x88>
 8002b78:	230e      	movs	r3, #14
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d108      	bne.n	8002b94 <_ZN8Knob_FSM6updateEv+0x88>
		{
			if (count > 0)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <_ZN8Knob_FSM6updateEv+0x88>
			{
				count--;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8e:	1e5a      	subs	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	649a      	str	r2, [r3, #72]	; 0x48
			}
		}

		*READYFLAG = 0;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
	}
	else
	{

	} // ABORT
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b005      	add	sp, #20
 8002ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ba4 <_ZN8Knob_FSMD1Ev>:

Knob_FSM::~Knob_FSM() {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <_ZN8Knob_FSMD1Ev+0x40>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3338      	adds	r3, #56	; 0x38
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f7ff feba 	bl	8002930 <_ZN13Edge_detectorD1Ev>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3328      	adds	r3, #40	; 0x28
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f7ff feb5 	bl	8002930 <_ZN13Edge_detectorD1Ev>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3318      	adds	r3, #24
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7ff feb0 	bl	8002930 <_ZN13Edge_detectorD1Ev>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f7ff feab 	bl	8002930 <_ZN13Edge_detectorD1Ev>
	// TODO Auto-generated destructor stub
}
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	08008794 	.word	0x08008794

08002be8 <_ZN8Knob_FSMD0Ev>:
Knob_FSM::~Knob_FSM() {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
}
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff ffd6 	bl	8002ba4 <_ZN8Knob_FSMD1Ev>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2150      	movs	r1, #80	; 0x50
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f004 fd41 	bl	8007684 <_ZdlPvj>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_ZN8Knob_FSM9get_countEv>:

uint32_t Knob_FSM::get_count(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	return this -> count;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_ZN9Mal_queueC1Ev>:

#include "../Repo/Mal_queue.h"
#include <cstdint>


Mal_queue::Mal_queue() {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <_ZN9Mal_queueC1Ev+0x28>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	601a      	str	r2, [r3, #0]
	this->head = 0;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2254      	movs	r2, #84	; 0x54
 8002c32:	2100      	movs	r1, #0
 8002c34:	5299      	strh	r1, [r3, r2]
	this->use_count = 0;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2256      	movs	r2, #86	; 0x56
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5299      	strh	r1, [r3, r2]
}
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	080087a4 	.word	0x080087a4

08002c4c <_ZN9Mal_queueD1Ev>:

Mal_queue::~Mal_queue() {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	4a03      	ldr	r2, [pc, #12]	; (8002c64 <_ZN9Mal_queueD1Ev+0x18>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub -- 3 attr, all explicit:: no effort needed.
}
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	080087a4 	.word	0x080087a4

08002c68 <_ZN9Mal_queueD0Ev>:
Mal_queue::~Mal_queue() {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
}
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff ffea 	bl	8002c4c <_ZN9Mal_queueD1Ev>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2158      	movs	r1, #88	; 0x58
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f004 fd01 	bl	8007684 <_ZdlPvj>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_ZN9Mal_queue8MenqueueE6packet>:
		this->buffer[n] = other.buffer[n];
	}
}

bool Mal_queue::Menqueue(const packet msg)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	6019      	str	r1, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
	bool successQ = false;
 8002c9a:	2117      	movs	r1, #23
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
	if (use_count >= 8)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2256      	movs	r2, #86	; 0x56
 8002ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8002ca8:	2b07      	cmp	r3, #7
 8002caa:	dd03      	ble.n	8002cb4 <_ZN9Mal_queue8MenqueueE6packet+0x28>
	{
		successQ = false;
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e02c      	b.n	8002d0e <_ZN9Mal_queue8MenqueueE6packet+0x82>
	}
	else
	{
	   int16_t slot = (head + use_count) % 8;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2254      	movs	r2, #84	; 0x54
 8002cb8:	5e9b      	ldrsh	r3, [r3, r2]
 8002cba:	0019      	movs	r1, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2256      	movs	r2, #86	; 0x56
 8002cc0:	5e9b      	ldrsh	r3, [r3, r2]
 8002cc2:	18cb      	adds	r3, r1, r3
 8002cc4:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <_ZN9Mal_queue8MenqueueE6packet+0x90>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d504      	bpl.n	8002cd4 <_ZN9Mal_queue8MenqueueE6packet+0x48>
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	2208      	movs	r2, #8
 8002cce:	4252      	negs	r2, r2
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	2114      	movs	r1, #20
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	801a      	strh	r2, [r3, #0]
	   buffer[slot] = msg;
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2200      	movs	r2, #0
 8002ce0:	5e9b      	ldrsh	r3, [r3, r2]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	2104      	movs	r1, #4
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	185b      	adds	r3, r3, r1
 8002cec:	1d3a      	adds	r2, r7, #4
 8002cee:	ca03      	ldmia	r2!, {r0, r1}
 8002cf0:	c303      	stmia	r3!, {r0, r1}
	   use_count++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2256      	movs	r2, #86	; 0x56
 8002cf6:	5e9b      	ldrsh	r3, [r3, r2]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	b219      	sxth	r1, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2256      	movs	r2, #86	; 0x56
 8002d04:	5299      	strh	r1, [r3, r2]
	   successQ = true;
 8002d06:	2317      	movs	r3, #23
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
	}
	return successQ;
 8002d0e:	2317      	movs	r3, #23
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	781b      	ldrb	r3, [r3, #0]
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b006      	add	sp, #24
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	80000007 	.word	0x80000007

08002d20 <_ZN9Mal_queue8MdequeueEP6packet>:

bool Mal_queue::Mdequeue(packet* msg)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
	bool successQ = false;
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
	if (use_count <= 0)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2256      	movs	r2, #86	; 0x56
 8002d36:	5e9b      	ldrsh	r3, [r3, r2]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	dc03      	bgt.n	8002d44 <_ZN9Mal_queue8MdequeueEP6packet+0x24>
	{
		successQ = false;
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	e029      	b.n	8002d98 <_ZN9Mal_queue8MdequeueEP6packet+0x78>
	}
	else
	{
		*msg = buffer[head];
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2254      	movs	r2, #84	; 0x54
 8002d48:	5e9b      	ldrsh	r3, [r3, r2]
 8002d4a:	6838      	ldr	r0, [r7, #0]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	2104      	movs	r1, #4
 8002d52:	18d3      	adds	r3, r2, r3
 8002d54:	185a      	adds	r2, r3, r1
 8002d56:	0003      	movs	r3, r0
 8002d58:	ca03      	ldmia	r2!, {r0, r1}
 8002d5a:	c303      	stmia	r3!, {r0, r1}
		head = (head + 1) % 8;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2254      	movs	r2, #84	; 0x54
 8002d60:	5e9b      	ldrsh	r3, [r3, r2]
 8002d62:	3301      	adds	r3, #1
 8002d64:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <_ZN9Mal_queue8MdequeueEP6packet+0x88>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	d504      	bpl.n	8002d74 <_ZN9Mal_queue8MdequeueEP6packet+0x54>
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	4252      	negs	r2, r2
 8002d70:	4313      	orrs	r3, r2
 8002d72:	3301      	adds	r3, #1
 8002d74:	b219      	sxth	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2254      	movs	r2, #84	; 0x54
 8002d7a:	5299      	strh	r1, [r3, r2]
		use_count--;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2256      	movs	r2, #86	; 0x56
 8002d80:	5e9b      	ldrsh	r3, [r3, r2]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	b219      	sxth	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2256      	movs	r2, #86	; 0x56
 8002d8e:	5299      	strh	r1, [r3, r2]
		successQ = true;
 8002d90:	230f      	movs	r3, #15
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
	}
	return successQ;
 8002d98:	230f      	movs	r3, #15
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	781b      	ldrb	r3, [r3, #0]
}
 8002d9e:	0018      	movs	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b004      	add	sp, #16
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	80000007 	.word	0x80000007

08002dac <_ZN13PeriodUpdaterC1EP8Knob_FSM>:
#include "../Repo/Cheka_adc.h"

extern TIM_HandleTypeDef htim16;
extern uint16_t ISRFLAG;

PeriodUpdater::PeriodUpdater(Knob_FSM *knob)
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
 8002db6:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <_ZN13PeriodUpdaterC1EP8Knob_FSM+0x28>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	819a      	strh	r2, [r3, #12]
{
	this -> knob = knob;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
}
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	080087b4 	.word	0x080087b4

08002dd8 <_ZN13PeriodUpdaterD1Ev>:


PeriodUpdater::~PeriodUpdater() {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <_ZN13PeriodUpdaterD1Ev+0x18>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	080087b4 	.word	0x080087b4

08002df4 <_ZN13PeriodUpdaterD0Ev>:
PeriodUpdater::~PeriodUpdater() {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
}
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f7ff ffea 	bl	8002dd8 <_ZN13PeriodUpdaterD1Ev>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2110      	movs	r1, #16
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f004 fc3b 	bl	8007684 <_ZdlPvj>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <_ZN13PeriodUpdater12updatePeriodEv>:

void PeriodUpdater::updatePeriod()
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	count = knob -> get_count();
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff fef1 	bl	8002c0c <_ZN8Knob_FSM9get_countEv>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
	newTop = (20 * count) + 99;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2214      	movs	r2, #20
 8002e38:	4353      	muls	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3363      	adds	r3, #99	; 0x63
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	819a      	strh	r2, [r3, #12]

	if (ISRFLAG)
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <_ZN13PeriodUpdater12updatePeriodEv+0x58>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00c      	beq.n	8002e66 <_ZN13PeriodUpdater12updatePeriodEv+0x4e>
	{
		__HAL_TIM_SET_AUTORELOAD(&htim16, newTop);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	899a      	ldrh	r2, [r3, #12]
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <_ZN13PeriodUpdater12updatePeriodEv+0x5c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	899b      	ldrh	r3, [r3, #12]
 8002e5a:	001a      	movs	r2, r3
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <_ZN13PeriodUpdater12updatePeriodEv+0x5c>)
 8002e5e:	60da      	str	r2, [r3, #12]
		ISRFLAG = 0;
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <_ZN13PeriodUpdater12updatePeriodEv+0x58>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	801a      	strh	r2, [r3, #0]
	}
}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	20000288 	.word	0x20000288
 8002e74:	20000358 	.word	0x20000358

08002e78 <_Z10Ram_Healthv>:
 */

#include "../Repo/Ram_Health.h"

void Ram_Health()
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
	static uint32_t barrier1 = 0xBADF00D;
	if (barrier1 != 0xBADF00D)
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <_Z10Ram_Healthv+0x30>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <_Z10Ram_Healthv+0x34>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d000      	beq.n	8002e88 <_Z10Ram_Healthv+0x10>
	{
		while(1){}
 8002e86:	e7fe      	b.n	8002e86 <_Z10Ram_Healthv+0xe>
	}

	static uint32_t barrier2;
	if (barrier2 != 0)
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <_Z10Ram_Healthv+0x38>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d000      	beq.n	8002e92 <_Z10Ram_Healthv+0x1a>
	{
		while(1){}
 8002e90:	e7fe      	b.n	8002e90 <_Z10Ram_Healthv+0x18>
	}

	if (*(uint16_t *) 1002 != 0xd300)
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <_Z10Ram_Healthv+0x3c>)
 8002e94:	881a      	ldrh	r2, [r3, #0]
 8002e96:	23d3      	movs	r3, #211	; 0xd3
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d000      	beq.n	8002ea0 <_Z10Ram_Healthv+0x28>
	{
		while(1){}
 8002e9e:	e7fe      	b.n	8002e9e <_Z10Ram_Healthv+0x26>
	}
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	20000004 	.word	0x20000004
 8002eac:	0badf00d 	.word	0x0badf00d
 8002eb0:	2000008c 	.word	0x2000008c
 8002eb4:	000003ea 	.word	0x000003ea

08002eb8 <_Z8Ram_initv>:

void Ram_init()
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
	*(uint16_t *) 1002 = 0xACE;
 8002ebc:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <_Z8Ram_initv+0x10>)
 8002ebe:	4a03      	ldr	r2, [pc, #12]	; (8002ecc <_Z8Ram_initv+0x14>)
 8002ec0:	801a      	strh	r2, [r3, #0]
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	000003ea 	.word	0x000003ea
 8002ecc:	00000ace 	.word	0x00000ace

08002ed0 <_ZN23rawDataToPixelConverterC1EP10Sean_queueP9Mal_queue>:
#include "../Repo/RawToPixel.h"




rawDataToPixelConverter::rawDataToPixelConverter(Sean_queue *q_raw, Mal_queue *q_buffer)
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	4a0f      	ldr	r2, [pc, #60]	; (8002f1c <_ZN23rawDataToPixelConverterC1EP10Sean_queueP9Mal_queue+0x4c>)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	601a      	str	r2, [r3, #0]
{
	this -> q_raw = q_raw;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	605a      	str	r2, [r3, #4]
	this -> q_buffer = q_buffer;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	609a      	str	r2, [r3, #8]
	lineCount = 0;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	60da      	str	r2, [r3, #12]
	newestMeasurement = 0;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	821a      	strh	r2, [r3, #16]
	height = 0;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	825a      	strh	r2, [r3, #18]
	mvMeasurement = 0;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	829a      	strh	r2, [r3, #20]
	outbound.column = 0;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
	outbound.height = 0;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
}
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b004      	add	sp, #16
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	080087c4 	.word	0x080087c4

08002f20 <_ZN23rawDataToPixelConverterD1Ev>:


rawDataToPixelConverter::~rawDataToPixelConverter() {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <_ZN23rawDataToPixelConverterD1Ev+0x18>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	080087c4 	.word	0x080087c4

08002f3c <_ZN23rawDataToPixelConverterD0Ev>:
rawDataToPixelConverter::~rawDataToPixelConverter() {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
}
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f7ff ffea 	bl	8002f20 <_ZN23rawDataToPixelConverterD1Ev>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2120      	movs	r1, #32
 8002f50:	0018      	movs	r0, r3
 8002f52:	f004 fb97 	bl	8007684 <_ZdlPvj>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <_ZN23rawDataToPixelConverter14rawDataToPixelEv>:


void rawDataToPixelConverter::rawDataToPixel(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	if (q_raw->dequeue(&newestMeasurement))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3310      	adds	r3, #16
 8002f70:	0019      	movs	r1, r3
 8002f72:	0010      	movs	r0, r2
 8002f74:	f000 f8fc 	bl	8003170 <_ZN10Sean_queue7dequeueEPs>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d053      	beq.n	8003024 <_ZN23rawDataToPixelConverter14rawDataToPixelEv+0xc4>
	{
		// ADC raw to millivolts
		mvMeasurement = ((newestMeasurement * (3.3 / 4096)) * 1000);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2210      	movs	r2, #16
 8002f80:	5e9b      	ldrsh	r3, [r3, r2]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7fe fffc 	bl	8001f80 <__aeabi_i2d>
 8002f88:	4a28      	ldr	r2, [pc, #160]	; (800302c <_ZN23rawDataToPixelConverter14rawDataToPixelEv+0xcc>)
 8002f8a:	4b29      	ldr	r3, [pc, #164]	; (8003030 <_ZN23rawDataToPixelConverter14rawDataToPixelEv+0xd0>)
 8002f8c:	f7fe f97e 	bl	800128c <__aeabi_dmul>
 8002f90:	0002      	movs	r2, r0
 8002f92:	000b      	movs	r3, r1
 8002f94:	0010      	movs	r0, r2
 8002f96:	0019      	movs	r1, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <_ZN23rawDataToPixelConverter14rawDataToPixelEv+0xd4>)
 8002f9c:	f7fe f976 	bl	800128c <__aeabi_dmul>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	000b      	movs	r3, r1
 8002fa4:	0010      	movs	r0, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	f7fe ffb4 	bl	8001f14 <__aeabi_d2iz>
 8002fac:	0003      	movs	r3, r0
 8002fae:	b21a      	sxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	829a      	strh	r2, [r3, #20]

		// Millivolts to a pixel location within my set range (1 - 56)
		height = ((mvMeasurement / (float)(3300)) * 56);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2214      	movs	r2, #20
 8002fb8:	5e9b      	ldrsh	r3, [r3, r2]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f7fd fdb4 	bl	8000b28 <__aeabi_i2f>
 8002fc0:	1c03      	adds	r3, r0, #0
 8002fc2:	491d      	ldr	r1, [pc, #116]	; (8003038 <_ZN23rawDataToPixelConverter14rawDataToPixelEv+0xd8>)
 8002fc4:	1c18      	adds	r0, r3, #0
 8002fc6:	f7fd fb27 	bl	8000618 <__aeabi_fdiv>
 8002fca:	1c03      	adds	r3, r0, #0
 8002fcc:	491b      	ldr	r1, [pc, #108]	; (800303c <_ZN23rawDataToPixelConverter14rawDataToPixelEv+0xdc>)
 8002fce:	1c18      	adds	r0, r3, #0
 8002fd0:	f7fd fc3c 	bl	800084c <__aeabi_fmul>
 8002fd4:	1c03      	adds	r3, r0, #0
 8002fd6:	1c18      	adds	r0, r3, #0
 8002fd8:	f7fd fd86 	bl	8000ae8 <__aeabi_f2iz>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	b21a      	sxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	825a      	strh	r2, [r3, #18]

		outbound.column = lineCount;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	001a      	movs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	619a      	str	r2, [r3, #24]
		outbound.height = height;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2212      	movs	r2, #18
 8002ff2:	5e9b      	ldrsh	r3, [r3, r2]
 8002ff4:	001a      	movs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	61da      	str	r2, [r3, #28]

		if(q_buffer->Menqueue(outbound))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6898      	ldr	r0, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6999      	ldr	r1, [r3, #24]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	f7ff fe42 	bl	8002c8c <_ZN9Mal_queue8MenqueueE6packet>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d00b      	beq.n	8003024 <_ZN23rawDataToPixelConverter14rawDataToPixelEv+0xc4>
		{
			lineCount++;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60da      	str	r2, [r3, #12]
			if (lineCount > 101)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b65      	cmp	r3, #101	; 0x65
 800301c:	d902      	bls.n	8003024 <_ZN23rawDataToPixelConverter14rawDataToPixelEv+0xc4>
			{
				lineCount = 0;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	60da      	str	r2, [r3, #12]
			}
		}
	}
}
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b002      	add	sp, #8
 800302a:	bd80      	pop	{r7, pc}
 800302c:	66666666 	.word	0x66666666
 8003030:	3f4a6666 	.word	0x3f4a6666
 8003034:	408f4000 	.word	0x408f4000
 8003038:	454e4000 	.word	0x454e4000
 800303c:	42600000 	.word	0x42600000

08003040 <_ZN10Sean_queueC1Ev>:
#include "../repo/Sean_queue.h"

#include <cstdint>


Sean_queue::Sean_queue() {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <_ZN10Sean_queueC1Ev+0x64>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	601a      	str	r2, [r3, #0]
	// Std c'tor = Queue head = 0, queue contains nought; pattern in
	// buffer for debug purposes only. The buffer here is oversized
	// (10) for the usage (8) to show students wrapping-before-8.
	this->head = 0;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	22cc      	movs	r2, #204	; 0xcc
 8003052:	2100      	movs	r1, #0
 8003054:	5299      	strh	r1, [r3, r2]
	this->use_count = 0;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	22ce      	movs	r2, #206	; 0xce
 800305a:	2100      	movs	r1, #0
 800305c:	5299      	strh	r1, [r3, r2]
	for (int8_t n = 0; n < 100; n++){
 800305e:	230f      	movs	r3, #15
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e011      	b.n	800308c <_ZN10Sean_queueC1Ev+0x4c>
		this->buffer[n] = 0;
 8003068:	210f      	movs	r1, #15
 800306a:	187b      	adds	r3, r7, r1
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	b25b      	sxtb	r3, r3
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	18d3      	adds	r3, r2, r3
 8003076:	3304      	adds	r3, #4
 8003078:	2200      	movs	r2, #0
 800307a:	801a      	strh	r2, [r3, #0]
	for (int8_t n = 0; n < 100; n++){
 800307c:	187b      	adds	r3, r7, r1
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	b25b      	sxtb	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	b2da      	uxtb	r2, r3
 8003088:	187b      	adds	r3, r7, r1
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	230f      	movs	r3, #15
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b25b      	sxtb	r3, r3
 8003094:	2b63      	cmp	r3, #99	; 0x63
 8003096:	dde7      	ble.n	8003068 <_ZN10Sean_queueC1Ev+0x28>
	}
}
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b004      	add	sp, #16
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	080087d4 	.word	0x080087d4

080030a8 <_ZN10Sean_queueD1Ev>:

Sean_queue::~Sean_queue() {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	4a03      	ldr	r2, [pc, #12]	; (80030c0 <_ZN10Sean_queueD1Ev+0x18>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub -- 3 attr, all explicit:: no effort needed.
	// Note -- C++ files are auto-gen with both comment styles, which often causes
	// style-mavens to gag.
}
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	080087d4 	.word	0x080087d4

080030c4 <_ZN10Sean_queueD0Ev>:
Sean_queue::~Sean_queue() {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
}
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff ffea 	bl	80030a8 <_ZN10Sean_queueD1Ev>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	21d0      	movs	r1, #208	; 0xd0
 80030d8:	0018      	movs	r0, r3
 80030da:	f004 fad3 	bl	8007684 <_ZdlPvj>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_ZN10Sean_queue7enqueueEs>:
	for (int8_t n = 0; n < 100; n++){
		this->buffer[n] = other.buffer[n];
	}
}

bool Sean_queue::enqueue(const int16_t msg){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	000a      	movs	r2, r1
 80030f2:	1cbb      	adds	r3, r7, #2
 80030f4:	801a      	strh	r2, [r3, #0]
	// Head + Use_count style, and calculates tail - circular buffer.
	// enqueue() returns FALSE if buffer is full.
	// Also: uses only buffer cells [0] to [7]; [8] and [9] never used
	bool successQ = false;
 80030f6:	210f      	movs	r1, #15
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
	if (use_count >= 98){
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	22ce      	movs	r2, #206	; 0xce
 8003102:	5e9b      	ldrsh	r3, [r3, r2]
 8003104:	2b61      	cmp	r3, #97	; 0x61
 8003106:	dd03      	ble.n	8003110 <_ZN10Sean_queue7enqueueEs+0x28>
		successQ = false;
 8003108:	187b      	adds	r3, r7, r1
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e028      	b.n	8003162 <_ZN10Sean_queue7enqueueEs+0x7a>
	}
	else{
	   int16_t slot = (head + use_count)%98;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	22cc      	movs	r2, #204	; 0xcc
 8003114:	5e9b      	ldrsh	r3, [r3, r2]
 8003116:	0019      	movs	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	22ce      	movs	r2, #206	; 0xce
 800311c:	5e9b      	ldrsh	r3, [r3, r2]
 800311e:	18cb      	adds	r3, r1, r3
 8003120:	2162      	movs	r1, #98	; 0x62
 8003122:	0018      	movs	r0, r3
 8003124:	f7fd f968 	bl	80003f8 <__aeabi_idivmod>
 8003128:	000b      	movs	r3, r1
 800312a:	001a      	movs	r2, r3
 800312c:	210c      	movs	r1, #12
 800312e:	187b      	adds	r3, r7, r1
 8003130:	801a      	strh	r2, [r3, #0]
	   buffer[slot] = msg;
 8003132:	187b      	adds	r3, r7, r1
 8003134:	2200      	movs	r2, #0
 8003136:	5e9b      	ldrsh	r3, [r3, r2]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	18d3      	adds	r3, r2, r3
 800313e:	3304      	adds	r3, #4
 8003140:	1cba      	adds	r2, r7, #2
 8003142:	8812      	ldrh	r2, [r2, #0]
 8003144:	801a      	strh	r2, [r3, #0]
	   use_count++;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	22ce      	movs	r2, #206	; 0xce
 800314a:	5e9b      	ldrsh	r3, [r3, r2]
 800314c:	b29b      	uxth	r3, r3
 800314e:	3301      	adds	r3, #1
 8003150:	b29b      	uxth	r3, r3
 8003152:	b219      	sxth	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	22ce      	movs	r2, #206	; 0xce
 8003158:	5299      	strh	r1, [r3, r2]
	   successQ = true;
 800315a:	230f      	movs	r3, #15
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
	}
	return successQ;
 8003162:	230f      	movs	r3, #15
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	781b      	ldrb	r3, [r3, #0]
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b004      	add	sp, #16
 800316e:	bd80      	pop	{r7, pc}

08003170 <_ZN10Sean_queue7dequeueEPs>:

bool Sean_queue::dequeue(int16_t* msg){
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
	// So, I have marked it const. The data at the other end of the ptr
	// is (*msg) and it will change, so *msg is NOT marked const. In a
	// function this short this has little value, but in longer functions
	// maybe the compiler can save code time knowing that (msg) can be relied on.
	// Also: uses only buffer cells [0] to [7]; [8] and [9] never used
	bool successQ = false;
 800317a:	210f      	movs	r1, #15
 800317c:	187b      	adds	r3, r7, r1
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
	if (use_count <= 0){
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	22ce      	movs	r2, #206	; 0xce
 8003186:	5e9b      	ldrsh	r3, [r3, r2]
 8003188:	2b00      	cmp	r3, #0
 800318a:	dc03      	bgt.n	8003194 <_ZN10Sean_queue7dequeueEPs+0x24>
		successQ = false;
 800318c:	187b      	adds	r3, r7, r1
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e025      	b.n	80031e0 <_ZN10Sean_queue7dequeueEPs+0x70>
	}
	else {
		*msg = buffer[head];
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	22cc      	movs	r2, #204	; 0xcc
 8003198:	5e9b      	ldrsh	r3, [r3, r2]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	18d3      	adds	r3, r2, r3
 80031a0:	3304      	adds	r3, #4
 80031a2:	2200      	movs	r2, #0
 80031a4:	5e9a      	ldrsh	r2, [r3, r2]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	801a      	strh	r2, [r3, #0]
		head = (head + 1)%98;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	22cc      	movs	r2, #204	; 0xcc
 80031ae:	5e9b      	ldrsh	r3, [r3, r2]
 80031b0:	3301      	adds	r3, #1
 80031b2:	2162      	movs	r1, #98	; 0x62
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7fd f91f 	bl	80003f8 <__aeabi_idivmod>
 80031ba:	000b      	movs	r3, r1
 80031bc:	b219      	sxth	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	22cc      	movs	r2, #204	; 0xcc
 80031c2:	5299      	strh	r1, [r3, r2]
		use_count--;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	22ce      	movs	r2, #206	; 0xce
 80031c8:	5e9b      	ldrsh	r3, [r3, r2]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	b219      	sxth	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	22ce      	movs	r2, #206	; 0xce
 80031d6:	5299      	strh	r1, [r3, r2]
		successQ = true;
 80031d8:	230f      	movs	r3, #15
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
	}
	return successQ;
 80031e0:	230f      	movs	r3, #15
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	781b      	ldrb	r3, [r3, #0]
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b004      	add	sp, #16
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <_ZN14TriggerUpdaterC1EP8Knob_FSMP9DataStore>:
 */
#include "../Repo/TriggerUpdate.h"

extern uint16_t ISRFLAG;

TriggerUpdater::TriggerUpdater(Knob_FSM *knob, DataStore* triggerObj)
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	4a08      	ldr	r2, [pc, #32]	; (8003220 <_ZN14TriggerUpdaterC1EP8Knob_FSMP9DataStore+0x30>)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	819a      	strh	r2, [r3, #12]
{
	this -> knob = knob;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	605a      	str	r2, [r3, #4]
	this -> triggerObj = triggerObj;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	611a      	str	r2, [r3, #16]
}
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	080087e4 	.word	0x080087e4

08003224 <_ZN14TriggerUpdaterD1Ev>:


TriggerUpdater::~TriggerUpdater() {
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	4a03      	ldr	r2, [pc, #12]	; (800323c <_ZN14TriggerUpdaterD1Ev+0x18>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}
 800323c:	080087e4 	.word	0x080087e4

08003240 <_ZN14TriggerUpdaterD0Ev>:
TriggerUpdater::~TriggerUpdater() {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
}
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff ffea 	bl	8003224 <_ZN14TriggerUpdaterD1Ev>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2114      	movs	r1, #20
 8003254:	0018      	movs	r0, r3
 8003256:	f004 fa15 	bl	8007684 <_ZdlPvj>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <_ZN14TriggerUpdater13updateTriggerEv>:

void TriggerUpdater::updateTrigger()
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
	count = knob -> get_count();
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f7ff fccb 	bl	8002c0c <_ZN8Knob_FSM9get_countEv>
 8003276:	0002      	movs	r2, r0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	609a      	str	r2, [r3, #8]
	//0 - 4095
	uint32_t newTrigger = count * 20.475 * 2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	0018      	movs	r0, r3
 8003282:	f7fe fead 	bl	8001fe0 <__aeabi_ui2d>
 8003286:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <_ZN14TriggerUpdater13updateTriggerEv+0x74>)
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <_ZN14TriggerUpdater13updateTriggerEv+0x78>)
 800328a:	f7fd ffff 	bl	800128c <__aeabi_dmul>
 800328e:	0002      	movs	r2, r0
 8003290:	000b      	movs	r3, r1
 8003292:	0010      	movs	r0, r2
 8003294:	0019      	movs	r1, r3
 8003296:	0002      	movs	r2, r0
 8003298:	000b      	movs	r3, r1
 800329a:	f7fd fc97 	bl	8000bcc <__aeabi_dadd>
 800329e:	0002      	movs	r2, r0
 80032a0:	000b      	movs	r3, r1
 80032a2:	0010      	movs	r0, r2
 80032a4:	0019      	movs	r1, r3
 80032a6:	f7fd f8cd 	bl	8000444 <__aeabi_d2uiz>
 80032aa:	0003      	movs	r3, r0
 80032ac:	60fb      	str	r3, [r7, #12]

	if(newTrigger > 4095)
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	015b      	lsls	r3, r3, #5
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d302      	bcc.n	80032be <_ZN14TriggerUpdater13updateTriggerEv+0x5a>
	{
		newTrigger = 4095;
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <_ZN14TriggerUpdater13updateTriggerEv+0x7c>)
 80032ba:	60fb      	str	r3, [r7, #12]
	else
	{
		triggerObj -> setTrigger(newTrigger);
	}

}
 80032bc:	e007      	b.n	80032ce <_ZN14TriggerUpdater13updateTriggerEv+0x6a>
		triggerObj -> setTrigger(newTrigger);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	b212      	sxth	r2, r2
 80032c6:	0011      	movs	r1, r2
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7ff f92b 	bl	8002524 <_ZN9DataStore10setTriggerEs>
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b004      	add	sp, #16
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	9999999a 	.word	0x9999999a
 80032dc:	40347999 	.word	0x40347999
 80032e0:	00000fff 	.word	0x00000fff

080032e4 <HAL_TIM_PeriodElapsedCallback>:


// Unfortunately there isn't a function for each interrupt, so they must be handled
// like this.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM17)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0c      	ldr	r2, [pc, #48]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d106      	bne.n	8003304 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		KNOB1FLAG = 1;
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
		KNOB2FLAG = 1;
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
	else if (htim -> Instance == TIM16)
	{
		ADC_FLAG = 1;
		ISRFLAG = 1;
	}
}
 8003302:	e00a      	b.n	800331a <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim -> Instance == TIM16)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a09      	ldr	r2, [pc, #36]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d105      	bne.n	800331a <HAL_TIM_PeriodElapsedCallback+0x36>
		ADC_FLAG = 1;
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
		ISRFLAG = 1;
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003316:	2201      	movs	r2, #1
 8003318:	801a      	strh	r2, [r3, #0]
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b002      	add	sp, #8
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	40014800 	.word	0x40014800
 8003328:	2000028b 	.word	0x2000028b
 800332c:	2000028c 	.word	0x2000028c
 8003330:	40014400 	.word	0x40014400
 8003334:	2000028a 	.word	0x2000028a
 8003338:	20000288 	.word	0x20000288

0800333c <do_cpp_loop>:


void do_cpp_loop()
{
 800333c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333e:	4c3c      	ldr	r4, [pc, #240]	; (8003430 <do_cpp_loop+0xf4>)
 8003340:	44a5      	add	sp, r4
 8003342:	af02      	add	r7, sp, #8
	// Must initialize the RAM protection function.
	Ram_init();
 8003344:	f7ff fdb8 	bl	8002eb8 <_Z8Ram_initv>

	// Initialize all the objects -===================================================================
	Convert_ADC ADC_con(&q_volt);														// This object is in charge of generating ADC values on demand
 8003348:	4a3a      	ldr	r2, [pc, #232]	; (8003434 <do_cpp_loop+0xf8>)
 800334a:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <do_cpp_loop+0xfc>)
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	0011      	movs	r1, r2
 8003350:	0018      	movs	r0, r3
 8003352:	f7fe ffdf 	bl	8002314 <_ZN11Convert_ADCC1EP10Sean_queue>
	DataStore goodData;																	// This object takes ADC readings, applies a trigger level, and sends out good readings
 8003356:	4d39      	ldr	r5, [pc, #228]	; (800343c <do_cpp_loop+0x100>)
 8003358:	197b      	adds	r3, r7, r5
 800335a:	0018      	movs	r0, r3
 800335c:	f7ff f830 	bl	80023c0 <_ZN9DataStoreC1Ev>
	Knob_FSM knob1(GPIOC, Quad_1_PC10_Pin, GPIOC, Quad_1_PC12_Pin, &KNOB1FLAG);			// This object is a state machine for a knob that controls the period of timer 16
 8003360:	4c37      	ldr	r4, [pc, #220]	; (8003440 <do_cpp_loop+0x104>)
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	00da      	lsls	r2, r3, #3
 8003366:	4936      	ldr	r1, [pc, #216]	; (8003440 <do_cpp_loop+0x104>)
 8003368:	4e36      	ldr	r6, [pc, #216]	; (8003444 <do_cpp_loop+0x108>)
 800336a:	19b8      	adds	r0, r7, r6
 800336c:	4b36      	ldr	r3, [pc, #216]	; (8003448 <do_cpp_loop+0x10c>)
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	015b      	lsls	r3, r3, #5
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	0023      	movs	r3, r4
 8003378:	f7ff fb88 	bl	8002a8c <_ZN8Knob_FSMC1EP12GPIO_TypeDeftS1_tPVh>
	Knob_FSM knob2(GPIOC, Quad_2_PC2_Pin, GPIOC, Quad_2_PC3_Pin, &KNOB2FLAG);			// This object is a state machine for a knob that controls the trigger level
 800337c:	4a30      	ldr	r2, [pc, #192]	; (8003440 <do_cpp_loop+0x104>)
 800337e:	4930      	ldr	r1, [pc, #192]	; (8003440 <do_cpp_loop+0x104>)
 8003380:	4c32      	ldr	r4, [pc, #200]	; (800344c <do_cpp_loop+0x110>)
 8003382:	1938      	adds	r0, r7, r4
 8003384:	4b32      	ldr	r3, [pc, #200]	; (8003450 <do_cpp_loop+0x114>)
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	2308      	movs	r3, #8
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	0013      	movs	r3, r2
 800338e:	2204      	movs	r2, #4
 8003390:	f7ff fb7c 	bl	8002a8c <_ZN8Knob_FSMC1EP12GPIO_TypeDeftS1_tPVh>
	rawDataToPixelConverter pixelUpdate(&q_raw, &q_video_buffer);						// This object takes raw ADC readings and converts them to packets containing a pixel height
 8003394:	4a2f      	ldr	r2, [pc, #188]	; (8003454 <do_cpp_loop+0x118>)
 8003396:	4930      	ldr	r1, [pc, #192]	; (8003458 <do_cpp_loop+0x11c>)
 8003398:	4b30      	ldr	r3, [pc, #192]	; (800345c <do_cpp_loop+0x120>)
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff fd97 	bl	8002ed0 <_ZN23rawDataToPixelConverterC1EP10Sean_queueP9Mal_queue>
	PeriodUpdater tim16(&knob1);														// This object takes information from [Knob_FSM knob1] and uses it to update the period of TIM16
 80033a2:	19ba      	adds	r2, r7, r6
 80033a4:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <do_cpp_loop+0x124>)
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	0011      	movs	r1, r2
 80033aa:	0018      	movs	r0, r3
 80033ac:	f7ff fcfe 	bl	8002dac <_ZN13PeriodUpdaterC1EP8Knob_FSM>
	TriggerUpdater Trig(&knob2, &goodData);												// This object takes information from [Knob_FSM knob1] and uses it to update the trigger level in [DataStore goodData]
 80033b0:	197a      	adds	r2, r7, r5
 80033b2:	1939      	adds	r1, r7, r4
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <do_cpp_loop+0x128>)
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7ff ff19 	bl	80031f0 <_ZN14TriggerUpdaterC1EP8Knob_FSMP9DataStore>
	Display display(&q_video_buffer);													// This object takes packets from [rawDataToPixelConverter pixelUpdate] and renders and displays frames
 80033be:	4a25      	ldr	r2, [pc, #148]	; (8003454 <do_cpp_loop+0x118>)
 80033c0:	1d3b      	adds	r3, r7, #4
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7ff f8bd 	bl	8002544 <_ZN7DisplayC1EP9Mal_queue>

	// Must initialize the display before a frame is displayed
	display.init();
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff f907 	bl	80025e0 <_ZN7Display4initEv>
	display.clearSRAM();
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff f91e 	bl	8002616 <_ZN7Display9clearSRAMEv>

	while(1)
	{
		// Must run to ensure RAM is healthy. Runs once per loop cycle.
		Ram_Health();
 80033da:	f7ff fd4d 	bl	8002e78 <_Z10Ram_Healthv>

		// Gets an ADC voltage and enqueues into [q_volt]
		ADC_con.get_ADC_VAL();
 80033de:	4b16      	ldr	r3, [pc, #88]	; (8003438 <do_cpp_loop+0xfc>)
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fe ffa6 	bl	8002334 <_ZN11Convert_ADC11get_ADC_VALEv>

		// Get readings from [q_volt], if trigger level requirements are met, enqueues into [q_raw]
		goodData.updatedata();
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <do_cpp_loop+0x100>)
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fe fffd 	bl	80023ec <_ZN9DataStore10updatedataEv>

		// Pulls a value from q_raw, processes into a height and column, then enqueues into q_video_buffer.
		pixelUpdate.rawDataToPixel();
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <do_cpp_loop+0x120>)
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff fdb2 	bl	8002f60 <_ZN23rawDataToPixelConverter14rawDataToPixelEv>

		// Updates the knob value
		knob1.update();
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <do_cpp_loop+0x108>)
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	0018      	movs	r0, r3
 8003402:	f7ff fb83 	bl	8002b0c <_ZN8Knob_FSM6updateEv>

		// Updates the knob value
		knob2.update();
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <do_cpp_loop+0x110>)
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff fb7e 	bl	8002b0c <_ZN8Knob_FSM6updateEv>

		// Updates the period of TIM16 based on the knob value of knob1
		tim16.updatePeriod();
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <do_cpp_loop+0x124>)
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	0018      	movs	r0, r3
 8003416:	f7ff fcff 	bl	8002e18 <_ZN13PeriodUpdater12updatePeriodEv>
		
		// Updates the trigger level of [DataStore goodData] based on the knob value of knob1
		Trig.updateTrigger();
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <do_cpp_loop+0x128>)
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	0018      	movs	r0, r3
 8003420:	f7ff ff20 	bl	8003264 <_ZN14TriggerUpdater13updateTriggerEv>

		// Gets packets from rawDataToPixelConverter pixelUpdate
		display.CheckForData();
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	0018      	movs	r0, r3
 8003428:	f7ff f9d0 	bl	80027cc <_ZN7Display12CheckForDataEv>
		Ram_Health();
 800342c:	e7d5      	b.n	80033da <do_cpp_loop+0x9e>
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	ffffcb1c 	.word	0xffffcb1c
 8003434:	20000090 	.word	0x20000090
 8003438:	000034d0 	.word	0x000034d0
 800343c:	000034c8 	.word	0x000034c8
 8003440:	50000800 	.word	0x50000800
 8003444:	00003478 	.word	0x00003478
 8003448:	2000028b 	.word	0x2000028b
 800344c:	00003428 	.word	0x00003428
 8003450:	2000028c 	.word	0x2000028c
 8003454:	20000230 	.word	0x20000230
 8003458:	20000160 	.word	0x20000160
 800345c:	00003408 	.word	0x00003408
 8003460:	000033f8 	.word	0x000033f8
 8003464:	000033e4 	.word	0x000033e4

08003468 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10f      	bne.n	8003498 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d10b      	bne.n	8003498 <_Z41__static_initialization_and_destruction_0ii+0x30>
Sean_queue q_volt;						// Contains raw voltage readings from the ADC. [Convert_ADC ADC_con] enqueues, [DataStore goodData] dequeues.
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003482:	0018      	movs	r0, r3
 8003484:	f7ff fddc 	bl	8003040 <_ZN10Sean_queueC1Ev>
Sean_queue q_raw;						// Contains good raw ADC voltages that have been vetted by the trigger level. [DataStore goodData] enqueues, [rawDataToPixelConverter pixelUpdate] dequeues.
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800348a:	0018      	movs	r0, r3
 800348c:	f7ff fdd8 	bl	8003040 <_ZN10Sean_queueC1Ev>
Mal_queue q_video_buffer;				// Contains packets, which contain a pixel height. [rawDataToPixelConverter pixelUpdate] enqueues, [Display display] dequeues.
 8003490:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003492:	0018      	movs	r0, r3
 8003494:	f7ff fbc4 	bl	8002c20 <_ZN9Mal_queueC1Ev>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <_Z41__static_initialization_and_destruction_0ii+0x56>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10b      	bne.n	80034be <_Z41__static_initialization_and_destruction_0ii+0x56>
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff fbcf 	bl	8002c4c <_ZN9Mal_queueD1Ev>
Sean_queue q_raw;						// Contains good raw ADC voltages that have been vetted by the trigger level. [DataStore goodData] enqueues, [rawDataToPixelConverter pixelUpdate] dequeues.
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff fdf9 	bl	80030a8 <_ZN10Sean_queueD1Ev>
Sean_queue q_volt;						// Contains raw voltage readings from the ADC. [Convert_ADC ADC_con] enqueues, [DataStore goodData] dequeues.
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff fdf5 	bl	80030a8 <_ZN10Sean_queueD1Ev>
}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	46bd      	mov	sp, r7
 80034c2:	b002      	add	sp, #8
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	0000ffff 	.word	0x0000ffff
 80034cc:	20000090 	.word	0x20000090
 80034d0:	20000160 	.word	0x20000160
 80034d4:	20000230 	.word	0x20000230

080034d8 <_GLOBAL__sub_I_q_volt>:
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <_GLOBAL__sub_I_q_volt+0x14>)
 80034de:	0019      	movs	r1, r3
 80034e0:	2001      	movs	r0, #1
 80034e2:	f7ff ffc1 	bl	8003468 <_Z41__static_initialization_and_destruction_0ii>
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	0000ffff 	.word	0x0000ffff

080034f0 <_GLOBAL__sub_D_q_volt>:
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <_GLOBAL__sub_D_q_volt+0x14>)
 80034f6:	0019      	movs	r1, r3
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7ff ffb5 	bl	8003468 <_Z41__static_initialization_and_destruction_0ii>
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	0000ffff 	.word	0x0000ffff

08003508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800350c:	f000 fd1e 	bl	8003f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003510:	f000 f81e 	bl	8003550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003514:	f000 f9a8 	bl	8003868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003518:	f000 f958 	bl	80037cc <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800351c:	f000 f92e 	bl	800377c <MX_TIM17_Init>
  MX_ADC1_Init();
 8003520:	f000 f85e 	bl	80035e0 <MX_ADC1_Init>
  MX_TIM16_Init();
 8003524:	f000 f904 	bl	8003730 <MX_TIM16_Init>
  MX_SPI1_Init();
 8003528:	f000 f8c4 	bl	80036b4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM17_Init();
 800352c:	f000 f926 	bl	800377c <MX_TIM17_Init>
  htim17) ***/
  /*** Uses an ARM CMSIS function in the HAL framework
  ***/
  /*** Start the periodic timer now, immediately after
  init() ***/
  HAL_TIM_Base_Start_IT(&htim17);
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <main+0x40>)
 8003532:	0018      	movs	r0, r3
 8003534:	f003 f868 	bl	8006608 <HAL_TIM_Base_Start_IT>
  /*** Also initialize my knob-debounce FSM object, my
  queue ***/
  /*** object and my sample-timing object.
  ***/

  HAL_TIM_Base_Start_IT(&htim16);
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <main+0x44>)
 800353a:	0018      	movs	r0, r3
 800353c:	f003 f864 	bl	8006608 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  do_cpp_loop();
 8003540:	f7ff fefc 	bl	800333c <do_cpp_loop>

  while (1)
 8003544:	e7fe      	b.n	8003544 <main+0x3c>
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	200003a4 	.word	0x200003a4
 800354c:	20000358 	.word	0x20000358

08003550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b093      	sub	sp, #76	; 0x4c
 8003554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003556:	2410      	movs	r4, #16
 8003558:	193b      	adds	r3, r7, r4
 800355a:	0018      	movs	r0, r3
 800355c:	2338      	movs	r3, #56	; 0x38
 800355e:	001a      	movs	r2, r3
 8003560:	2100      	movs	r1, #0
 8003562:	f004 fa81 	bl	8007a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003566:	003b      	movs	r3, r7
 8003568:	0018      	movs	r0, r3
 800356a:	2310      	movs	r3, #16
 800356c:	001a      	movs	r2, r3
 800356e:	2100      	movs	r1, #0
 8003570:	f004 fa7a 	bl	8007a68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	0018      	movs	r0, r3
 800357a:	f001 fd9f 	bl	80050bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800357e:	193b      	adds	r3, r7, r4
 8003580:	2202      	movs	r2, #2
 8003582:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003584:	193b      	adds	r3, r7, r4
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	0052      	lsls	r2, r2, #1
 800358a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800358c:	193b      	adds	r3, r7, r4
 800358e:	2200      	movs	r2, #0
 8003590:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003592:	193b      	adds	r3, r7, r4
 8003594:	2240      	movs	r2, #64	; 0x40
 8003596:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003598:	193b      	adds	r3, r7, r4
 800359a:	2200      	movs	r2, #0
 800359c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	0018      	movs	r0, r3
 80035a2:	f001 fdd7 	bl	8005154 <HAL_RCC_OscConfig>
 80035a6:	1e03      	subs	r3, r0, #0
 80035a8:	d001      	beq.n	80035ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80035aa:	f000 fa53 	bl	8003a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ae:	003b      	movs	r3, r7
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80035b4:	003b      	movs	r3, r7
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035ba:	003b      	movs	r3, r7
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035c0:	003b      	movs	r3, r7
 80035c2:	2200      	movs	r2, #0
 80035c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80035c6:	003b      	movs	r3, r7
 80035c8:	2100      	movs	r1, #0
 80035ca:	0018      	movs	r0, r3
 80035cc:	f002 f8dc 	bl	8005788 <HAL_RCC_ClockConfig>
 80035d0:	1e03      	subs	r3, r0, #0
 80035d2:	d001      	beq.n	80035d8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80035d4:	f000 fa3e 	bl	8003a54 <Error_Handler>
  }
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b013      	add	sp, #76	; 0x4c
 80035de:	bd90      	pop	{r4, r7, pc}

080035e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	0018      	movs	r0, r3
 80035ea:	230c      	movs	r3, #12
 80035ec:	001a      	movs	r2, r3
 80035ee:	2100      	movs	r1, #0
 80035f0:	f004 fa3a 	bl	8007a68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80035f4:	4b2d      	ldr	r3, [pc, #180]	; (80036ac <MX_ADC1_Init+0xcc>)
 80035f6:	4a2e      	ldr	r2, [pc, #184]	; (80036b0 <MX_ADC1_Init+0xd0>)
 80035f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80035fa:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <MX_ADC1_Init+0xcc>)
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	05d2      	lsls	r2, r2, #23
 8003600:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003602:	4b2a      	ldr	r3, [pc, #168]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003608:	4b28      	ldr	r3, [pc, #160]	; (80036ac <MX_ADC1_Init+0xcc>)
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800360e:	4b27      	ldr	r3, [pc, #156]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003610:	2200      	movs	r2, #0
 8003612:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003614:	4b25      	ldr	r3, [pc, #148]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003616:	2204      	movs	r2, #4
 8003618:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <MX_ADC1_Init+0xcc>)
 800361c:	2200      	movs	r2, #0
 800361e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003620:	4b22      	ldr	r3, [pc, #136]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003622:	2200      	movs	r2, #0
 8003624:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003626:	4b21      	ldr	r3, [pc, #132]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003628:	2200      	movs	r2, #0
 800362a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800362c:	4b1f      	ldr	r3, [pc, #124]	; (80036ac <MX_ADC1_Init+0xcc>)
 800362e:	2201      	movs	r2, #1
 8003630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003632:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003634:	2220      	movs	r2, #32
 8003636:	2100      	movs	r1, #0
 8003638:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800363a:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <MX_ADC1_Init+0xcc>)
 800363c:	2200      	movs	r2, #0
 800363e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003642:	2200      	movs	r2, #0
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003646:	4b19      	ldr	r3, [pc, #100]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003648:	222c      	movs	r2, #44	; 0x2c
 800364a:	2100      	movs	r1, #0
 800364c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800364e:	4b17      	ldr	r3, [pc, #92]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003656:	2200      	movs	r2, #0
 8003658:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <MX_ADC1_Init+0xcc>)
 800365c:	2200      	movs	r2, #0
 800365e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003660:	4b12      	ldr	r3, [pc, #72]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003662:	223c      	movs	r2, #60	; 0x3c
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <MX_ADC1_Init+0xcc>)
 800366a:	2200      	movs	r2, #0
 800366c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800366e:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003670:	0018      	movs	r0, r3
 8003672:	f000 fe15 	bl	80042a0 <HAL_ADC_Init>
 8003676:	1e03      	subs	r3, r0, #0
 8003678:	d001      	beq.n	800367e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800367a:	f000 f9eb 	bl	8003a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	2200      	movs	r2, #0
 8003688:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003690:	1d3a      	adds	r2, r7, #4
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <MX_ADC1_Init+0xcc>)
 8003694:	0011      	movs	r1, r2
 8003696:	0018      	movs	r0, r3
 8003698:	f001 f836 	bl	8004708 <HAL_ADC_ConfigChannel>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d001      	beq.n	80036a4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80036a0:	f000 f9d8 	bl	8003a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b004      	add	sp, #16
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000290 	.word	0x20000290
 80036b0:	40012400 	.word	0x40012400

080036b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <MX_SPI1_Init+0x74>)
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <MX_SPI1_Init+0x78>)
 80036bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <MX_SPI1_Init+0x74>)
 80036c0:	2282      	movs	r2, #130	; 0x82
 80036c2:	0052      	lsls	r2, r2, #1
 80036c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <MX_SPI1_Init+0x74>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80036cc:	4b16      	ldr	r3, [pc, #88]	; (8003728 <MX_SPI1_Init+0x74>)
 80036ce:	22e0      	movs	r2, #224	; 0xe0
 80036d0:	00d2      	lsls	r2, r2, #3
 80036d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <MX_SPI1_Init+0x74>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036da:	4b13      	ldr	r3, [pc, #76]	; (8003728 <MX_SPI1_Init+0x74>)
 80036dc:	2200      	movs	r2, #0
 80036de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <MX_SPI1_Init+0x74>)
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	02d2      	lsls	r2, r2, #11
 80036e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <MX_SPI1_Init+0x74>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <MX_SPI1_Init+0x74>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <MX_SPI1_Init+0x74>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <MX_SPI1_Init+0x74>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <MX_SPI1_Init+0x74>)
 8003702:	2207      	movs	r2, #7
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <MX_SPI1_Init+0x74>)
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <MX_SPI1_Init+0x74>)
 800370e:	2208      	movs	r2, #8
 8003710:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <MX_SPI1_Init+0x74>)
 8003714:	0018      	movs	r0, r3
 8003716:	f002 fb99 	bl	8005e4c <HAL_SPI_Init>
 800371a:	1e03      	subs	r3, r0, #0
 800371c:	d001      	beq.n	8003722 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800371e:	f000 f999 	bl	8003a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200002f4 	.word	0x200002f4
 800372c:	40013000 	.word	0x40013000

08003730 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <MX_TIM16_Init+0x44>)
 8003736:	4a10      	ldr	r2, [pc, #64]	; (8003778 <MX_TIM16_Init+0x48>)
 8003738:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2;
 800373a:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <MX_TIM16_Init+0x44>)
 800373c:	2202      	movs	r2, #2
 800373e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <MX_TIM16_Init+0x44>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 199;
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <MX_TIM16_Init+0x44>)
 8003748:	22c7      	movs	r2, #199	; 0xc7
 800374a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <MX_TIM16_Init+0x44>)
 800374e:	2200      	movs	r2, #0
 8003750:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <MX_TIM16_Init+0x44>)
 8003754:	2200      	movs	r2, #0
 8003756:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <MX_TIM16_Init+0x44>)
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <MX_TIM16_Init+0x44>)
 8003760:	0018      	movs	r0, r3
 8003762:	f002 fef9 	bl	8006558 <HAL_TIM_Base_Init>
 8003766:	1e03      	subs	r3, r0, #0
 8003768:	d001      	beq.n	800376e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800376a:	f000 f973 	bl	8003a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000358 	.word	0x20000358
 8003778:	40014400 	.word	0x40014400

0800377c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <MX_TIM17_Init+0x44>)
 8003782:	4a10      	ldr	r2, [pc, #64]	; (80037c4 <MX_TIM17_Init+0x48>)
 8003784:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1;
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <MX_TIM17_Init+0x44>)
 8003788:	2201      	movs	r2, #1
 800378a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <MX_TIM17_Init+0x44>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 7999;
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <MX_TIM17_Init+0x44>)
 8003794:	4a0c      	ldr	r2, [pc, #48]	; (80037c8 <MX_TIM17_Init+0x4c>)
 8003796:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <MX_TIM17_Init+0x44>)
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800379e:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <MX_TIM17_Init+0x44>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <MX_TIM17_Init+0x44>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <MX_TIM17_Init+0x44>)
 80037ac:	0018      	movs	r0, r3
 80037ae:	f002 fed3 	bl	8006558 <HAL_TIM_Base_Init>
 80037b2:	1e03      	subs	r3, r0, #0
 80037b4:	d001      	beq.n	80037ba <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80037b6:	f000 f94d 	bl	8003a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	200003a4 	.word	0x200003a4
 80037c4:	40014800 	.word	0x40014800
 80037c8:	00001f3f 	.word	0x00001f3f

080037cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <MX_USART2_UART_Init+0x94>)
 80037d2:	4a24      	ldr	r2, [pc, #144]	; (8003864 <MX_USART2_UART_Init+0x98>)
 80037d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037d6:	4b22      	ldr	r3, [pc, #136]	; (8003860 <MX_USART2_UART_Init+0x94>)
 80037d8:	22e1      	movs	r2, #225	; 0xe1
 80037da:	0252      	lsls	r2, r2, #9
 80037dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <MX_USART2_UART_Init+0x94>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037e4:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <MX_USART2_UART_Init+0x94>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <MX_USART2_UART_Init+0x94>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <MX_USART2_UART_Init+0x94>)
 80037f2:	220c      	movs	r2, #12
 80037f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <MX_USART2_UART_Init+0x94>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <MX_USART2_UART_Init+0x94>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003802:	4b17      	ldr	r3, [pc, #92]	; (8003860 <MX_USART2_UART_Init+0x94>)
 8003804:	2200      	movs	r2, #0
 8003806:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003808:	4b15      	ldr	r3, [pc, #84]	; (8003860 <MX_USART2_UART_Init+0x94>)
 800380a:	2200      	movs	r2, #0
 800380c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800380e:	4b14      	ldr	r3, [pc, #80]	; (8003860 <MX_USART2_UART_Init+0x94>)
 8003810:	2200      	movs	r2, #0
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <MX_USART2_UART_Init+0x94>)
 8003816:	0018      	movs	r0, r3
 8003818:	f003 f93c 	bl	8006a94 <HAL_UART_Init>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d001      	beq.n	8003824 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003820:	f000 f918 	bl	8003a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003824:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <MX_USART2_UART_Init+0x94>)
 8003826:	2100      	movs	r1, #0
 8003828:	0018      	movs	r0, r3
 800382a:	f003 fe4b 	bl	80074c4 <HAL_UARTEx_SetTxFifoThreshold>
 800382e:	1e03      	subs	r3, r0, #0
 8003830:	d001      	beq.n	8003836 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003832:	f000 f90f 	bl	8003a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <MX_USART2_UART_Init+0x94>)
 8003838:	2100      	movs	r1, #0
 800383a:	0018      	movs	r0, r3
 800383c:	f003 fe82 	bl	8007544 <HAL_UARTEx_SetRxFifoThreshold>
 8003840:	1e03      	subs	r3, r0, #0
 8003842:	d001      	beq.n	8003848 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003844:	f000 f906 	bl	8003a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <MX_USART2_UART_Init+0x94>)
 800384a:	0018      	movs	r0, r3
 800384c:	f003 fe00 	bl	8007450 <HAL_UARTEx_DisableFifoMode>
 8003850:	1e03      	subs	r3, r0, #0
 8003852:	d001      	beq.n	8003858 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003854:	f000 f8fe 	bl	8003a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	200003f0 	.word	0x200003f0
 8003864:	40004400 	.word	0x40004400

08003868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003868:	b590      	push	{r4, r7, lr}
 800386a:	b08b      	sub	sp, #44	; 0x2c
 800386c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386e:	2414      	movs	r4, #20
 8003870:	193b      	adds	r3, r7, r4
 8003872:	0018      	movs	r0, r3
 8003874:	2314      	movs	r3, #20
 8003876:	001a      	movs	r2, r3
 8003878:	2100      	movs	r1, #0
 800387a:	f004 f8f5 	bl	8007a68 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800387e:	4b70      	ldr	r3, [pc, #448]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 8003880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003882:	4b6f      	ldr	r3, [pc, #444]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 8003884:	2104      	movs	r1, #4
 8003886:	430a      	orrs	r2, r1
 8003888:	635a      	str	r2, [r3, #52]	; 0x34
 800388a:	4b6d      	ldr	r3, [pc, #436]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	2204      	movs	r2, #4
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003896:	4b6a      	ldr	r3, [pc, #424]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 8003898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389a:	4b69      	ldr	r3, [pc, #420]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 800389c:	2120      	movs	r1, #32
 800389e:	430a      	orrs	r2, r1
 80038a0:	635a      	str	r2, [r3, #52]	; 0x34
 80038a2:	4b67      	ldr	r3, [pc, #412]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	2220      	movs	r2, #32
 80038a8:	4013      	ands	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ae:	4b64      	ldr	r3, [pc, #400]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 80038b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b2:	4b63      	ldr	r3, [pc, #396]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 80038b4:	2101      	movs	r1, #1
 80038b6:	430a      	orrs	r2, r1
 80038b8:	635a      	str	r2, [r3, #52]	; 0x34
 80038ba:	4b61      	ldr	r3, [pc, #388]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	2201      	movs	r2, #1
 80038c0:	4013      	ands	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c6:	4b5e      	ldr	r3, [pc, #376]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 80038c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ca:	4b5d      	ldr	r3, [pc, #372]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 80038cc:	2108      	movs	r1, #8
 80038ce:	430a      	orrs	r2, r1
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34
 80038d2:	4b5b      	ldr	r3, [pc, #364]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	2208      	movs	r2, #8
 80038d8:	4013      	ands	r3, r2
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038de:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 80038e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e2:	4b57      	ldr	r3, [pc, #348]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 80038e4:	2102      	movs	r1, #2
 80038e6:	430a      	orrs	r2, r1
 80038e8:	635a      	str	r2, [r3, #52]	; 0x34
 80038ea:	4b55      	ldr	r3, [pc, #340]	; (8003a40 <MX_GPIO_Init+0x1d8>)
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	2202      	movs	r2, #2
 80038f0:	4013      	ands	r3, r2
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UserPC0_Pin|UserPC1_Pin|UserPC4_Pin|UserPC5_Pin
 80038f6:	4b53      	ldr	r3, [pc, #332]	; (8003a44 <MX_GPIO_Init+0x1dc>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	2173      	movs	r1, #115	; 0x73
 80038fc:	0018      	movs	r0, r3
 80038fe:	f001 fbc0 	bl	8005082 <HAL_GPIO_WritePin>
                          |UserPC6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8003902:	2384      	movs	r3, #132	; 0x84
 8003904:	00d9      	lsls	r1, r3, #3
 8003906:	23a0      	movs	r3, #160	; 0xa0
 8003908:	05db      	lsls	r3, r3, #23
 800390a:	2200      	movs	r2, #0
 800390c:	0018      	movs	r0, r3
 800390e:	f001 fbb8 	bl	8005082 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8003912:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <MX_GPIO_Init+0x1e0>)
 8003914:	2200      	movs	r2, #0
 8003916:	2110      	movs	r1, #16
 8003918:	0018      	movs	r0, r3
 800391a:	f001 fbb2 	bl	8005082 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Quad_1_PC12_Pin Quad_2_PC2_Pin Quad_2_PC3_Pin Quad_1_PC10_Pin */
  GPIO_InitStruct.Pin = Quad_1_PC12_Pin|Quad_2_PC2_Pin|Quad_2_PC3_Pin|Quad_1_PC10_Pin;
 800391e:	193b      	adds	r3, r7, r4
 8003920:	4a4a      	ldr	r2, [pc, #296]	; (8003a4c <MX_GPIO_Init+0x1e4>)
 8003922:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003924:	193b      	adds	r3, r7, r4
 8003926:	2200      	movs	r2, #0
 8003928:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392a:	193b      	adds	r3, r7, r4
 800392c:	2201      	movs	r2, #1
 800392e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003930:	193b      	adds	r3, r7, r4
 8003932:	4a44      	ldr	r2, [pc, #272]	; (8003a44 <MX_GPIO_Init+0x1dc>)
 8003934:	0019      	movs	r1, r3
 8003936:	0010      	movs	r0, r2
 8003938:	f001 fa22 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : UserPC0_Pin UserPC1_Pin UserPC4_Pin UserPC5_Pin
                           UserPC6_Pin */
  GPIO_InitStruct.Pin = UserPC0_Pin|UserPC1_Pin|UserPC4_Pin|UserPC5_Pin
 800393c:	193b      	adds	r3, r7, r4
 800393e:	2273      	movs	r2, #115	; 0x73
 8003940:	601a      	str	r2, [r3, #0]
                          |UserPC6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003942:	193b      	adds	r3, r7, r4
 8003944:	2201      	movs	r2, #1
 8003946:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	193b      	adds	r3, r7, r4
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	193b      	adds	r3, r7, r4
 8003950:	2200      	movs	r2, #0
 8003952:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003954:	193b      	adds	r3, r7, r4
 8003956:	4a3b      	ldr	r2, [pc, #236]	; (8003a44 <MX_GPIO_Init+0x1dc>)
 8003958:	0019      	movs	r1, r3
 800395a:	0010      	movs	r0, r2
 800395c:	f001 fa10 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003960:	193b      	adds	r3, r7, r4
 8003962:	2220      	movs	r2, #32
 8003964:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003966:	193b      	adds	r3, r7, r4
 8003968:	2201      	movs	r2, #1
 800396a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	193b      	adds	r3, r7, r4
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003972:	193b      	adds	r3, r7, r4
 8003974:	2202      	movs	r2, #2
 8003976:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003978:	193a      	adds	r2, r7, r4
 800397a:	23a0      	movs	r3, #160	; 0xa0
 800397c:	05db      	lsls	r3, r3, #23
 800397e:	0011      	movs	r1, r2
 8003980:	0018      	movs	r0, r3
 8003982:	f001 f9fd 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003986:	0021      	movs	r1, r4
 8003988:	187b      	adds	r3, r7, r1
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	00d2      	lsls	r2, r2, #3
 800398e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003990:	000c      	movs	r4, r1
 8003992:	193b      	adds	r3, r7, r4
 8003994:	2201      	movs	r2, #1
 8003996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	193b      	adds	r3, r7, r4
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	2200      	movs	r2, #0
 80039a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a4:	193a      	adds	r2, r7, r4
 80039a6:	23a0      	movs	r3, #160	; 0xa0
 80039a8:	05db      	lsls	r3, r3, #23
 80039aa:	0011      	movs	r1, r2
 80039ac:	0018      	movs	r0, r3
 80039ae:	f001 f9e7 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Quad_2_PA15_Pin */
  GPIO_InitStruct.Pin = Quad_2_PA15_Pin;
 80039b2:	193b      	adds	r3, r7, r4
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	0212      	lsls	r2, r2, #8
 80039b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ba:	193b      	adds	r3, r7, r4
 80039bc:	2200      	movs	r2, #0
 80039be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	193b      	adds	r3, r7, r4
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Quad_2_PA15_GPIO_Port, &GPIO_InitStruct);
 80039c6:	193a      	adds	r2, r7, r4
 80039c8:	23a0      	movs	r3, #160	; 0xa0
 80039ca:	05db      	lsls	r3, r3, #23
 80039cc:	0011      	movs	r1, r2
 80039ce:	0018      	movs	r0, r3
 80039d0:	f001 f9d6 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Quad_2_PD0_Pin */
  GPIO_InitStruct.Pin = Quad_2_PD0_Pin;
 80039d4:	193b      	adds	r3, r7, r4
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039da:	193b      	adds	r3, r7, r4
 80039dc:	2200      	movs	r2, #0
 80039de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e0:	193b      	adds	r3, r7, r4
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Quad_2_PD0_GPIO_Port, &GPIO_InitStruct);
 80039e6:	193b      	adds	r3, r7, r4
 80039e8:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <MX_GPIO_Init+0x1e0>)
 80039ea:	0019      	movs	r1, r3
 80039ec:	0010      	movs	r0, r2
 80039ee:	f001 f9c7 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80039f2:	193b      	adds	r3, r7, r4
 80039f4:	2210      	movs	r2, #16
 80039f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f8:	193b      	adds	r3, r7, r4
 80039fa:	2201      	movs	r2, #1
 80039fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	193b      	adds	r3, r7, r4
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a04:	193b      	adds	r3, r7, r4
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a0a:	193b      	adds	r3, r7, r4
 8003a0c:	4a0e      	ldr	r2, [pc, #56]	; (8003a48 <MX_GPIO_Init+0x1e0>)
 8003a0e:	0019      	movs	r1, r3
 8003a10:	0010      	movs	r0, r2
 8003a12:	f001 f9b5 	bl	8004d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : Quad_A_PB7_Pin Quad_B_PB9_Pin */
  GPIO_InitStruct.Pin = Quad_A_PB7_Pin|Quad_B_PB9_Pin;
 8003a16:	0021      	movs	r1, r4
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	22a0      	movs	r2, #160	; 0xa0
 8003a1c:	0092      	lsls	r2, r2, #2
 8003a1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a20:	187b      	adds	r3, r7, r1
 8003a22:	2200      	movs	r2, #0
 8003a24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a26:	187b      	adds	r3, r7, r1
 8003a28:	2201      	movs	r2, #1
 8003a2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2c:	187b      	adds	r3, r7, r1
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <MX_GPIO_Init+0x1e8>)
 8003a30:	0019      	movs	r1, r3
 8003a32:	0010      	movs	r0, r2
 8003a34:	f001 f9a4 	bl	8004d80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b00b      	add	sp, #44	; 0x2c
 8003a3e:	bd90      	pop	{r4, r7, pc}
 8003a40:	40021000 	.word	0x40021000
 8003a44:	50000800 	.word	0x50000800
 8003a48:	50000c00 	.word	0x50000c00
 8003a4c:	0000140c 	.word	0x0000140c
 8003a50:	50000400 	.word	0x50000400

08003a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a58:	b672      	cpsid	i
}
 8003a5a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a5c:	e7fe      	b.n	8003a5c <Error_Handler+0x8>
	...

08003a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <HAL_MspInit+0x44>)
 8003a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6a:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <HAL_MspInit+0x44>)
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
 8003a72:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <HAL_MspInit+0x44>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2201      	movs	r2, #1
 8003a78:	4013      	ands	r3, r2
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_MspInit+0x44>)
 8003a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_MspInit+0x44>)
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	0549      	lsls	r1, r1, #21
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_MspInit+0x44>)
 8003a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	055b      	lsls	r3, r3, #21
 8003a94:	4013      	ands	r3, r2
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b002      	add	sp, #8
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b08b      	sub	sp, #44	; 0x2c
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	2414      	movs	r4, #20
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	2314      	movs	r3, #20
 8003ab8:	001a      	movs	r2, r3
 8003aba:	2100      	movs	r1, #0
 8003abc:	f003 ffd4 	bl	8007a68 <memset>
  if(hadc->Instance==ADC1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <HAL_ADC_MspInit+0x80>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d129      	bne.n	8003b1e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <HAL_ADC_MspInit+0x84>)
 8003acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ace:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <HAL_ADC_MspInit+0x84>)
 8003ad0:	2180      	movs	r1, #128	; 0x80
 8003ad2:	0349      	lsls	r1, r1, #13
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <HAL_ADC_MspInit+0x84>)
 8003ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	035b      	lsls	r3, r3, #13
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae6:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <HAL_ADC_MspInit+0x84>)
 8003ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_ADC_MspInit+0x84>)
 8003aec:	2101      	movs	r1, #1
 8003aee:	430a      	orrs	r2, r1
 8003af0:	635a      	str	r2, [r3, #52]	; 0x34
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_ADC_MspInit+0x84>)
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	2201      	movs	r2, #1
 8003af8:	4013      	ands	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003afe:	193b      	adds	r3, r7, r4
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b04:	193b      	adds	r3, r7, r4
 8003b06:	2203      	movs	r2, #3
 8003b08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	193b      	adds	r3, r7, r4
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b10:	193a      	adds	r2, r7, r4
 8003b12:	23a0      	movs	r3, #160	; 0xa0
 8003b14:	05db      	lsls	r3, r3, #23
 8003b16:	0011      	movs	r1, r2
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f001 f931 	bl	8004d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b00b      	add	sp, #44	; 0x2c
 8003b24:	bd90      	pop	{r4, r7, pc}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	40012400 	.word	0x40012400
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b08b      	sub	sp, #44	; 0x2c
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	2414      	movs	r4, #20
 8003b3a:	193b      	adds	r3, r7, r4
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	2314      	movs	r3, #20
 8003b40:	001a      	movs	r2, r3
 8003b42:	2100      	movs	r1, #0
 8003b44:	f003 ff90 	bl	8007a68 <memset>
  if(hspi->Instance==SPI1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <HAL_SPI_MspInit+0x8c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d130      	bne.n	8003bb4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b52:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_SPI_MspInit+0x90>)
 8003b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b56:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <HAL_SPI_MspInit+0x90>)
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	0149      	lsls	r1, r1, #5
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8003b60:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <HAL_SPI_MspInit+0x90>)
 8003b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	015b      	lsls	r3, r3, #5
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <HAL_SPI_MspInit+0x90>)
 8003b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <HAL_SPI_MspInit+0x90>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	430a      	orrs	r2, r1
 8003b78:	635a      	str	r2, [r3, #52]	; 0x34
 8003b7a:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <HAL_SPI_MspInit+0x90>)
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 8003b86:	0021      	movs	r1, r4
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	2292      	movs	r2, #146	; 0x92
 8003b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	2202      	movs	r2, #2
 8003b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	187b      	adds	r3, r7, r1
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	187b      	adds	r3, r7, r1
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba6:	187a      	adds	r2, r7, r1
 8003ba8:	23a0      	movs	r3, #160	; 0xa0
 8003baa:	05db      	lsls	r3, r3, #23
 8003bac:	0011      	movs	r1, r2
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f001 f8e6 	bl	8004d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b00b      	add	sp, #44	; 0x2c
 8003bba:	bd90      	pop	{r4, r7, pc}
 8003bbc:	40013000 	.word	0x40013000
 8003bc0:	40021000 	.word	0x40021000

08003bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_TIM_Base_MspInit+0x80>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d116      	bne.n	8003c04 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <HAL_TIM_Base_MspInit+0x84>)
 8003bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_TIM_Base_MspInit+0x84>)
 8003bdc:	2180      	movs	r1, #128	; 0x80
 8003bde:	0289      	lsls	r1, r1, #10
 8003be0:	430a      	orrs	r2, r1
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <HAL_TIM_Base_MspInit+0x84>)
 8003be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	029b      	lsls	r3, r3, #10
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	2015      	movs	r0, #21
 8003bf8:	f001 f890 	bl	8004d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003bfc:	2015      	movs	r0, #21
 8003bfe:	f001 f8a2 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003c02:	e01a      	b.n	8003c3a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM17)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a10      	ldr	r2, [pc, #64]	; (8003c4c <HAL_TIM_Base_MspInit+0x88>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d115      	bne.n	8003c3a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <HAL_TIM_Base_MspInit+0x84>)
 8003c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <HAL_TIM_Base_MspInit+0x84>)
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	02c9      	lsls	r1, r1, #11
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <HAL_TIM_Base_MspInit+0x84>)
 8003c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	02db      	lsls	r3, r3, #11
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2016      	movs	r0, #22
 8003c30:	f001 f874 	bl	8004d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003c34:	2016      	movs	r0, #22
 8003c36:	f001 f886 	bl	8004d46 <HAL_NVIC_EnableIRQ>
}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b004      	add	sp, #16
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	40014400 	.word	0x40014400
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40014800 	.word	0x40014800

08003c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c50:	b590      	push	{r4, r7, lr}
 8003c52:	b097      	sub	sp, #92	; 0x5c
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	2344      	movs	r3, #68	; 0x44
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	2314      	movs	r3, #20
 8003c60:	001a      	movs	r2, r3
 8003c62:	2100      	movs	r1, #0
 8003c64:	f003 ff00 	bl	8007a68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c68:	2410      	movs	r4, #16
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	2334      	movs	r3, #52	; 0x34
 8003c70:	001a      	movs	r2, r3
 8003c72:	2100      	movs	r1, #0
 8003c74:	f003 fef8 	bl	8007a68 <memset>
  if(huart->Instance==USART2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <HAL_UART_MspInit+0xb8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d13e      	bne.n	8003d00 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c82:	193b      	adds	r3, r7, r4
 8003c84:	2202      	movs	r2, #2
 8003c86:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c88:	193b      	adds	r3, r7, r4
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c8e:	193b      	adds	r3, r7, r4
 8003c90:	0018      	movs	r0, r3
 8003c92:	f001 ff23 	bl	8005adc <HAL_RCCEx_PeriphCLKConfig>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003c9a:	f7ff fedb 	bl	8003a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_UART_MspInit+0xbc>)
 8003ca0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <HAL_UART_MspInit+0xbc>)
 8003ca4:	2180      	movs	r1, #128	; 0x80
 8003ca6:	0289      	lsls	r1, r1, #10
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cac:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <HAL_UART_MspInit+0xbc>)
 8003cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	029b      	lsls	r3, r3, #10
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <HAL_UART_MspInit+0xbc>)
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_UART_MspInit+0xbc>)
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <HAL_UART_MspInit+0xbc>)
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003cd2:	2144      	movs	r1, #68	; 0x44
 8003cd4:	187b      	adds	r3, r7, r1
 8003cd6:	220c      	movs	r2, #12
 8003cd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cda:	187b      	adds	r3, r7, r1
 8003cdc:	2202      	movs	r2, #2
 8003cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	2200      	movs	r2, #0
 8003cea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	2201      	movs	r2, #1
 8003cf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf2:	187a      	adds	r2, r7, r1
 8003cf4:	23a0      	movs	r3, #160	; 0xa0
 8003cf6:	05db      	lsls	r3, r3, #23
 8003cf8:	0011      	movs	r1, r2
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f001 f840 	bl	8004d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b017      	add	sp, #92	; 0x5c
 8003d06:	bd90      	pop	{r4, r7, pc}
 8003d08:	40004400 	.word	0x40004400
 8003d0c:	40021000 	.word	0x40021000

08003d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d14:	e7fe      	b.n	8003d14 <NMI_Handler+0x4>

08003d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d1a:	e7fe      	b.n	8003d1a <HardFault_Handler+0x4>

08003d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d34:	f000 f974 	bl	8004020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <TIM16_IRQHandler+0x14>)
 8003d46:	0018      	movs	r0, r3
 8003d48:	f002 fcba 	bl	80066c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	20000358 	.word	0x20000358

08003d58 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <TIM17_IRQHandler+0x14>)
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f002 fcae 	bl	80066c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	200003a4 	.word	0x200003a4

08003d70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  return 1;
 8003d74:	2301      	movs	r3, #1
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_kill>:

int _kill(int pid, int sig)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d86:	f003 fed7 	bl	8007b38 <__errno>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	2216      	movs	r2, #22
 8003d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8003d90:	2301      	movs	r3, #1
 8003d92:	425b      	negs	r3, r3
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <_exit>:

void _exit (int status)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003da4:	2301      	movs	r3, #1
 8003da6:	425a      	negs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	0011      	movs	r1, r2
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7ff ffe5 	bl	8003d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003db2:	e7fe      	b.n	8003db2 <_exit+0x16>

08003db4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e00a      	b.n	8003ddc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dc6:	e000      	b.n	8003dca <_read+0x16>
 8003dc8:	bf00      	nop
 8003dca:	0001      	movs	r1, r0
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	60ba      	str	r2, [r7, #8]
 8003dd2:	b2ca      	uxtb	r2, r1
 8003dd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	dbf0      	blt.n	8003dc6 <_read+0x12>
  }

  return len;
 8003de4:	687b      	ldr	r3, [r7, #4]
}
 8003de6:	0018      	movs	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b006      	add	sp, #24
 8003dec:	bd80      	pop	{r7, pc}

08003dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	e009      	b.n	8003e14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	60ba      	str	r2, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	e000      	b.n	8003e0e <_write+0x20>
 8003e0c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	3301      	adds	r3, #1
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	dbf1      	blt.n	8003e00 <_write+0x12>
  }
  return len;
 8003e1c:	687b      	ldr	r3, [r7, #4]
}
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b006      	add	sp, #24
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <_close>:

int _close(int file)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	425b      	negs	r3, r3
}
 8003e32:	0018      	movs	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b002      	add	sp, #8
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	0192      	lsls	r2, r2, #6
 8003e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b002      	add	sp, #8
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <_isatty>:

int _isatty(int file)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e5e:	2301      	movs	r3, #1
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b002      	add	sp, #8
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <_sbrk+0x5c>)
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <_sbrk+0x60>)
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <_sbrk+0x64>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e9c:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <_sbrk+0x64>)
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <_sbrk+0x68>)
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <_sbrk+0x64>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	18d3      	adds	r3, r2, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d207      	bcs.n	8003ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eb0:	f003 fe42 	bl	8007b38 <__errno>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	425b      	negs	r3, r3
 8003ebe:	e009      	b.n	8003ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ec0:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <_sbrk+0x64>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <_sbrk+0x64>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	18d2      	adds	r2, r2, r3
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <_sbrk+0x64>)
 8003ed0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b006      	add	sp, #24
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20009000 	.word	0x20009000
 8003ee0:	00000400 	.word	0x00000400
 8003ee4:	20000484 	.word	0x20000484
 8003ee8:	200005d8 	.word	0x200005d8

08003eec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ef8:	480d      	ldr	r0, [pc, #52]	; (8003f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003efa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003efc:	f7ff fff6 	bl	8003eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f00:	480c      	ldr	r0, [pc, #48]	; (8003f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f02:	490d      	ldr	r1, [pc, #52]	; (8003f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f04:	4a0d      	ldr	r2, [pc, #52]	; (8003f3c <LoopForever+0xe>)
  movs r3, #0
 8003f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f08:	e002      	b.n	8003f10 <LoopCopyDataInit>

08003f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f0e:	3304      	adds	r3, #4

08003f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f14:	d3f9      	bcc.n	8003f0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f18:	4c0a      	ldr	r4, [pc, #40]	; (8003f44 <LoopForever+0x16>)
  movs r3, #0
 8003f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f1c:	e001      	b.n	8003f22 <LoopFillZerobss>

08003f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f20:	3204      	adds	r2, #4

08003f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f24:	d3fb      	bcc.n	8003f1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003f26:	f003 fe0d 	bl	8007b44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003f2a:	f7ff faed 	bl	8003508 <main>

08003f2e <LoopForever>:

LoopForever:
  b LoopForever
 8003f2e:	e7fe      	b.n	8003f2e <LoopForever>
  ldr   r0, =_estack
 8003f30:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f38:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003f3c:	080088fc 	.word	0x080088fc
  ldr r2, =_sbss
 8003f40:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003f44:	200005d8 	.word	0x200005d8

08003f48 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f48:	e7fe      	b.n	8003f48 <ADC1_COMP_IRQHandler>
	...

08003f4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f52:	1dfb      	adds	r3, r7, #7
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_Init+0x3c>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_Init+0x3c>)
 8003f5e:	2180      	movs	r1, #128	; 0x80
 8003f60:	0049      	lsls	r1, r1, #1
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f66:	2000      	movs	r0, #0
 8003f68:	f000 f810 	bl	8003f8c <HAL_InitTick>
 8003f6c:	1e03      	subs	r3, r0, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003f70:	1dfb      	adds	r3, r7, #7
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e001      	b.n	8003f7c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003f78:	f7ff fd72 	bl	8003a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f7c:	1dfb      	adds	r3, r7, #7
 8003f7e:	781b      	ldrb	r3, [r3, #0]
}
 8003f80:	0018      	movs	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b002      	add	sp, #8
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40022000 	.word	0x40022000

08003f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f8c:	b590      	push	{r4, r7, lr}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f94:	230f      	movs	r3, #15
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <HAL_InitTick+0x88>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d02b      	beq.n	8003ffc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003fa4:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <HAL_InitTick+0x8c>)
 8003fa6:	681c      	ldr	r4, [r3, #0]
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <HAL_InitTick+0x88>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	0019      	movs	r1, r3
 8003fae:	23fa      	movs	r3, #250	; 0xfa
 8003fb0:	0098      	lsls	r0, r3, #2
 8003fb2:	f7fc f8b1 	bl	8000118 <__udivsi3>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	0019      	movs	r1, r3
 8003fba:	0020      	movs	r0, r4
 8003fbc:	f7fc f8ac 	bl	8000118 <__udivsi3>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 fecf 	bl	8004d66 <HAL_SYSTICK_Config>
 8003fc8:	1e03      	subs	r3, r0, #0
 8003fca:	d112      	bne.n	8003ff2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d80a      	bhi.n	8003fe8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	425b      	negs	r3, r3
 8003fd8:	2200      	movs	r2, #0
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f000 fe9e 	bl	8004d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_InitTick+0x90>)
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e00d      	b.n	8004004 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003fe8:	230f      	movs	r3, #15
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
 8003ff0:	e008      	b.n	8004004 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ff2:	230f      	movs	r3, #15
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e003      	b.n	8004004 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ffc:	230f      	movs	r3, #15
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004004:	230f      	movs	r3, #15
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	781b      	ldrb	r3, [r3, #0]
}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b005      	add	sp, #20
 8004010:	bd90      	pop	{r4, r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	20000010 	.word	0x20000010
 8004018:	20000008 	.word	0x20000008
 800401c:	2000000c 	.word	0x2000000c

08004020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_IncTick+0x1c>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	001a      	movs	r2, r3
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_IncTick+0x20>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	18d2      	adds	r2, r2, r3
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_IncTick+0x20>)
 8004032:	601a      	str	r2, [r3, #0]
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	20000010 	.word	0x20000010
 8004040:	20000488 	.word	0x20000488

08004044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  return uwTick;
 8004048:	4b02      	ldr	r3, [pc, #8]	; (8004054 <HAL_GetTick+0x10>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	20000488 	.word	0x20000488

08004058 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a05      	ldr	r2, [pc, #20]	; (800407c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004068:	401a      	ands	r2, r3
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b002      	add	sp, #8
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	fe3fffff 	.word	0xfe3fffff

08004080 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	23e0      	movs	r3, #224	; 0xe0
 800408e:	045b      	lsls	r3, r3, #17
 8004090:	4013      	ands	r3, r2
}
 8004092:	0018      	movs	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	b002      	add	sp, #8
 8004098:	bd80      	pop	{r7, pc}

0800409a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	2104      	movs	r1, #4
 80040ae:	400a      	ands	r2, r1
 80040b0:	2107      	movs	r1, #7
 80040b2:	4091      	lsls	r1, r2
 80040b4:	000a      	movs	r2, r1
 80040b6:	43d2      	mvns	r2, r2
 80040b8:	401a      	ands	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2104      	movs	r1, #4
 80040be:	400b      	ands	r3, r1
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4099      	lsls	r1, r3
 80040c4:	000b      	movs	r3, r1
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b004      	add	sp, #16
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	2104      	movs	r1, #4
 80040e6:	400a      	ands	r2, r1
 80040e8:	2107      	movs	r1, #7
 80040ea:	4091      	lsls	r1, r2
 80040ec:	000a      	movs	r2, r1
 80040ee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2104      	movs	r1, #4
 80040f4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80040f6:	40da      	lsrs	r2, r3
 80040f8:	0013      	movs	r3, r2
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b002      	add	sp, #8
 8004100:	bd80      	pop	{r7, pc}

08004102 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	211f      	movs	r1, #31
 8004116:	400a      	ands	r2, r1
 8004118:	210f      	movs	r1, #15
 800411a:	4091      	lsls	r1, r2
 800411c:	000a      	movs	r2, r1
 800411e:	43d2      	mvns	r2, r2
 8004120:	401a      	ands	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	210f      	movs	r1, #15
 8004128:	4019      	ands	r1, r3
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	201f      	movs	r0, #31
 800412e:	4003      	ands	r3, r0
 8004130:	4099      	lsls	r1, r3
 8004132:	000b      	movs	r3, r1
 8004134:	431a      	orrs	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	b004      	add	sp, #16
 8004140:	bd80      	pop	{r7, pc}

08004142 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	035b      	lsls	r3, r3, #13
 8004154:	0b5b      	lsrs	r3, r3, #13
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}

08004164 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	0352      	lsls	r2, r2, #13
 8004176:	0b52      	lsrs	r2, r2, #13
 8004178:	43d2      	mvns	r2, r2
 800417a:	401a      	ands	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	46bd      	mov	sp, r7
 8004184:	b002      	add	sp, #8
 8004186:	bd80      	pop	{r7, pc}

08004188 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	0212      	lsls	r2, r2, #8
 800419c:	43d2      	mvns	r2, r2
 800419e:	401a      	ands	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	400b      	ands	r3, r1
 80041a8:	4904      	ldr	r1, [pc, #16]	; (80041bc <LL_ADC_SetChannelSamplingTime+0x34>)
 80041aa:	400b      	ands	r3, r1
 80041ac:	431a      	orrs	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b004      	add	sp, #16
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	07ffff00 	.word	0x07ffff00

080041c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a05      	ldr	r2, [pc, #20]	; (80041e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	2280      	movs	r2, #128	; 0x80
 80041d2:	0552      	lsls	r2, r2, #21
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46bd      	mov	sp, r7
 80041de:	b002      	add	sp, #8
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	6fffffe8 	.word	0x6fffffe8

080041e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	055b      	lsls	r3, r3, #21
 80041f8:	401a      	ands	r2, r3
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	055b      	lsls	r3, r3, #21
 80041fe:	429a      	cmp	r2, r3
 8004200:	d101      	bne.n	8004206 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8004206:	2300      	movs	r3, #0
}
 8004208:	0018      	movs	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	b002      	add	sp, #8
 800420e:	bd80      	pop	{r7, pc}

08004210 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <LL_ADC_Enable+0x20>)
 800421e:	4013      	ands	r3, r2
 8004220:	2201      	movs	r2, #1
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}
 8004230:	7fffffe8 	.word	0x7fffffe8

08004234 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2201      	movs	r2, #1
 8004242:	4013      	ands	r3, r2
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <LL_ADC_IsEnabled+0x18>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <LL_ADC_IsEnabled+0x1a>
 800424c:	2300      	movs	r3, #0
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b002      	add	sp, #8
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <LL_ADC_REG_StartConversion+0x20>)
 8004266:	4013      	ands	r3, r2
 8004268:	2204      	movs	r2, #4
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}
 8004278:	7fffffe8 	.word	0x7fffffe8

0800427c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2204      	movs	r2, #4
 800428a:	4013      	ands	r3, r2
 800428c:	2b04      	cmp	r3, #4
 800428e:	d101      	bne.n	8004294 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004294:	2300      	movs	r3, #0
}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b002      	add	sp, #8
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042a8:	231f      	movs	r3, #31
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e17f      	b.n	80045c6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7ff fbe9 	bl	8003aa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2254      	movs	r2, #84	; 0x54
 80042e0:	2100      	movs	r1, #0
 80042e2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f7ff ff7d 	bl	80041e8 <LL_ADC_IsInternalRegulatorEnabled>
 80042ee:	1e03      	subs	r3, r0, #0
 80042f0:	d115      	bne.n	800431e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f7ff ff62 	bl	80041c0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042fc:	4bb4      	ldr	r3, [pc, #720]	; (80045d0 <HAL_ADC_Init+0x330>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	49b4      	ldr	r1, [pc, #720]	; (80045d4 <HAL_ADC_Init+0x334>)
 8004302:	0018      	movs	r0, r3
 8004304:	f7fb ff08 	bl	8000118 <__udivsi3>
 8004308:	0003      	movs	r3, r0
 800430a:	3301      	adds	r3, #1
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004310:	e002      	b.n	8004318 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3b01      	subs	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f9      	bne.n	8004312 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0018      	movs	r0, r3
 8004324:	f7ff ff60 	bl	80041e8 <LL_ADC_IsInternalRegulatorEnabled>
 8004328:	1e03      	subs	r3, r0, #0
 800432a:	d10f      	bne.n	800434c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	2210      	movs	r2, #16
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	2201      	movs	r2, #1
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004344:	231f      	movs	r3, #31
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	0018      	movs	r0, r3
 8004352:	f7ff ff93 	bl	800427c <LL_ADC_REG_IsConversionOngoing>
 8004356:	0003      	movs	r3, r0
 8004358:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	2210      	movs	r2, #16
 8004360:	4013      	ands	r3, r2
 8004362:	d000      	beq.n	8004366 <HAL_ADC_Init+0xc6>
 8004364:	e122      	b.n	80045ac <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d000      	beq.n	800436e <HAL_ADC_Init+0xce>
 800436c:	e11e      	b.n	80045ac <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	4a99      	ldr	r2, [pc, #612]	; (80045d8 <HAL_ADC_Init+0x338>)
 8004374:	4013      	ands	r3, r2
 8004376:	2202      	movs	r2, #2
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	0018      	movs	r0, r3
 8004384:	f7ff ff56 	bl	8004234 <LL_ADC_IsEnabled>
 8004388:	1e03      	subs	r3, r0, #0
 800438a:	d000      	beq.n	800438e <HAL_ADC_Init+0xee>
 800438c:	e0ad      	b.n	80044ea <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	7e1b      	ldrb	r3, [r3, #24]
 8004396:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004398:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7e5b      	ldrb	r3, [r3, #25]
 800439e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80043a0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	7e9b      	ldrb	r3, [r3, #26]
 80043a6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80043a8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_ADC_Init+0x118>
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	015b      	lsls	r3, r3, #5
 80043b6:	e000      	b.n	80043ba <HAL_ADC_Init+0x11a>
 80043b8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80043ba:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80043c0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	da04      	bge.n	80043d4 <HAL_ADC_Init+0x134>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	085b      	lsrs	r3, r3, #1
 80043d2:	e001      	b.n	80043d8 <HAL_ADC_Init+0x138>
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80043d8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	212c      	movs	r1, #44	; 0x2c
 80043de:	5c5b      	ldrb	r3, [r3, r1]
 80043e0:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80043e2:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	5c9b      	ldrb	r3, [r3, r2]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d115      	bne.n	8004420 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	7e9b      	ldrb	r3, [r3, #26]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d105      	bne.n	8004408 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2280      	movs	r2, #128	; 0x80
 8004400:	0252      	lsls	r2, r2, #9
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	e00b      	b.n	8004420 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	2220      	movs	r2, #32
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004418:	2201      	movs	r2, #1
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800442c:	23e0      	movs	r3, #224	; 0xe0
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004436:	4313      	orrs	r3, r2
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a65      	ldr	r2, [pc, #404]	; (80045dc <HAL_ADC_Init+0x33c>)
 8004446:	4013      	ands	r3, r2
 8004448:	0019      	movs	r1, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	430a      	orrs	r2, r1
 8004452:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	0f9b      	lsrs	r3, r3, #30
 800445a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004460:	4313      	orrs	r3, r2
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	223c      	movs	r2, #60	; 0x3c
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d111      	bne.n	8004496 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	0f9b      	lsrs	r3, r3, #30
 8004478:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800447e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004484:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800448a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	2201      	movs	r2, #1
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	4a50      	ldr	r2, [pc, #320]	; (80045e0 <HAL_ADC_Init+0x340>)
 800449e:	4013      	ands	r3, r2
 80044a0:	0019      	movs	r1, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	23c0      	movs	r3, #192	; 0xc0
 80044b2:	061b      	lsls	r3, r3, #24
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d018      	beq.n	80044ea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	05db      	lsls	r3, r3, #23
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d012      	beq.n	80044ea <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	061b      	lsls	r3, r3, #24
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d00c      	beq.n	80044ea <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80044d0:	4b44      	ldr	r3, [pc, #272]	; (80045e4 <HAL_ADC_Init+0x344>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a44      	ldr	r2, [pc, #272]	; (80045e8 <HAL_ADC_Init+0x348>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	0019      	movs	r1, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	23f0      	movs	r3, #240	; 0xf0
 80044e0:	039b      	lsls	r3, r3, #14
 80044e2:	401a      	ands	r2, r3
 80044e4:	4b3f      	ldr	r3, [pc, #252]	; (80045e4 <HAL_ADC_Init+0x344>)
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6818      	ldr	r0, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	001a      	movs	r2, r3
 80044f4:	2100      	movs	r1, #0
 80044f6:	f7ff fdd0 	bl	800409a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	493a      	ldr	r1, [pc, #232]	; (80045ec <HAL_ADC_Init+0x34c>)
 8004504:	001a      	movs	r2, r3
 8004506:	f7ff fdc8 	bl	800409a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2110      	movs	r1, #16
 800451e:	4249      	negs	r1, r1
 8004520:	430a      	orrs	r2, r1
 8004522:	629a      	str	r2, [r3, #40]	; 0x28
 8004524:	e018      	b.n	8004558 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	039b      	lsls	r3, r3, #14
 800452e:	429a      	cmp	r2, r3
 8004530:	d112      	bne.n	8004558 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	3b01      	subs	r3, #1
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	221c      	movs	r2, #28
 8004542:	4013      	ands	r3, r2
 8004544:	2210      	movs	r2, #16
 8004546:	4252      	negs	r2, r2
 8004548:	409a      	lsls	r2, r3
 800454a:	0011      	movs	r1, r2
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2100      	movs	r1, #0
 800455e:	0018      	movs	r0, r3
 8004560:	f7ff fdb8 	bl	80040d4 <LL_ADC_GetSamplingTimeCommonChannels>
 8004564:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800456a:	429a      	cmp	r2, r3
 800456c:	d10b      	bne.n	8004586 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	2203      	movs	r2, #3
 800457a:	4393      	bics	r3, r2
 800457c:	2201      	movs	r2, #1
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004584:	e01c      	b.n	80045c0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	2212      	movs	r2, #18
 800458c:	4393      	bics	r3, r2
 800458e:	2210      	movs	r2, #16
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	2201      	movs	r2, #1
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80045a2:	231f      	movs	r3, #31
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	2201      	movs	r2, #1
 80045a8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045aa:	e009      	b.n	80045c0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b0:	2210      	movs	r2, #16
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045b8:	231f      	movs	r3, #31
 80045ba:	18fb      	adds	r3, r7, r3
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80045c0:	231f      	movs	r3, #31
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	781b      	ldrb	r3, [r3, #0]
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b008      	add	sp, #32
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	20000008 	.word	0x20000008
 80045d4:	00030d40 	.word	0x00030d40
 80045d8:	fffffefd 	.word	0xfffffefd
 80045dc:	fffe0201 	.word	0xfffe0201
 80045e0:	1ffffc02 	.word	0x1ffffc02
 80045e4:	40012708 	.word	0x40012708
 80045e8:	ffc3ffff 	.word	0xffc3ffff
 80045ec:	07ffff04 	.word	0x07ffff04

080045f0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80045f0:	b5b0      	push	{r4, r5, r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7ff fe3d 	bl	800427c <LL_ADC_REG_IsConversionOngoing>
 8004602:	1e03      	subs	r3, r0, #0
 8004604:	d15f      	bne.n	80046c6 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2254      	movs	r2, #84	; 0x54
 800460a:	5c9b      	ldrb	r3, [r3, r2]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_ADC_Start_IT+0x24>
 8004610:	2302      	movs	r3, #2
 8004612:	e05f      	b.n	80046d4 <HAL_ADC_Start_IT+0xe4>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2254      	movs	r2, #84	; 0x54
 8004618:	2101      	movs	r1, #1
 800461a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800461c:	250f      	movs	r5, #15
 800461e:	197c      	adds	r4, r7, r5
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	0018      	movs	r0, r3
 8004624:	f000 fa48 	bl	8004ab8 <ADC_Enable>
 8004628:	0003      	movs	r3, r0
 800462a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800462c:	197b      	adds	r3, r7, r5
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d143      	bne.n	80046bc <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	4a28      	ldr	r2, [pc, #160]	; (80046dc <HAL_ADC_Start_IT+0xec>)
 800463a:	4013      	ands	r3, r2
 800463c:	2280      	movs	r2, #128	; 0x80
 800463e:	0052      	lsls	r2, r2, #1
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	221c      	movs	r2, #28
 8004652:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2254      	movs	r2, #84	; 0x54
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	211c      	movs	r1, #28
 8004668:	438a      	bics	r2, r1
 800466a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d108      	bne.n	8004686 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2108      	movs	r1, #8
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]
          break;
 8004684:	e008      	b.n	8004698 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2104      	movs	r1, #4
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
          break;
 8004696:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2110      	movs	r1, #16
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7ff fdcf 	bl	8004258 <LL_ADC_REG_StartConversion>
 80046ba:	e008      	b.n	80046ce <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2254      	movs	r2, #84	; 0x54
 80046c0:	2100      	movs	r1, #0
 80046c2:	5499      	strb	r1, [r3, r2]
 80046c4:	e003      	b.n	80046ce <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046c6:	230f      	movs	r3, #15
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	2202      	movs	r2, #2
 80046cc:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80046ce:	230f      	movs	r3, #15
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	781b      	ldrb	r3, [r3, #0]
}
 80046d4:	0018      	movs	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b004      	add	sp, #16
 80046da:	bdb0      	pop	{r4, r5, r7, pc}
 80046dc:	fffff0fe 	.word	0xfffff0fe

080046e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80046ee:	0018      	movs	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b002      	add	sp, #8
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	46bd      	mov	sp, r7
 8004702:	b002      	add	sp, #8
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004712:	2317      	movs	r3, #23
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	2200      	movs	r2, #0
 8004718:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2254      	movs	r2, #84	; 0x54
 8004722:	5c9b      	ldrb	r3, [r3, r2]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_ADC_ConfigChannel+0x24>
 8004728:	2302      	movs	r3, #2
 800472a:	e1c0      	b.n	8004aae <HAL_ADC_ConfigChannel+0x3a6>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2254      	movs	r2, #84	; 0x54
 8004730:	2101      	movs	r1, #1
 8004732:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	0018      	movs	r0, r3
 800473a:	f7ff fd9f 	bl	800427c <LL_ADC_REG_IsConversionOngoing>
 800473e:	1e03      	subs	r3, r0, #0
 8004740:	d000      	beq.n	8004744 <HAL_ADC_ConfigChannel+0x3c>
 8004742:	e1a3      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d100      	bne.n	800474e <HAL_ADC_ConfigChannel+0x46>
 800474c:	e143      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	429a      	cmp	r2, r3
 8004758:	d004      	beq.n	8004764 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800475e:	4ac1      	ldr	r2, [pc, #772]	; (8004a64 <HAL_ADC_ConfigChannel+0x35c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0019      	movs	r1, r3
 800476e:	0010      	movs	r0, r2
 8004770:	f7ff fce7 	bl	8004142 <LL_ADC_REG_SetSequencerChAdd>
 8004774:	e0c9      	b.n	800490a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	211f      	movs	r1, #31
 8004780:	400b      	ands	r3, r1
 8004782:	210f      	movs	r1, #15
 8004784:	4099      	lsls	r1, r3
 8004786:	000b      	movs	r3, r1
 8004788:	43db      	mvns	r3, r3
 800478a:	4013      	ands	r3, r2
 800478c:	0019      	movs	r1, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	035b      	lsls	r3, r3, #13
 8004794:	0b5b      	lsrs	r3, r3, #13
 8004796:	d105      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x9c>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	0e9b      	lsrs	r3, r3, #26
 800479e:	221f      	movs	r2, #31
 80047a0:	4013      	ands	r3, r2
 80047a2:	e098      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2201      	movs	r2, #1
 80047aa:	4013      	ands	r3, r2
 80047ac:	d000      	beq.n	80047b0 <HAL_ADC_ConfigChannel+0xa8>
 80047ae:	e091      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x1cc>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2202      	movs	r2, #2
 80047b6:	4013      	ands	r3, r2
 80047b8:	d000      	beq.n	80047bc <HAL_ADC_ConfigChannel+0xb4>
 80047ba:	e089      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x1c8>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2204      	movs	r2, #4
 80047c2:	4013      	ands	r3, r2
 80047c4:	d000      	beq.n	80047c8 <HAL_ADC_ConfigChannel+0xc0>
 80047c6:	e081      	b.n	80048cc <HAL_ADC_ConfigChannel+0x1c4>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2208      	movs	r2, #8
 80047ce:	4013      	ands	r3, r2
 80047d0:	d000      	beq.n	80047d4 <HAL_ADC_ConfigChannel+0xcc>
 80047d2:	e079      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x1c0>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2210      	movs	r2, #16
 80047da:	4013      	ands	r3, r2
 80047dc:	d000      	beq.n	80047e0 <HAL_ADC_ConfigChannel+0xd8>
 80047de:	e071      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x1bc>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2220      	movs	r2, #32
 80047e6:	4013      	ands	r3, r2
 80047e8:	d000      	beq.n	80047ec <HAL_ADC_ConfigChannel+0xe4>
 80047ea:	e069      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x1b8>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2240      	movs	r2, #64	; 0x40
 80047f2:	4013      	ands	r3, r2
 80047f4:	d000      	beq.n	80047f8 <HAL_ADC_ConfigChannel+0xf0>
 80047f6:	e061      	b.n	80048bc <HAL_ADC_ConfigChannel+0x1b4>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2280      	movs	r2, #128	; 0x80
 80047fe:	4013      	ands	r3, r2
 8004800:	d000      	beq.n	8004804 <HAL_ADC_ConfigChannel+0xfc>
 8004802:	e059      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x1b0>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	4013      	ands	r3, r2
 800480e:	d151      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x1ac>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	2380      	movs	r3, #128	; 0x80
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4013      	ands	r3, r2
 800481a:	d149      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x1a8>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2380      	movs	r3, #128	; 0x80
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4013      	ands	r3, r2
 8004826:	d141      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x1a4>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	4013      	ands	r3, r2
 8004832:	d139      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x1a0>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	015b      	lsls	r3, r3, #5
 800483c:	4013      	ands	r3, r2
 800483e:	d131      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x19c>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	019b      	lsls	r3, r3, #6
 8004848:	4013      	ands	r3, r2
 800484a:	d129      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x198>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	01db      	lsls	r3, r3, #7
 8004854:	4013      	ands	r3, r2
 8004856:	d121      	bne.n	800489c <HAL_ADC_ConfigChannel+0x194>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	4013      	ands	r3, r2
 8004862:	d119      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x190>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	025b      	lsls	r3, r3, #9
 800486c:	4013      	ands	r3, r2
 800486e:	d111      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x18c>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	029b      	lsls	r3, r3, #10
 8004878:	4013      	ands	r3, r2
 800487a:	d109      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x188>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	02db      	lsls	r3, r3, #11
 8004884:	4013      	ands	r3, r2
 8004886:	d001      	beq.n	800488c <HAL_ADC_ConfigChannel+0x184>
 8004888:	2312      	movs	r3, #18
 800488a:	e024      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 800488c:	2300      	movs	r3, #0
 800488e:	e022      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 8004890:	2311      	movs	r3, #17
 8004892:	e020      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 8004894:	2310      	movs	r3, #16
 8004896:	e01e      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 8004898:	230f      	movs	r3, #15
 800489a:	e01c      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 800489c:	230e      	movs	r3, #14
 800489e:	e01a      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048a0:	230d      	movs	r3, #13
 80048a2:	e018      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048a4:	230c      	movs	r3, #12
 80048a6:	e016      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048a8:	230b      	movs	r3, #11
 80048aa:	e014      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048ac:	230a      	movs	r3, #10
 80048ae:	e012      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048b0:	2309      	movs	r3, #9
 80048b2:	e010      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048b4:	2308      	movs	r3, #8
 80048b6:	e00e      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048b8:	2307      	movs	r3, #7
 80048ba:	e00c      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048bc:	2306      	movs	r3, #6
 80048be:	e00a      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048c0:	2305      	movs	r3, #5
 80048c2:	e008      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048c4:	2304      	movs	r3, #4
 80048c6:	e006      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048c8:	2303      	movs	r3, #3
 80048ca:	e004      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e002      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x1ce>
 80048d4:	2300      	movs	r3, #0
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	6852      	ldr	r2, [r2, #4]
 80048da:	201f      	movs	r0, #31
 80048dc:	4002      	ands	r2, r0
 80048de:	4093      	lsls	r3, r2
 80048e0:	000a      	movs	r2, r1
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d808      	bhi.n	800490a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	001a      	movs	r2, r3
 8004906:	f7ff fbfc 	bl	8004102 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	001a      	movs	r2, r3
 8004918:	f7ff fc36 	bl	8004188 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	db00      	blt.n	8004926 <HAL_ADC_ConfigChannel+0x21e>
 8004924:	e0bc      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004926:	4b50      	ldr	r3, [pc, #320]	; (8004a68 <HAL_ADC_ConfigChannel+0x360>)
 8004928:	0018      	movs	r0, r3
 800492a:	f7ff fba9 	bl	8004080 <LL_ADC_GetCommonPathInternalCh>
 800492e:	0003      	movs	r3, r0
 8004930:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a4d      	ldr	r2, [pc, #308]	; (8004a6c <HAL_ADC_ConfigChannel+0x364>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d122      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	041b      	lsls	r3, r3, #16
 8004942:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004944:	d11d      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2280      	movs	r2, #128	; 0x80
 800494a:	0412      	lsls	r2, r2, #16
 800494c:	4313      	orrs	r3, r2
 800494e:	4a46      	ldr	r2, [pc, #280]	; (8004a68 <HAL_ADC_ConfigChannel+0x360>)
 8004950:	0019      	movs	r1, r3
 8004952:	0010      	movs	r0, r2
 8004954:	f7ff fb80 	bl	8004058 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004958:	4b45      	ldr	r3, [pc, #276]	; (8004a70 <HAL_ADC_ConfigChannel+0x368>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4945      	ldr	r1, [pc, #276]	; (8004a74 <HAL_ADC_ConfigChannel+0x36c>)
 800495e:	0018      	movs	r0, r3
 8004960:	f7fb fbda 	bl	8000118 <__udivsi3>
 8004964:	0003      	movs	r3, r0
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	0013      	movs	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	189b      	adds	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004972:	e002      	b.n	800497a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3b01      	subs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f9      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004980:	e08e      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a3c      	ldr	r2, [pc, #240]	; (8004a78 <HAL_ADC_ConfigChannel+0x370>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d10e      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	2380      	movs	r3, #128	; 0x80
 8004990:	045b      	lsls	r3, r3, #17
 8004992:	4013      	ands	r3, r2
 8004994:	d109      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2280      	movs	r2, #128	; 0x80
 800499a:	0452      	lsls	r2, r2, #17
 800499c:	4313      	orrs	r3, r2
 800499e:	4a32      	ldr	r2, [pc, #200]	; (8004a68 <HAL_ADC_ConfigChannel+0x360>)
 80049a0:	0019      	movs	r1, r3
 80049a2:	0010      	movs	r0, r2
 80049a4:	f7ff fb58 	bl	8004058 <LL_ADC_SetCommonPathInternalCh>
 80049a8:	e07a      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a33      	ldr	r2, [pc, #204]	; (8004a7c <HAL_ADC_ConfigChannel+0x374>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d000      	beq.n	80049b6 <HAL_ADC_ConfigChannel+0x2ae>
 80049b4:	e074      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	03db      	lsls	r3, r3, #15
 80049bc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80049be:	d000      	beq.n	80049c2 <HAL_ADC_ConfigChannel+0x2ba>
 80049c0:	e06e      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2280      	movs	r2, #128	; 0x80
 80049c6:	03d2      	lsls	r2, r2, #15
 80049c8:	4313      	orrs	r3, r2
 80049ca:	4a27      	ldr	r2, [pc, #156]	; (8004a68 <HAL_ADC_ConfigChannel+0x360>)
 80049cc:	0019      	movs	r1, r3
 80049ce:	0010      	movs	r0, r2
 80049d0:	f7ff fb42 	bl	8004058 <LL_ADC_SetCommonPathInternalCh>
 80049d4:	e064      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	429a      	cmp	r2, r3
 80049e0:	d004      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049e6:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <HAL_ADC_ConfigChannel+0x35c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d107      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0019      	movs	r1, r3
 80049f6:	0010      	movs	r0, r2
 80049f8:	f7ff fbb4 	bl	8004164 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da4d      	bge.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a04:	4b18      	ldr	r3, [pc, #96]	; (8004a68 <HAL_ADC_ConfigChannel+0x360>)
 8004a06:	0018      	movs	r0, r3
 8004a08:	f7ff fb3a 	bl	8004080 <LL_ADC_GetCommonPathInternalCh>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <HAL_ADC_ConfigChannel+0x364>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d108      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4a18      	ldr	r2, [pc, #96]	; (8004a80 <HAL_ADC_ConfigChannel+0x378>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	4a11      	ldr	r2, [pc, #68]	; (8004a68 <HAL_ADC_ConfigChannel+0x360>)
 8004a22:	0019      	movs	r1, r3
 8004a24:	0010      	movs	r0, r2
 8004a26:	f7ff fb17 	bl	8004058 <LL_ADC_SetCommonPathInternalCh>
 8004a2a:	e039      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a11      	ldr	r2, [pc, #68]	; (8004a78 <HAL_ADC_ConfigChannel+0x370>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d108      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <HAL_ADC_ConfigChannel+0x37c>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <HAL_ADC_ConfigChannel+0x360>)
 8004a3e:	0019      	movs	r1, r3
 8004a40:	0010      	movs	r0, r2
 8004a42:	f7ff fb09 	bl	8004058 <LL_ADC_SetCommonPathInternalCh>
 8004a46:	e02b      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <HAL_ADC_ConfigChannel+0x374>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d126      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4a0c      	ldr	r2, [pc, #48]	; (8004a88 <HAL_ADC_ConfigChannel+0x380>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	4a03      	ldr	r2, [pc, #12]	; (8004a68 <HAL_ADC_ConfigChannel+0x360>)
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	0010      	movs	r0, r2
 8004a5e:	f7ff fafb 	bl	8004058 <LL_ADC_SetCommonPathInternalCh>
 8004a62:	e01d      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x398>
 8004a64:	80000004 	.word	0x80000004
 8004a68:	40012708 	.word	0x40012708
 8004a6c:	b0001000 	.word	0xb0001000
 8004a70:	20000008 	.word	0x20000008
 8004a74:	00030d40 	.word	0x00030d40
 8004a78:	b8004000 	.word	0xb8004000
 8004a7c:	b4002000 	.word	0xb4002000
 8004a80:	ff7fffff 	.word	0xff7fffff
 8004a84:	feffffff 	.word	0xfeffffff
 8004a88:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	2220      	movs	r2, #32
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004a98:	2317      	movs	r3, #23
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2254      	movs	r2, #84	; 0x54
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004aa8:	2317      	movs	r3, #23
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	781b      	ldrb	r3, [r3, #0]
}
 8004aae:	0018      	movs	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b006      	add	sp, #24
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)

08004ab8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7ff fbb3 	bl	8004234 <LL_ADC_IsEnabled>
 8004ace:	1e03      	subs	r3, r0, #0
 8004ad0:	d000      	beq.n	8004ad4 <ADC_Enable+0x1c>
 8004ad2:	e069      	b.n	8004ba8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4a36      	ldr	r2, [pc, #216]	; (8004bb4 <ADC_Enable+0xfc>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	d00d      	beq.n	8004afc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae4:	2210      	movs	r2, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	2201      	movs	r2, #1
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e056      	b.n	8004baa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7ff fb85 	bl	8004210 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004b06:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <ADC_Enable+0x100>)
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7ff fab9 	bl	8004080 <LL_ADC_GetCommonPathInternalCh>
 8004b0e:	0002      	movs	r2, r0
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	4013      	ands	r3, r2
 8004b16:	d00f      	beq.n	8004b38 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b18:	4b28      	ldr	r3, [pc, #160]	; (8004bbc <ADC_Enable+0x104>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4928      	ldr	r1, [pc, #160]	; (8004bc0 <ADC_Enable+0x108>)
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f7fb fafa 	bl	8000118 <__udivsi3>
 8004b24:	0003      	movs	r3, r0
 8004b26:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004b28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b2a:	e002      	b.n	8004b32 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f9      	bne.n	8004b2c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	7e5b      	ldrb	r3, [r3, #25]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d033      	beq.n	8004ba8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004b40:	f7ff fa80 	bl	8004044 <HAL_GetTick>
 8004b44:	0003      	movs	r3, r0
 8004b46:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b48:	e027      	b.n	8004b9a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7ff fb70 	bl	8004234 <LL_ADC_IsEnabled>
 8004b54:	1e03      	subs	r3, r0, #0
 8004b56:	d104      	bne.n	8004b62 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7ff fb57 	bl	8004210 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b62:	f7ff fa6f 	bl	8004044 <HAL_GetTick>
 8004b66:	0002      	movs	r2, r0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d914      	bls.n	8004b9a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d00d      	beq.n	8004b9a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	2210      	movs	r2, #16
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8e:	2201      	movs	r2, #1
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e007      	b.n	8004baa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d1d0      	bne.n	8004b4a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	0018      	movs	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b004      	add	sp, #16
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	80000017 	.word	0x80000017
 8004bb8:	40012708 	.word	0x40012708
 8004bbc:	20000008 	.word	0x20000008
 8004bc0:	00030d40 	.word	0x00030d40

08004bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	0002      	movs	r2, r0
 8004bcc:	1dfb      	adds	r3, r7, #7
 8004bce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bd0:	1dfb      	adds	r3, r7, #7
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004bd6:	d809      	bhi.n	8004bec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	001a      	movs	r2, r3
 8004bde:	231f      	movs	r3, #31
 8004be0:	401a      	ands	r2, r3
 8004be2:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <__NVIC_EnableIRQ+0x30>)
 8004be4:	2101      	movs	r1, #1
 8004be6:	4091      	lsls	r1, r2
 8004be8:	000a      	movs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf8:	b590      	push	{r4, r7, lr}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	0002      	movs	r2, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	1dfb      	adds	r3, r7, #7
 8004c04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c06:	1dfb      	adds	r3, r7, #7
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c0c:	d828      	bhi.n	8004c60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c0e:	4a2f      	ldr	r2, [pc, #188]	; (8004ccc <__NVIC_SetPriority+0xd4>)
 8004c10:	1dfb      	adds	r3, r7, #7
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	b25b      	sxtb	r3, r3
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	33c0      	adds	r3, #192	; 0xc0
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	589b      	ldr	r3, [r3, r2]
 8004c1e:	1dfa      	adds	r2, r7, #7
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	0011      	movs	r1, r2
 8004c24:	2203      	movs	r2, #3
 8004c26:	400a      	ands	r2, r1
 8004c28:	00d2      	lsls	r2, r2, #3
 8004c2a:	21ff      	movs	r1, #255	; 0xff
 8004c2c:	4091      	lsls	r1, r2
 8004c2e:	000a      	movs	r2, r1
 8004c30:	43d2      	mvns	r2, r2
 8004c32:	401a      	ands	r2, r3
 8004c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	22ff      	movs	r2, #255	; 0xff
 8004c3c:	401a      	ands	r2, r3
 8004c3e:	1dfb      	adds	r3, r7, #7
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	0018      	movs	r0, r3
 8004c44:	2303      	movs	r3, #3
 8004c46:	4003      	ands	r3, r0
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c4c:	481f      	ldr	r0, [pc, #124]	; (8004ccc <__NVIC_SetPriority+0xd4>)
 8004c4e:	1dfb      	adds	r3, r7, #7
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	b25b      	sxtb	r3, r3
 8004c54:	089b      	lsrs	r3, r3, #2
 8004c56:	430a      	orrs	r2, r1
 8004c58:	33c0      	adds	r3, #192	; 0xc0
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004c5e:	e031      	b.n	8004cc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c60:	4a1b      	ldr	r2, [pc, #108]	; (8004cd0 <__NVIC_SetPriority+0xd8>)
 8004c62:	1dfb      	adds	r3, r7, #7
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	0019      	movs	r1, r3
 8004c68:	230f      	movs	r3, #15
 8004c6a:	400b      	ands	r3, r1
 8004c6c:	3b08      	subs	r3, #8
 8004c6e:	089b      	lsrs	r3, r3, #2
 8004c70:	3306      	adds	r3, #6
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	18d3      	adds	r3, r2, r3
 8004c76:	3304      	adds	r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	1dfa      	adds	r2, r7, #7
 8004c7c:	7812      	ldrb	r2, [r2, #0]
 8004c7e:	0011      	movs	r1, r2
 8004c80:	2203      	movs	r2, #3
 8004c82:	400a      	ands	r2, r1
 8004c84:	00d2      	lsls	r2, r2, #3
 8004c86:	21ff      	movs	r1, #255	; 0xff
 8004c88:	4091      	lsls	r1, r2
 8004c8a:	000a      	movs	r2, r1
 8004c8c:	43d2      	mvns	r2, r2
 8004c8e:	401a      	ands	r2, r3
 8004c90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	019b      	lsls	r3, r3, #6
 8004c96:	22ff      	movs	r2, #255	; 0xff
 8004c98:	401a      	ands	r2, r3
 8004c9a:	1dfb      	adds	r3, r7, #7
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	4003      	ands	r3, r0
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ca8:	4809      	ldr	r0, [pc, #36]	; (8004cd0 <__NVIC_SetPriority+0xd8>)
 8004caa:	1dfb      	adds	r3, r7, #7
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	001c      	movs	r4, r3
 8004cb0:	230f      	movs	r3, #15
 8004cb2:	4023      	ands	r3, r4
 8004cb4:	3b08      	subs	r3, #8
 8004cb6:	089b      	lsrs	r3, r3, #2
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	3306      	adds	r3, #6
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	18c3      	adds	r3, r0, r3
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	601a      	str	r2, [r3, #0]
}
 8004cc4:	46c0      	nop			; (mov r8, r8)
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b003      	add	sp, #12
 8004cca:	bd90      	pop	{r4, r7, pc}
 8004ccc:	e000e100 	.word	0xe000e100
 8004cd0:	e000ed00 	.word	0xe000ed00

08004cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	1e5a      	subs	r2, r3, #1
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	045b      	lsls	r3, r3, #17
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d301      	bcc.n	8004cec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e010      	b.n	8004d0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <SysTick_Config+0x44>)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	3a01      	subs	r2, #1
 8004cf2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	425b      	negs	r3, r3
 8004cf8:	2103      	movs	r1, #3
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f7ff ff7c 	bl	8004bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <SysTick_Config+0x44>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d06:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <SysTick_Config+0x44>)
 8004d08:	2207      	movs	r2, #7
 8004d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	0018      	movs	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b002      	add	sp, #8
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	e000e010 	.word	0xe000e010

08004d1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	210f      	movs	r1, #15
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	1c02      	adds	r2, r0, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	b25b      	sxtb	r3, r3
 8004d36:	0011      	movs	r1, r2
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f7ff ff5d 	bl	8004bf8 <__NVIC_SetPriority>
}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b004      	add	sp, #16
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	0002      	movs	r2, r0
 8004d4e:	1dfb      	adds	r3, r7, #7
 8004d50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d52:	1dfb      	adds	r3, r7, #7
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	b25b      	sxtb	r3, r3
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7ff ff33 	bl	8004bc4 <__NVIC_EnableIRQ>
}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b002      	add	sp, #8
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7ff ffaf 	bl	8004cd4 <SysTick_Config>
 8004d76:	0003      	movs	r3, r0
}
 8004d78:	0018      	movs	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b002      	add	sp, #8
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d8e:	e147      	b.n	8005020 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2101      	movs	r1, #1
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4091      	lsls	r1, r2
 8004d9a:	000a      	movs	r2, r1
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d100      	bne.n	8004da8 <HAL_GPIO_Init+0x28>
 8004da6:	e138      	b.n	800501a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2203      	movs	r2, #3
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d005      	beq.n	8004dc0 <HAL_GPIO_Init+0x40>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2203      	movs	r2, #3
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d130      	bne.n	8004e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	0013      	movs	r3, r2
 8004dd0:	43da      	mvns	r2, r3
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	409a      	lsls	r2, r3
 8004de2:	0013      	movs	r3, r2
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004df6:	2201      	movs	r2, #1
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	409a      	lsls	r2, r3
 8004dfc:	0013      	movs	r3, r2
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	401a      	ands	r2, r3
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	409a      	lsls	r2, r3
 8004e14:	0013      	movs	r3, r2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2203      	movs	r2, #3
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d017      	beq.n	8004e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	2203      	movs	r2, #3
 8004e3a:	409a      	lsls	r2, r3
 8004e3c:	0013      	movs	r3, r2
 8004e3e:	43da      	mvns	r2, r3
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4013      	ands	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	0013      	movs	r3, r2
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2203      	movs	r2, #3
 8004e64:	4013      	ands	r3, r2
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d123      	bne.n	8004eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	08da      	lsrs	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3208      	adds	r2, #8
 8004e72:	0092      	lsls	r2, r2, #2
 8004e74:	58d3      	ldr	r3, [r2, r3]
 8004e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2207      	movs	r2, #7
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	220f      	movs	r2, #15
 8004e82:	409a      	lsls	r2, r3
 8004e84:	0013      	movs	r3, r2
 8004e86:	43da      	mvns	r2, r3
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2107      	movs	r1, #7
 8004e96:	400b      	ands	r3, r1
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	0013      	movs	r3, r2
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	08da      	lsrs	r2, r3, #3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3208      	adds	r2, #8
 8004eac:	0092      	lsls	r2, r2, #2
 8004eae:	6939      	ldr	r1, [r7, #16]
 8004eb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	0013      	movs	r3, r2
 8004ec2:	43da      	mvns	r2, r3
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	0013      	movs	r3, r2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	23c0      	movs	r3, #192	; 0xc0
 8004eec:	029b      	lsls	r3, r3, #10
 8004eee:	4013      	ands	r3, r2
 8004ef0:	d100      	bne.n	8004ef4 <HAL_GPIO_Init+0x174>
 8004ef2:	e092      	b.n	800501a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004ef4:	4a50      	ldr	r2, [pc, #320]	; (8005038 <HAL_GPIO_Init+0x2b8>)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	089b      	lsrs	r3, r3, #2
 8004efa:	3318      	adds	r3, #24
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	589b      	ldr	r3, [r3, r2]
 8004f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2203      	movs	r2, #3
 8004f06:	4013      	ands	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	220f      	movs	r2, #15
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	0013      	movs	r3, r2
 8004f10:	43da      	mvns	r2, r3
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4013      	ands	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	23a0      	movs	r3, #160	; 0xa0
 8004f1c:	05db      	lsls	r3, r3, #23
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d013      	beq.n	8004f4a <HAL_GPIO_Init+0x1ca>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a45      	ldr	r2, [pc, #276]	; (800503c <HAL_GPIO_Init+0x2bc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00d      	beq.n	8004f46 <HAL_GPIO_Init+0x1c6>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a44      	ldr	r2, [pc, #272]	; (8005040 <HAL_GPIO_Init+0x2c0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <HAL_GPIO_Init+0x1c2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a43      	ldr	r2, [pc, #268]	; (8005044 <HAL_GPIO_Init+0x2c4>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d101      	bne.n	8004f3e <HAL_GPIO_Init+0x1be>
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e006      	b.n	8004f4c <HAL_GPIO_Init+0x1cc>
 8004f3e:	2305      	movs	r3, #5
 8004f40:	e004      	b.n	8004f4c <HAL_GPIO_Init+0x1cc>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e002      	b.n	8004f4c <HAL_GPIO_Init+0x1cc>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_GPIO_Init+0x1cc>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	2103      	movs	r1, #3
 8004f50:	400a      	ands	r2, r1
 8004f52:	00d2      	lsls	r2, r2, #3
 8004f54:	4093      	lsls	r3, r2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004f5c:	4936      	ldr	r1, [pc, #216]	; (8005038 <HAL_GPIO_Init+0x2b8>)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	089b      	lsrs	r3, r3, #2
 8004f62:	3318      	adds	r3, #24
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f6a:	4b33      	ldr	r3, [pc, #204]	; (8005038 <HAL_GPIO_Init+0x2b8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	43da      	mvns	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	035b      	lsls	r3, r3, #13
 8004f82:	4013      	ands	r3, r2
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f8e:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <HAL_GPIO_Init+0x2b8>)
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004f94:	4b28      	ldr	r3, [pc, #160]	; (8005038 <HAL_GPIO_Init+0x2b8>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	43da      	mvns	r2, r3
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	039b      	lsls	r3, r3, #14
 8004fac:	4013      	ands	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fb8:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <HAL_GPIO_Init+0x2b8>)
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_GPIO_Init+0x2b8>)
 8004fc0:	2384      	movs	r3, #132	; 0x84
 8004fc2:	58d3      	ldr	r3, [r2, r3]
 8004fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	43da      	mvns	r2, r3
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	029b      	lsls	r3, r3, #10
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fe4:	4914      	ldr	r1, [pc, #80]	; (8005038 <HAL_GPIO_Init+0x2b8>)
 8004fe6:	2284      	movs	r2, #132	; 0x84
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004fec:	4a12      	ldr	r2, [pc, #72]	; (8005038 <HAL_GPIO_Init+0x2b8>)
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	58d3      	ldr	r3, [r2, r3]
 8004ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	43da      	mvns	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	025b      	lsls	r3, r3, #9
 8005006:	4013      	ands	r3, r2
 8005008:	d003      	beq.n	8005012 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005012:	4909      	ldr	r1, [pc, #36]	; (8005038 <HAL_GPIO_Init+0x2b8>)
 8005014:	2280      	movs	r2, #128	; 0x80
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	3301      	adds	r3, #1
 800501e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	40da      	lsrs	r2, r3
 8005028:	1e13      	subs	r3, r2, #0
 800502a:	d000      	beq.n	800502e <HAL_GPIO_Init+0x2ae>
 800502c:	e6b0      	b.n	8004d90 <HAL_GPIO_Init+0x10>
  }
}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	46c0      	nop			; (mov r8, r8)
 8005032:	46bd      	mov	sp, r7
 8005034:	b006      	add	sp, #24
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021800 	.word	0x40021800
 800503c:	50000400 	.word	0x50000400
 8005040:	50000800 	.word	0x50000800
 8005044:	50000c00 	.word	0x50000c00

08005048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	000a      	movs	r2, r1
 8005052:	1cbb      	adds	r3, r7, #2
 8005054:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	1cba      	adds	r2, r7, #2
 800505c:	8812      	ldrh	r2, [r2, #0]
 800505e:	4013      	ands	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005062:	230f      	movs	r3, #15
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	2201      	movs	r2, #1
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	e003      	b.n	8005074 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800506c:	230f      	movs	r3, #15
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005074:	230f      	movs	r3, #15
 8005076:	18fb      	adds	r3, r7, r3
 8005078:	781b      	ldrb	r3, [r3, #0]
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b004      	add	sp, #16
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	0008      	movs	r0, r1
 800508c:	0011      	movs	r1, r2
 800508e:	1cbb      	adds	r3, r7, #2
 8005090:	1c02      	adds	r2, r0, #0
 8005092:	801a      	strh	r2, [r3, #0]
 8005094:	1c7b      	adds	r3, r7, #1
 8005096:	1c0a      	adds	r2, r1, #0
 8005098:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800509a:	1c7b      	adds	r3, r7, #1
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050a2:	1cbb      	adds	r3, r7, #2
 80050a4:	881a      	ldrh	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050aa:	e003      	b.n	80050b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050ac:	1cbb      	adds	r3, r7, #2
 80050ae:	881a      	ldrh	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050b4:	46c0      	nop			; (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b002      	add	sp, #8
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80050c4:	4b19      	ldr	r3, [pc, #100]	; (800512c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a19      	ldr	r2, [pc, #100]	; (8005130 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	0019      	movs	r1, r3
 80050ce:	4b17      	ldr	r3, [pc, #92]	; (800512c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	429a      	cmp	r2, r3
 80050de:	d11f      	bne.n	8005120 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80050e0:	4b14      	ldr	r3, [pc, #80]	; (8005134 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	0013      	movs	r3, r2
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	189b      	adds	r3, r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4912      	ldr	r1, [pc, #72]	; (8005138 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80050ee:	0018      	movs	r0, r3
 80050f0:	f7fb f812 	bl	8000118 <__udivsi3>
 80050f4:	0003      	movs	r3, r0
 80050f6:	3301      	adds	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050fa:	e008      	b.n	800510e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3b01      	subs	r3, #1
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e001      	b.n	800510e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e009      	b.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	401a      	ands	r2, r3
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	429a      	cmp	r2, r3
 800511e:	d0ed      	beq.n	80050fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	0018      	movs	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	b004      	add	sp, #16
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	40007000 	.word	0x40007000
 8005130:	fffff9ff 	.word	0xfffff9ff
 8005134:	20000008 	.word	0x20000008
 8005138:	000f4240 	.word	0x000f4240

0800513c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005140:	4b03      	ldr	r3, [pc, #12]	; (8005150 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	23e0      	movs	r3, #224	; 0xe0
 8005146:	01db      	lsls	r3, r3, #7
 8005148:	4013      	ands	r3, r2
}
 800514a:	0018      	movs	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40021000 	.word	0x40021000

08005154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e2fe      	b.n	8005764 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2201      	movs	r2, #1
 800516c:	4013      	ands	r3, r2
 800516e:	d100      	bne.n	8005172 <HAL_RCC_OscConfig+0x1e>
 8005170:	e07c      	b.n	800526c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005172:	4bc3      	ldr	r3, [pc, #780]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2238      	movs	r2, #56	; 0x38
 8005178:	4013      	ands	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800517c:	4bc0      	ldr	r3, [pc, #768]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2203      	movs	r2, #3
 8005182:	4013      	ands	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b10      	cmp	r3, #16
 800518a:	d102      	bne.n	8005192 <HAL_RCC_OscConfig+0x3e>
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d002      	beq.n	8005198 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d10b      	bne.n	80051b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005198:	4bb9      	ldr	r3, [pc, #740]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	029b      	lsls	r3, r3, #10
 80051a0:	4013      	ands	r3, r2
 80051a2:	d062      	beq.n	800526a <HAL_RCC_OscConfig+0x116>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d15e      	bne.n	800526a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e2d9      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	025b      	lsls	r3, r3, #9
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d107      	bne.n	80051cc <HAL_RCC_OscConfig+0x78>
 80051bc:	4bb0      	ldr	r3, [pc, #704]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4baf      	ldr	r3, [pc, #700]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051c2:	2180      	movs	r1, #128	; 0x80
 80051c4:	0249      	lsls	r1, r1, #9
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e020      	b.n	800520e <HAL_RCC_OscConfig+0xba>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	23a0      	movs	r3, #160	; 0xa0
 80051d2:	02db      	lsls	r3, r3, #11
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d10e      	bne.n	80051f6 <HAL_RCC_OscConfig+0xa2>
 80051d8:	4ba9      	ldr	r3, [pc, #676]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4ba8      	ldr	r3, [pc, #672]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051de:	2180      	movs	r1, #128	; 0x80
 80051e0:	02c9      	lsls	r1, r1, #11
 80051e2:	430a      	orrs	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	4ba6      	ldr	r3, [pc, #664]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	4ba5      	ldr	r3, [pc, #660]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051ec:	2180      	movs	r1, #128	; 0x80
 80051ee:	0249      	lsls	r1, r1, #9
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e00b      	b.n	800520e <HAL_RCC_OscConfig+0xba>
 80051f6:	4ba2      	ldr	r3, [pc, #648]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4ba1      	ldr	r3, [pc, #644]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80051fc:	49a1      	ldr	r1, [pc, #644]	; (8005484 <HAL_RCC_OscConfig+0x330>)
 80051fe:	400a      	ands	r2, r1
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	4b9f      	ldr	r3, [pc, #636]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b9e      	ldr	r3, [pc, #632]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005208:	499f      	ldr	r1, [pc, #636]	; (8005488 <HAL_RCC_OscConfig+0x334>)
 800520a:	400a      	ands	r2, r1
 800520c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d014      	beq.n	8005240 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005216:	f7fe ff15 	bl	8004044 <HAL_GetTick>
 800521a:	0003      	movs	r3, r0
 800521c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005220:	f7fe ff10 	bl	8004044 <HAL_GetTick>
 8005224:	0002      	movs	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b64      	cmp	r3, #100	; 0x64
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e298      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005232:	4b93      	ldr	r3, [pc, #588]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	029b      	lsls	r3, r3, #10
 800523a:	4013      	ands	r3, r2
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0xcc>
 800523e:	e015      	b.n	800526c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7fe ff00 	bl	8004044 <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800524a:	f7fe fefb 	bl	8004044 <HAL_GetTick>
 800524e:	0002      	movs	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b64      	cmp	r3, #100	; 0x64
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e283      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800525c:	4b88      	ldr	r3, [pc, #544]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	029b      	lsls	r3, r3, #10
 8005264:	4013      	ands	r3, r2
 8005266:	d1f0      	bne.n	800524a <HAL_RCC_OscConfig+0xf6>
 8005268:	e000      	b.n	800526c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800526a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2202      	movs	r2, #2
 8005272:	4013      	ands	r3, r2
 8005274:	d100      	bne.n	8005278 <HAL_RCC_OscConfig+0x124>
 8005276:	e099      	b.n	80053ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005278:	4b81      	ldr	r3, [pc, #516]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2238      	movs	r2, #56	; 0x38
 800527e:	4013      	ands	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005282:	4b7f      	ldr	r3, [pc, #508]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	2203      	movs	r2, #3
 8005288:	4013      	ands	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	2b10      	cmp	r3, #16
 8005290:	d102      	bne.n	8005298 <HAL_RCC_OscConfig+0x144>
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b02      	cmp	r3, #2
 8005296:	d002      	beq.n	800529e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d135      	bne.n	800530a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800529e:	4b78      	ldr	r3, [pc, #480]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4013      	ands	r3, r2
 80052a8:	d005      	beq.n	80052b6 <HAL_RCC_OscConfig+0x162>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e256      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b6:	4b72      	ldr	r3, [pc, #456]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4a74      	ldr	r2, [pc, #464]	; (800548c <HAL_RCC_OscConfig+0x338>)
 80052bc:	4013      	ands	r3, r2
 80052be:	0019      	movs	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	021a      	lsls	r2, r3, #8
 80052c6:	4b6e      	ldr	r3, [pc, #440]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d112      	bne.n	80052f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80052d2:	4b6b      	ldr	r3, [pc, #428]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a6e      	ldr	r2, [pc, #440]	; (8005490 <HAL_RCC_OscConfig+0x33c>)
 80052d8:	4013      	ands	r3, r2
 80052da:	0019      	movs	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	4b67      	ldr	r3, [pc, #412]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80052e6:	4b66      	ldr	r3, [pc, #408]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	0adb      	lsrs	r3, r3, #11
 80052ec:	2207      	movs	r2, #7
 80052ee:	4013      	ands	r3, r2
 80052f0:	4a68      	ldr	r2, [pc, #416]	; (8005494 <HAL_RCC_OscConfig+0x340>)
 80052f2:	40da      	lsrs	r2, r3
 80052f4:	4b68      	ldr	r3, [pc, #416]	; (8005498 <HAL_RCC_OscConfig+0x344>)
 80052f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052f8:	4b68      	ldr	r3, [pc, #416]	; (800549c <HAL_RCC_OscConfig+0x348>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	0018      	movs	r0, r3
 80052fe:	f7fe fe45 	bl	8003f8c <HAL_InitTick>
 8005302:	1e03      	subs	r3, r0, #0
 8005304:	d051      	beq.n	80053aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e22c      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d030      	beq.n	8005374 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005312:	4b5b      	ldr	r3, [pc, #364]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a5e      	ldr	r2, [pc, #376]	; (8005490 <HAL_RCC_OscConfig+0x33c>)
 8005318:	4013      	ands	r3, r2
 800531a:	0019      	movs	r1, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	4b57      	ldr	r3, [pc, #348]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005322:	430a      	orrs	r2, r1
 8005324:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005326:	4b56      	ldr	r3, [pc, #344]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b55      	ldr	r3, [pc, #340]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800532c:	2180      	movs	r1, #128	; 0x80
 800532e:	0049      	lsls	r1, r1, #1
 8005330:	430a      	orrs	r2, r1
 8005332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fe fe86 	bl	8004044 <HAL_GetTick>
 8005338:	0003      	movs	r3, r0
 800533a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800533e:	f7fe fe81 	bl	8004044 <HAL_GetTick>
 8005342:	0002      	movs	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e209      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005350:	4b4b      	ldr	r3, [pc, #300]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4013      	ands	r3, r2
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535c:	4b48      	ldr	r3, [pc, #288]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	4a4a      	ldr	r2, [pc, #296]	; (800548c <HAL_RCC_OscConfig+0x338>)
 8005362:	4013      	ands	r3, r2
 8005364:	0019      	movs	r1, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	021a      	lsls	r2, r3, #8
 800536c:	4b44      	ldr	r3, [pc, #272]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	e01b      	b.n	80053ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005374:	4b42      	ldr	r3, [pc, #264]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	4b41      	ldr	r3, [pc, #260]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800537a:	4949      	ldr	r1, [pc, #292]	; (80054a0 <HAL_RCC_OscConfig+0x34c>)
 800537c:	400a      	ands	r2, r1
 800537e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fe fe60 	bl	8004044 <HAL_GetTick>
 8005384:	0003      	movs	r3, r0
 8005386:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800538a:	f7fe fe5b 	bl	8004044 <HAL_GetTick>
 800538e:	0002      	movs	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e1e3      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800539c:	4b38      	ldr	r3, [pc, #224]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4013      	ands	r3, r2
 80053a6:	d1f0      	bne.n	800538a <HAL_RCC_OscConfig+0x236>
 80053a8:	e000      	b.n	80053ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2208      	movs	r2, #8
 80053b2:	4013      	ands	r3, r2
 80053b4:	d047      	beq.n	8005446 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80053b6:	4b32      	ldr	r3, [pc, #200]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2238      	movs	r2, #56	; 0x38
 80053bc:	4013      	ands	r3, r2
 80053be:	2b18      	cmp	r3, #24
 80053c0:	d10a      	bne.n	80053d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80053c2:	4b2f      	ldr	r3, [pc, #188]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80053c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c6:	2202      	movs	r2, #2
 80053c8:	4013      	ands	r3, r2
 80053ca:	d03c      	beq.n	8005446 <HAL_RCC_OscConfig+0x2f2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d138      	bne.n	8005446 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e1c5      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d019      	beq.n	8005414 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80053e0:	4b27      	ldr	r3, [pc, #156]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80053e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053e4:	4b26      	ldr	r3, [pc, #152]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 80053e6:	2101      	movs	r1, #1
 80053e8:	430a      	orrs	r2, r1
 80053ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ec:	f7fe fe2a 	bl	8004044 <HAL_GetTick>
 80053f0:	0003      	movs	r3, r0
 80053f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f6:	f7fe fe25 	bl	8004044 <HAL_GetTick>
 80053fa:	0002      	movs	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e1ad      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005408:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800540a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540c:	2202      	movs	r2, #2
 800540e:	4013      	ands	r3, r2
 8005410:	d0f1      	beq.n	80053f6 <HAL_RCC_OscConfig+0x2a2>
 8005412:	e018      	b.n	8005446 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005414:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005416:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800541a:	2101      	movs	r1, #1
 800541c:	438a      	bics	r2, r1
 800541e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fe fe10 	bl	8004044 <HAL_GetTick>
 8005424:	0003      	movs	r3, r0
 8005426:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800542a:	f7fe fe0b 	bl	8004044 <HAL_GetTick>
 800542e:	0002      	movs	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e193      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800543c:	4b10      	ldr	r3, [pc, #64]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800543e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005440:	2202      	movs	r2, #2
 8005442:	4013      	ands	r3, r2
 8005444:	d1f1      	bne.n	800542a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2204      	movs	r2, #4
 800544c:	4013      	ands	r3, r2
 800544e:	d100      	bne.n	8005452 <HAL_RCC_OscConfig+0x2fe>
 8005450:	e0c6      	b.n	80055e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005452:	231f      	movs	r3, #31
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800545a:	4b09      	ldr	r3, [pc, #36]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2238      	movs	r2, #56	; 0x38
 8005460:	4013      	ands	r3, r2
 8005462:	2b20      	cmp	r3, #32
 8005464:	d11e      	bne.n	80054a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <HAL_RCC_OscConfig+0x32c>)
 8005468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546a:	2202      	movs	r2, #2
 800546c:	4013      	ands	r3, r2
 800546e:	d100      	bne.n	8005472 <HAL_RCC_OscConfig+0x31e>
 8005470:	e0b6      	b.n	80055e0 <HAL_RCC_OscConfig+0x48c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d000      	beq.n	800547c <HAL_RCC_OscConfig+0x328>
 800547a:	e0b1      	b.n	80055e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e171      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
 8005480:	40021000 	.word	0x40021000
 8005484:	fffeffff 	.word	0xfffeffff
 8005488:	fffbffff 	.word	0xfffbffff
 800548c:	ffff80ff 	.word	0xffff80ff
 8005490:	ffffc7ff 	.word	0xffffc7ff
 8005494:	00f42400 	.word	0x00f42400
 8005498:	20000008 	.word	0x20000008
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054a4:	4bb1      	ldr	r3, [pc, #708]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80054a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	055b      	lsls	r3, r3, #21
 80054ac:	4013      	ands	r3, r2
 80054ae:	d101      	bne.n	80054b4 <HAL_RCC_OscConfig+0x360>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <HAL_RCC_OscConfig+0x362>
 80054b4:	2300      	movs	r3, #0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d011      	beq.n	80054de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80054ba:	4bac      	ldr	r3, [pc, #688]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80054bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054be:	4bab      	ldr	r3, [pc, #684]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	0549      	lsls	r1, r1, #21
 80054c4:	430a      	orrs	r2, r1
 80054c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80054c8:	4ba8      	ldr	r3, [pc, #672]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80054ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054cc:	2380      	movs	r3, #128	; 0x80
 80054ce:	055b      	lsls	r3, r3, #21
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80054d6:	231f      	movs	r3, #31
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054de:	4ba4      	ldr	r3, [pc, #656]	; (8005770 <HAL_RCC_OscConfig+0x61c>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	4013      	ands	r3, r2
 80054e8:	d11a      	bne.n	8005520 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054ea:	4ba1      	ldr	r3, [pc, #644]	; (8005770 <HAL_RCC_OscConfig+0x61c>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4ba0      	ldr	r3, [pc, #640]	; (8005770 <HAL_RCC_OscConfig+0x61c>)
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	0049      	lsls	r1, r1, #1
 80054f4:	430a      	orrs	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80054f8:	f7fe fda4 	bl	8004044 <HAL_GetTick>
 80054fc:	0003      	movs	r3, r0
 80054fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005502:	f7fe fd9f 	bl	8004044 <HAL_GetTick>
 8005506:	0002      	movs	r2, r0
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e127      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005514:	4b96      	ldr	r3, [pc, #600]	; (8005770 <HAL_RCC_OscConfig+0x61c>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	4013      	ands	r3, r2
 800551e:	d0f0      	beq.n	8005502 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d106      	bne.n	8005536 <HAL_RCC_OscConfig+0x3e2>
 8005528:	4b90      	ldr	r3, [pc, #576]	; (800576c <HAL_RCC_OscConfig+0x618>)
 800552a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800552c:	4b8f      	ldr	r3, [pc, #572]	; (800576c <HAL_RCC_OscConfig+0x618>)
 800552e:	2101      	movs	r1, #1
 8005530:	430a      	orrs	r2, r1
 8005532:	65da      	str	r2, [r3, #92]	; 0x5c
 8005534:	e01c      	b.n	8005570 <HAL_RCC_OscConfig+0x41c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b05      	cmp	r3, #5
 800553c:	d10c      	bne.n	8005558 <HAL_RCC_OscConfig+0x404>
 800553e:	4b8b      	ldr	r3, [pc, #556]	; (800576c <HAL_RCC_OscConfig+0x618>)
 8005540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005542:	4b8a      	ldr	r3, [pc, #552]	; (800576c <HAL_RCC_OscConfig+0x618>)
 8005544:	2104      	movs	r1, #4
 8005546:	430a      	orrs	r2, r1
 8005548:	65da      	str	r2, [r3, #92]	; 0x5c
 800554a:	4b88      	ldr	r3, [pc, #544]	; (800576c <HAL_RCC_OscConfig+0x618>)
 800554c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800554e:	4b87      	ldr	r3, [pc, #540]	; (800576c <HAL_RCC_OscConfig+0x618>)
 8005550:	2101      	movs	r1, #1
 8005552:	430a      	orrs	r2, r1
 8005554:	65da      	str	r2, [r3, #92]	; 0x5c
 8005556:	e00b      	b.n	8005570 <HAL_RCC_OscConfig+0x41c>
 8005558:	4b84      	ldr	r3, [pc, #528]	; (800576c <HAL_RCC_OscConfig+0x618>)
 800555a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800555c:	4b83      	ldr	r3, [pc, #524]	; (800576c <HAL_RCC_OscConfig+0x618>)
 800555e:	2101      	movs	r1, #1
 8005560:	438a      	bics	r2, r1
 8005562:	65da      	str	r2, [r3, #92]	; 0x5c
 8005564:	4b81      	ldr	r3, [pc, #516]	; (800576c <HAL_RCC_OscConfig+0x618>)
 8005566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005568:	4b80      	ldr	r3, [pc, #512]	; (800576c <HAL_RCC_OscConfig+0x618>)
 800556a:	2104      	movs	r1, #4
 800556c:	438a      	bics	r2, r1
 800556e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d014      	beq.n	80055a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fe fd64 	bl	8004044 <HAL_GetTick>
 800557c:	0003      	movs	r3, r0
 800557e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005580:	e009      	b.n	8005596 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005582:	f7fe fd5f 	bl	8004044 <HAL_GetTick>
 8005586:	0002      	movs	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	4a79      	ldr	r2, [pc, #484]	; (8005774 <HAL_RCC_OscConfig+0x620>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e0e6      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005596:	4b75      	ldr	r3, [pc, #468]	; (800576c <HAL_RCC_OscConfig+0x618>)
 8005598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559a:	2202      	movs	r2, #2
 800559c:	4013      	ands	r3, r2
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x42e>
 80055a0:	e013      	b.n	80055ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a2:	f7fe fd4f 	bl	8004044 <HAL_GetTick>
 80055a6:	0003      	movs	r3, r0
 80055a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055aa:	e009      	b.n	80055c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ac:	f7fe fd4a 	bl	8004044 <HAL_GetTick>
 80055b0:	0002      	movs	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	4a6f      	ldr	r2, [pc, #444]	; (8005774 <HAL_RCC_OscConfig+0x620>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e0d1      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055c0:	4b6a      	ldr	r3, [pc, #424]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80055c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c4:	2202      	movs	r2, #2
 80055c6:	4013      	ands	r3, r2
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80055ca:	231f      	movs	r3, #31
 80055cc:	18fb      	adds	r3, r7, r3
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d105      	bne.n	80055e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80055d4:	4b65      	ldr	r3, [pc, #404]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80055d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d8:	4b64      	ldr	r3, [pc, #400]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80055da:	4967      	ldr	r1, [pc, #412]	; (8005778 <HAL_RCC_OscConfig+0x624>)
 80055dc:	400a      	ands	r2, r1
 80055de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d100      	bne.n	80055ea <HAL_RCC_OscConfig+0x496>
 80055e8:	e0bb      	b.n	8005762 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055ea:	4b60      	ldr	r3, [pc, #384]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2238      	movs	r2, #56	; 0x38
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d100      	bne.n	80055f8 <HAL_RCC_OscConfig+0x4a4>
 80055f6:	e07b      	b.n	80056f0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d156      	bne.n	80056ae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005600:	4b5a      	ldr	r3, [pc, #360]	; (800576c <HAL_RCC_OscConfig+0x618>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	4b59      	ldr	r3, [pc, #356]	; (800576c <HAL_RCC_OscConfig+0x618>)
 8005606:	495d      	ldr	r1, [pc, #372]	; (800577c <HAL_RCC_OscConfig+0x628>)
 8005608:	400a      	ands	r2, r1
 800560a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fe fd1a 	bl	8004044 <HAL_GetTick>
 8005610:	0003      	movs	r3, r0
 8005612:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005616:	f7fe fd15 	bl	8004044 <HAL_GetTick>
 800561a:	0002      	movs	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e09d      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005628:	4b50      	ldr	r3, [pc, #320]	; (800576c <HAL_RCC_OscConfig+0x618>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	049b      	lsls	r3, r3, #18
 8005630:	4013      	ands	r3, r2
 8005632:	d1f0      	bne.n	8005616 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005634:	4b4d      	ldr	r3, [pc, #308]	; (800576c <HAL_RCC_OscConfig+0x618>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	4a51      	ldr	r2, [pc, #324]	; (8005780 <HAL_RCC_OscConfig+0x62c>)
 800563a:	4013      	ands	r3, r2
 800563c:	0019      	movs	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1a      	ldr	r2, [r3, #32]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	431a      	orrs	r2, r3
 8005662:	4b42      	ldr	r3, [pc, #264]	; (800576c <HAL_RCC_OscConfig+0x618>)
 8005664:	430a      	orrs	r2, r1
 8005666:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005668:	4b40      	ldr	r3, [pc, #256]	; (800576c <HAL_RCC_OscConfig+0x618>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4b3f      	ldr	r3, [pc, #252]	; (800576c <HAL_RCC_OscConfig+0x618>)
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	0449      	lsls	r1, r1, #17
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005676:	4b3d      	ldr	r3, [pc, #244]	; (800576c <HAL_RCC_OscConfig+0x618>)
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	4b3c      	ldr	r3, [pc, #240]	; (800576c <HAL_RCC_OscConfig+0x618>)
 800567c:	2180      	movs	r1, #128	; 0x80
 800567e:	0549      	lsls	r1, r1, #21
 8005680:	430a      	orrs	r2, r1
 8005682:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fe fcde 	bl	8004044 <HAL_GetTick>
 8005688:	0003      	movs	r3, r0
 800568a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568e:	f7fe fcd9 	bl	8004044 <HAL_GetTick>
 8005692:	0002      	movs	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e061      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a0:	4b32      	ldr	r3, [pc, #200]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	049b      	lsls	r3, r3, #18
 80056a8:	4013      	ands	r3, r2
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x53a>
 80056ac:	e059      	b.n	8005762 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ae:	4b2f      	ldr	r3, [pc, #188]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b2e      	ldr	r3, [pc, #184]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80056b4:	4931      	ldr	r1, [pc, #196]	; (800577c <HAL_RCC_OscConfig+0x628>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fe fcc3 	bl	8004044 <HAL_GetTick>
 80056be:	0003      	movs	r3, r0
 80056c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c4:	f7fe fcbe 	bl	8004044 <HAL_GetTick>
 80056c8:	0002      	movs	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e046      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d6:	4b25      	ldr	r3, [pc, #148]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	2380      	movs	r3, #128	; 0x80
 80056dc:	049b      	lsls	r3, r3, #18
 80056de:	4013      	ands	r3, r2
 80056e0:	d1f0      	bne.n	80056c4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80056e2:	4b22      	ldr	r3, [pc, #136]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	4b21      	ldr	r3, [pc, #132]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80056e8:	4926      	ldr	r1, [pc, #152]	; (8005784 <HAL_RCC_OscConfig+0x630>)
 80056ea:	400a      	ands	r2, r1
 80056ec:	60da      	str	r2, [r3, #12]
 80056ee:	e038      	b.n	8005762 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e033      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80056fc:	4b1b      	ldr	r3, [pc, #108]	; (800576c <HAL_RCC_OscConfig+0x618>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2203      	movs	r2, #3
 8005706:	401a      	ands	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	429a      	cmp	r2, r3
 800570e:	d126      	bne.n	800575e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2270      	movs	r2, #112	; 0x70
 8005714:	401a      	ands	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d11f      	bne.n	800575e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	23fe      	movs	r3, #254	; 0xfe
 8005722:	01db      	lsls	r3, r3, #7
 8005724:	401a      	ands	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d116      	bne.n	800575e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	23f8      	movs	r3, #248	; 0xf8
 8005734:	039b      	lsls	r3, r3, #14
 8005736:	401a      	ands	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800573c:	429a      	cmp	r2, r3
 800573e:	d10e      	bne.n	800575e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	23e0      	movs	r3, #224	; 0xe0
 8005744:	051b      	lsls	r3, r3, #20
 8005746:	401a      	ands	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d106      	bne.n	800575e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	0f5b      	lsrs	r3, r3, #29
 8005754:	075a      	lsls	r2, r3, #29
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800575a:	429a      	cmp	r2, r3
 800575c:	d001      	beq.n	8005762 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	0018      	movs	r0, r3
 8005766:	46bd      	mov	sp, r7
 8005768:	b008      	add	sp, #32
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40021000 	.word	0x40021000
 8005770:	40007000 	.word	0x40007000
 8005774:	00001388 	.word	0x00001388
 8005778:	efffffff 	.word	0xefffffff
 800577c:	feffffff 	.word	0xfeffffff
 8005780:	11c1808c 	.word	0x11c1808c
 8005784:	eefefffc 	.word	0xeefefffc

08005788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0e9      	b.n	8005970 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800579c:	4b76      	ldr	r3, [pc, #472]	; (8005978 <HAL_RCC_ClockConfig+0x1f0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2207      	movs	r2, #7
 80057a2:	4013      	ands	r3, r2
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d91e      	bls.n	80057e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057aa:	4b73      	ldr	r3, [pc, #460]	; (8005978 <HAL_RCC_ClockConfig+0x1f0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2207      	movs	r2, #7
 80057b0:	4393      	bics	r3, r2
 80057b2:	0019      	movs	r1, r3
 80057b4:	4b70      	ldr	r3, [pc, #448]	; (8005978 <HAL_RCC_ClockConfig+0x1f0>)
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057bc:	f7fe fc42 	bl	8004044 <HAL_GetTick>
 80057c0:	0003      	movs	r3, r0
 80057c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057c4:	e009      	b.n	80057da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c6:	f7fe fc3d 	bl	8004044 <HAL_GetTick>
 80057ca:	0002      	movs	r2, r0
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	4a6a      	ldr	r2, [pc, #424]	; (800597c <HAL_RCC_ClockConfig+0x1f4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e0ca      	b.n	8005970 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057da:	4b67      	ldr	r3, [pc, #412]	; (8005978 <HAL_RCC_ClockConfig+0x1f0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2207      	movs	r2, #7
 80057e0:	4013      	ands	r3, r2
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d1ee      	bne.n	80057c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2202      	movs	r2, #2
 80057ee:	4013      	ands	r3, r2
 80057f0:	d015      	beq.n	800581e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2204      	movs	r2, #4
 80057f8:	4013      	ands	r3, r2
 80057fa:	d006      	beq.n	800580a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80057fc:	4b60      	ldr	r3, [pc, #384]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	4b5f      	ldr	r3, [pc, #380]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 8005802:	21e0      	movs	r1, #224	; 0xe0
 8005804:	01c9      	lsls	r1, r1, #7
 8005806:	430a      	orrs	r2, r1
 8005808:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800580a:	4b5d      	ldr	r3, [pc, #372]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4a5d      	ldr	r2, [pc, #372]	; (8005984 <HAL_RCC_ClockConfig+0x1fc>)
 8005810:	4013      	ands	r3, r2
 8005812:	0019      	movs	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	4b59      	ldr	r3, [pc, #356]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2201      	movs	r2, #1
 8005824:	4013      	ands	r3, r2
 8005826:	d057      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d107      	bne.n	8005840 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005830:	4b53      	ldr	r3, [pc, #332]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	029b      	lsls	r3, r3, #10
 8005838:	4013      	ands	r3, r2
 800583a:	d12b      	bne.n	8005894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e097      	b.n	8005970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d107      	bne.n	8005858 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005848:	4b4d      	ldr	r3, [pc, #308]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	049b      	lsls	r3, r3, #18
 8005850:	4013      	ands	r3, r2
 8005852:	d11f      	bne.n	8005894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e08b      	b.n	8005970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d107      	bne.n	8005870 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005860:	4b47      	ldr	r3, [pc, #284]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4013      	ands	r3, r2
 800586a:	d113      	bne.n	8005894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e07f      	b.n	8005970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b03      	cmp	r3, #3
 8005876:	d106      	bne.n	8005886 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005878:	4b41      	ldr	r3, [pc, #260]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 800587a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587c:	2202      	movs	r2, #2
 800587e:	4013      	ands	r3, r2
 8005880:	d108      	bne.n	8005894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e074      	b.n	8005970 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005886:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 8005888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588a:	2202      	movs	r2, #2
 800588c:	4013      	ands	r3, r2
 800588e:	d101      	bne.n	8005894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e06d      	b.n	8005970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005894:	4b3a      	ldr	r3, [pc, #232]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2207      	movs	r2, #7
 800589a:	4393      	bics	r3, r2
 800589c:	0019      	movs	r1, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	4b37      	ldr	r3, [pc, #220]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 80058a4:	430a      	orrs	r2, r1
 80058a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a8:	f7fe fbcc 	bl	8004044 <HAL_GetTick>
 80058ac:	0003      	movs	r3, r0
 80058ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b0:	e009      	b.n	80058c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b2:	f7fe fbc7 	bl	8004044 <HAL_GetTick>
 80058b6:	0002      	movs	r2, r0
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	4a2f      	ldr	r2, [pc, #188]	; (800597c <HAL_RCC_ClockConfig+0x1f4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e054      	b.n	8005970 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c6:	4b2e      	ldr	r3, [pc, #184]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	2238      	movs	r2, #56	; 0x38
 80058cc:	401a      	ands	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d1ec      	bne.n	80058b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058d8:	4b27      	ldr	r3, [pc, #156]	; (8005978 <HAL_RCC_ClockConfig+0x1f0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2207      	movs	r2, #7
 80058de:	4013      	ands	r3, r2
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d21e      	bcs.n	8005924 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <HAL_RCC_ClockConfig+0x1f0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2207      	movs	r2, #7
 80058ec:	4393      	bics	r3, r2
 80058ee:	0019      	movs	r1, r3
 80058f0:	4b21      	ldr	r3, [pc, #132]	; (8005978 <HAL_RCC_ClockConfig+0x1f0>)
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058f8:	f7fe fba4 	bl	8004044 <HAL_GetTick>
 80058fc:	0003      	movs	r3, r0
 80058fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005900:	e009      	b.n	8005916 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005902:	f7fe fb9f 	bl	8004044 <HAL_GetTick>
 8005906:	0002      	movs	r2, r0
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_RCC_ClockConfig+0x1f4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e02c      	b.n	8005970 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005916:	4b18      	ldr	r3, [pc, #96]	; (8005978 <HAL_RCC_ClockConfig+0x1f0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2207      	movs	r2, #7
 800591c:	4013      	ands	r3, r2
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d1ee      	bne.n	8005902 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2204      	movs	r2, #4
 800592a:	4013      	ands	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800592e:	4b14      	ldr	r3, [pc, #80]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	4a15      	ldr	r2, [pc, #84]	; (8005988 <HAL_RCC_ClockConfig+0x200>)
 8005934:	4013      	ands	r3, r2
 8005936:	0019      	movs	r1, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	4b10      	ldr	r3, [pc, #64]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 800593e:	430a      	orrs	r2, r1
 8005940:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005942:	f000 f829 	bl	8005998 <HAL_RCC_GetSysClockFreq>
 8005946:	0001      	movs	r1, r0
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <HAL_RCC_ClockConfig+0x1f8>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	0a1b      	lsrs	r3, r3, #8
 800594e:	220f      	movs	r2, #15
 8005950:	401a      	ands	r2, r3
 8005952:	4b0e      	ldr	r3, [pc, #56]	; (800598c <HAL_RCC_ClockConfig+0x204>)
 8005954:	0092      	lsls	r2, r2, #2
 8005956:	58d3      	ldr	r3, [r2, r3]
 8005958:	221f      	movs	r2, #31
 800595a:	4013      	ands	r3, r2
 800595c:	000a      	movs	r2, r1
 800595e:	40da      	lsrs	r2, r3
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <HAL_RCC_ClockConfig+0x208>)
 8005962:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_RCC_ClockConfig+0x20c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	0018      	movs	r0, r3
 800596a:	f7fe fb0f 	bl	8003f8c <HAL_InitTick>
 800596e:	0003      	movs	r3, r0
}
 8005970:	0018      	movs	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	b004      	add	sp, #16
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40022000 	.word	0x40022000
 800597c:	00001388 	.word	0x00001388
 8005980:	40021000 	.word	0x40021000
 8005984:	fffff0ff 	.word	0xfffff0ff
 8005988:	ffff8fff 	.word	0xffff8fff
 800598c:	080087ec 	.word	0x080087ec
 8005990:	20000008 	.word	0x20000008
 8005994:	2000000c 	.word	0x2000000c

08005998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800599e:	4b3c      	ldr	r3, [pc, #240]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2238      	movs	r2, #56	; 0x38
 80059a4:	4013      	ands	r3, r2
 80059a6:	d10f      	bne.n	80059c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80059a8:	4b39      	ldr	r3, [pc, #228]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	0adb      	lsrs	r3, r3, #11
 80059ae:	2207      	movs	r2, #7
 80059b0:	4013      	ands	r3, r2
 80059b2:	2201      	movs	r2, #1
 80059b4:	409a      	lsls	r2, r3
 80059b6:	0013      	movs	r3, r2
 80059b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	4835      	ldr	r0, [pc, #212]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xfc>)
 80059be:	f7fa fbab 	bl	8000118 <__udivsi3>
 80059c2:	0003      	movs	r3, r0
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	e05d      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059c8:	4b31      	ldr	r3, [pc, #196]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2238      	movs	r2, #56	; 0x38
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d102      	bne.n	80059da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059d4:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x100>)
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	e054      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059da:	4b2d      	ldr	r3, [pc, #180]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2238      	movs	r2, #56	; 0x38
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d138      	bne.n	8005a58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80059e6:	4b2a      	ldr	r3, [pc, #168]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2203      	movs	r2, #3
 80059ec:	4013      	ands	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059f0:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	2207      	movs	r2, #7
 80059f8:	4013      	ands	r3, r2
 80059fa:	3301      	adds	r3, #1
 80059fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d10d      	bne.n	8005a20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	4824      	ldr	r0, [pc, #144]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x100>)
 8005a08:	f7fa fb86 	bl	8000118 <__udivsi3>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	0019      	movs	r1, r3
 8005a10:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	227f      	movs	r2, #127	; 0x7f
 8005a18:	4013      	ands	r3, r2
 8005a1a:	434b      	muls	r3, r1
 8005a1c:	617b      	str	r3, [r7, #20]
        break;
 8005a1e:	e00d      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005a20:	68b9      	ldr	r1, [r7, #8]
 8005a22:	481c      	ldr	r0, [pc, #112]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005a24:	f7fa fb78 	bl	8000118 <__udivsi3>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	0019      	movs	r1, r3
 8005a2c:	4b18      	ldr	r3, [pc, #96]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	0a1b      	lsrs	r3, r3, #8
 8005a32:	227f      	movs	r2, #127	; 0x7f
 8005a34:	4013      	ands	r3, r2
 8005a36:	434b      	muls	r3, r1
 8005a38:	617b      	str	r3, [r7, #20]
        break;
 8005a3a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005a3c:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	0f5b      	lsrs	r3, r3, #29
 8005a42:	2207      	movs	r2, #7
 8005a44:	4013      	ands	r3, r2
 8005a46:	3301      	adds	r3, #1
 8005a48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	6978      	ldr	r0, [r7, #20]
 8005a4e:	f7fa fb63 	bl	8000118 <__udivsi3>
 8005a52:	0003      	movs	r3, r0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e015      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005a58:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2238      	movs	r2, #56	; 0x38
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d103      	bne.n	8005a6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	e00b      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005a6c:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2238      	movs	r2, #56	; 0x38
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b18      	cmp	r3, #24
 8005a76:	d103      	bne.n	8005a80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005a78:	23fa      	movs	r3, #250	; 0xfa
 8005a7a:	01db      	lsls	r3, r3, #7
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	e001      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a84:	693b      	ldr	r3, [r7, #16]
}
 8005a86:	0018      	movs	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b006      	add	sp, #24
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	40021000 	.word	0x40021000
 8005a94:	00f42400 	.word	0x00f42400
 8005a98:	007a1200 	.word	0x007a1200

08005a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa0:	4b02      	ldr	r3, [pc, #8]	; (8005aac <HAL_RCC_GetHCLKFreq+0x10>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
}
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	20000008 	.word	0x20000008

08005ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab0:	b5b0      	push	{r4, r5, r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ab4:	f7ff fff2 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 8005ab8:	0004      	movs	r4, r0
 8005aba:	f7ff fb3f 	bl	800513c <LL_RCC_GetAPB1Prescaler>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	0b1a      	lsrs	r2, r3, #12
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	58d3      	ldr	r3, [r2, r3]
 8005ac8:	221f      	movs	r2, #31
 8005aca:	4013      	ands	r3, r2
 8005acc:	40dc      	lsrs	r4, r3
 8005ace:	0023      	movs	r3, r4
}
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	0800882c 	.word	0x0800882c

08005adc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005ae4:	2313      	movs	r3, #19
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aec:	2312      	movs	r3, #18
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	029b      	lsls	r3, r3, #10
 8005afc:	4013      	ands	r3, r2
 8005afe:	d100      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005b00:	e0a3      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b02:	2011      	movs	r0, #17
 8005b04:	183b      	adds	r3, r7, r0
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b0a:	4bc3      	ldr	r3, [pc, #780]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	055b      	lsls	r3, r3, #21
 8005b12:	4013      	ands	r3, r2
 8005b14:	d110      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b16:	4bc0      	ldr	r3, [pc, #768]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b1a:	4bbf      	ldr	r3, [pc, #764]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b1c:	2180      	movs	r1, #128	; 0x80
 8005b1e:	0549      	lsls	r1, r1, #21
 8005b20:	430a      	orrs	r2, r1
 8005b22:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b24:	4bbc      	ldr	r3, [pc, #752]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	055b      	lsls	r3, r3, #21
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	60bb      	str	r3, [r7, #8]
 8005b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b32:	183b      	adds	r3, r7, r0
 8005b34:	2201      	movs	r2, #1
 8005b36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b38:	4bb8      	ldr	r3, [pc, #736]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4bb7      	ldr	r3, [pc, #732]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005b3e:	2180      	movs	r1, #128	; 0x80
 8005b40:	0049      	lsls	r1, r1, #1
 8005b42:	430a      	orrs	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b46:	f7fe fa7d 	bl	8004044 <HAL_GetTick>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b4e:	e00b      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b50:	f7fe fa78 	bl	8004044 <HAL_GetTick>
 8005b54:	0002      	movs	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d904      	bls.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005b5e:	2313      	movs	r3, #19
 8005b60:	18fb      	adds	r3, r7, r3
 8005b62:	2203      	movs	r2, #3
 8005b64:	701a      	strb	r2, [r3, #0]
        break;
 8005b66:	e005      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b68:	4bac      	ldr	r3, [pc, #688]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4013      	ands	r3, r2
 8005b72:	d0ed      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005b74:	2313      	movs	r3, #19
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d154      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b7e:	4ba6      	ldr	r3, [pc, #664]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b82:	23c0      	movs	r3, #192	; 0xc0
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4013      	ands	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d019      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d014      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b9a:	4b9f      	ldr	r3, [pc, #636]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9e:	4aa0      	ldr	r2, [pc, #640]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ba4:	4b9c      	ldr	r3, [pc, #624]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ba6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ba8:	4b9b      	ldr	r3, [pc, #620]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005baa:	2180      	movs	r1, #128	; 0x80
 8005bac:	0249      	lsls	r1, r1, #9
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bb2:	4b99      	ldr	r3, [pc, #612]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bb6:	4b98      	ldr	r3, [pc, #608]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bb8:	499a      	ldr	r1, [pc, #616]	; (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005bba:	400a      	ands	r2, r1
 8005bbc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bbe:	4b96      	ldr	r3, [pc, #600]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d016      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fe fa3a 	bl	8004044 <HAL_GetTick>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bd4:	e00c      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd6:	f7fe fa35 	bl	8004044 <HAL_GetTick>
 8005bda:	0002      	movs	r2, r0
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	4a91      	ldr	r2, [pc, #580]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d904      	bls.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005be6:	2313      	movs	r3, #19
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	2203      	movs	r2, #3
 8005bec:	701a      	strb	r2, [r3, #0]
            break;
 8005bee:	e004      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bf0:	4b89      	ldr	r3, [pc, #548]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d0ed      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005bfa:	2313      	movs	r3, #19
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c04:	4b84      	ldr	r3, [pc, #528]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c08:	4a85      	ldr	r2, [pc, #532]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	0019      	movs	r1, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c12:	4b81      	ldr	r3, [pc, #516]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c14:	430a      	orrs	r2, r1
 8005c16:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c18:	e00c      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c1a:	2312      	movs	r3, #18
 8005c1c:	18fb      	adds	r3, r7, r3
 8005c1e:	2213      	movs	r2, #19
 8005c20:	18ba      	adds	r2, r7, r2
 8005c22:	7812      	ldrb	r2, [r2, #0]
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	e005      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	2312      	movs	r3, #18
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	2213      	movs	r2, #19
 8005c2e:	18ba      	adds	r2, r7, r2
 8005c30:	7812      	ldrb	r2, [r2, #0]
 8005c32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c34:	2311      	movs	r3, #17
 8005c36:	18fb      	adds	r3, r7, r3
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d105      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c3e:	4b76      	ldr	r3, [pc, #472]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c42:	4b75      	ldr	r3, [pc, #468]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c44:	4979      	ldr	r1, [pc, #484]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005c46:	400a      	ands	r2, r1
 8005c48:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	4013      	ands	r3, r2
 8005c52:	d009      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c54:	4b70      	ldr	r3, [pc, #448]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c58:	2203      	movs	r2, #3
 8005c5a:	4393      	bics	r3, r2
 8005c5c:	0019      	movs	r1, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	4b6d      	ldr	r3, [pc, #436]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c64:	430a      	orrs	r2, r1
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c72:	4b69      	ldr	r3, [pc, #420]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c76:	220c      	movs	r2, #12
 8005c78:	4393      	bics	r3, r2
 8005c7a:	0019      	movs	r1, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	4b65      	ldr	r3, [pc, #404]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c82:	430a      	orrs	r2, r1
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2210      	movs	r2, #16
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c90:	4b61      	ldr	r3, [pc, #388]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c94:	4a66      	ldr	r2, [pc, #408]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	0019      	movs	r1, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	4b5e      	ldr	r3, [pc, #376]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4013      	ands	r3, r2
 8005cae:	d009      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cb0:	4b59      	ldr	r3, [pc, #356]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	4a5f      	ldr	r2, [pc, #380]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	0019      	movs	r1, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	4b56      	ldr	r3, [pc, #344]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d009      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cd0:	4b51      	ldr	r3, [pc, #324]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd4:	4a58      	ldr	r2, [pc, #352]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	0019      	movs	r1, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69da      	ldr	r2, [r3, #28]
 8005cde:	4b4e      	ldr	r3, [pc, #312]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	4013      	ands	r3, r2
 8005cec:	d009      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cee:	4b4a      	ldr	r3, [pc, #296]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	4a52      	ldr	r2, [pc, #328]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	0019      	movs	r1, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	4b46      	ldr	r3, [pc, #280]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	2380      	movs	r3, #128	; 0x80
 8005d08:	01db      	lsls	r3, r3, #7
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d015      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d0e:	4b42      	ldr	r3, [pc, #264]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	0899      	lsrs	r1, r3, #2
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1a      	ldr	r2, [r3, #32]
 8005d1a:	4b3f      	ldr	r3, [pc, #252]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	05db      	lsls	r3, r3, #23
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d106      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005d2c:	4b3a      	ldr	r3, [pc, #232]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	4b39      	ldr	r3, [pc, #228]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d32:	2180      	movs	r1, #128	; 0x80
 8005d34:	0249      	lsls	r1, r1, #9
 8005d36:	430a      	orrs	r2, r1
 8005d38:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	2380      	movs	r3, #128	; 0x80
 8005d40:	031b      	lsls	r3, r3, #12
 8005d42:	4013      	ands	r3, r2
 8005d44:	d009      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d46:	4b34      	ldr	r3, [pc, #208]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4a:	2240      	movs	r2, #64	; 0x40
 8005d4c:	4393      	bics	r3, r2
 8005d4e:	0019      	movs	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d54:	4b30      	ldr	r3, [pc, #192]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d56:	430a      	orrs	r2, r1
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	039b      	lsls	r3, r3, #14
 8005d62:	4013      	ands	r3, r2
 8005d64:	d016      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d66:	4b2c      	ldr	r3, [pc, #176]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6a:	4a35      	ldr	r2, [pc, #212]	; (8005e40 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	0019      	movs	r1, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d74:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d76:	430a      	orrs	r2, r1
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d7e:	2380      	movs	r3, #128	; 0x80
 8005d80:	03db      	lsls	r3, r3, #15
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d106      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005d86:	4b24      	ldr	r3, [pc, #144]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d8c:	2180      	movs	r1, #128	; 0x80
 8005d8e:	0449      	lsls	r1, r1, #17
 8005d90:	430a      	orrs	r2, r1
 8005d92:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	03db      	lsls	r3, r3, #15
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d016      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005da0:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da4:	4a27      	ldr	r2, [pc, #156]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	0019      	movs	r1, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dae:	4b1a      	ldr	r3, [pc, #104]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005db0:	430a      	orrs	r2, r1
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db8:	2380      	movs	r3, #128	; 0x80
 8005dba:	045b      	lsls	r3, r3, #17
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d106      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005dc0:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	4b14      	ldr	r3, [pc, #80]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc6:	2180      	movs	r1, #128	; 0x80
 8005dc8:	0449      	lsls	r1, r1, #17
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d016      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	4a1a      	ldr	r2, [pc, #104]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	0019      	movs	r1, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dea:	430a      	orrs	r2, r1
 8005dec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	2380      	movs	r3, #128	; 0x80
 8005df4:	01db      	lsls	r3, r3, #7
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d106      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005dfa:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e00:	2180      	movs	r1, #128	; 0x80
 8005e02:	0249      	lsls	r1, r1, #9
 8005e04:	430a      	orrs	r2, r1
 8005e06:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005e08:	2312      	movs	r3, #18
 8005e0a:	18fb      	adds	r3, r7, r3
 8005e0c:	781b      	ldrb	r3, [r3, #0]
}
 8005e0e:	0018      	movs	r0, r3
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b006      	add	sp, #24
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	40007000 	.word	0x40007000
 8005e20:	fffffcff 	.word	0xfffffcff
 8005e24:	fffeffff 	.word	0xfffeffff
 8005e28:	00001388 	.word	0x00001388
 8005e2c:	efffffff 	.word	0xefffffff
 8005e30:	fffff3ff 	.word	0xfffff3ff
 8005e34:	fff3ffff 	.word	0xfff3ffff
 8005e38:	ffcfffff 	.word	0xffcfffff
 8005e3c:	ffffcfff 	.word	0xffffcfff
 8005e40:	ffbfffff 	.word	0xffbfffff
 8005e44:	feffffff 	.word	0xfeffffff
 8005e48:	ffff3fff 	.word	0xffff3fff

08005e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e0a8      	b.n	8005fb0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	2382      	movs	r3, #130	; 0x82
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d009      	beq.n	8005e86 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	61da      	str	r2, [r3, #28]
 8005e78:	e005      	b.n	8005e86 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	225d      	movs	r2, #93	; 0x5d
 8005e90:	5c9b      	ldrb	r3, [r3, r2]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d107      	bne.n	8005ea8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	225c      	movs	r2, #92	; 0x5c
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f7fd fe44 	bl	8003b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	225d      	movs	r2, #93	; 0x5d
 8005eac:	2102      	movs	r1, #2
 8005eae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2140      	movs	r1, #64	; 0x40
 8005ebc:	438a      	bics	r2, r1
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	23e0      	movs	r3, #224	; 0xe0
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d902      	bls.n	8005ed2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e002      	b.n	8005ed8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ed2:	2380      	movs	r3, #128	; 0x80
 8005ed4:	015b      	lsls	r3, r3, #5
 8005ed6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	23f0      	movs	r3, #240	; 0xf0
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d008      	beq.n	8005ef6 <HAL_SPI_Init+0xaa>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	23e0      	movs	r3, #224	; 0xe0
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d002      	beq.n	8005ef6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	2382      	movs	r3, #130	; 0x82
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	401a      	ands	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6899      	ldr	r1, [r3, #8]
 8005f04:	2384      	movs	r3, #132	; 0x84
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	400b      	ands	r3, r1
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2102      	movs	r1, #2
 8005f12:	400b      	ands	r3, r1
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	400b      	ands	r3, r1
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6999      	ldr	r1, [r3, #24]
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	400b      	ands	r3, r1
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	2138      	movs	r1, #56	; 0x38
 8005f32:	400b      	ands	r3, r1
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	2180      	movs	r1, #128	; 0x80
 8005f3c:	400b      	ands	r3, r1
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	0011      	movs	r1, r2
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f46:	2380      	movs	r3, #128	; 0x80
 8005f48:	019b      	lsls	r3, r3, #6
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	401a      	ands	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2110      	movs	r1, #16
 8005f64:	400b      	ands	r3, r1
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6c:	2108      	movs	r1, #8
 8005f6e:	400b      	ands	r3, r1
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68d9      	ldr	r1, [r3, #12]
 8005f76:	23f0      	movs	r3, #240	; 0xf0
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	400b      	ands	r3, r1
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	0011      	movs	r1, r2
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	2380      	movs	r3, #128	; 0x80
 8005f84:	015b      	lsls	r3, r3, #5
 8005f86:	401a      	ands	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4907      	ldr	r1, [pc, #28]	; (8005fb8 <HAL_SPI_Init+0x16c>)
 8005f9c:	400a      	ands	r2, r1
 8005f9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	225d      	movs	r2, #93	; 0x5d
 8005faa:	2101      	movs	r1, #1
 8005fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b004      	add	sp, #16
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	fffff7ff 	.word	0xfffff7ff

08005fbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	1dbb      	adds	r3, r7, #6
 8005fca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fcc:	231f      	movs	r3, #31
 8005fce:	18fb      	adds	r3, r7, r3
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	225c      	movs	r2, #92	; 0x5c
 8005fd8:	5c9b      	ldrb	r3, [r3, r2]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_SPI_Transmit+0x26>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e140      	b.n	8006264 <HAL_SPI_Transmit+0x2a8>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	225c      	movs	r2, #92	; 0x5c
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fea:	f7fe f82b 	bl	8004044 <HAL_GetTick>
 8005fee:	0003      	movs	r3, r0
 8005ff0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005ff2:	2316      	movs	r3, #22
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	1dba      	adds	r2, r7, #6
 8005ff8:	8812      	ldrh	r2, [r2, #0]
 8005ffa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	225d      	movs	r2, #93	; 0x5d
 8006000:	5c9b      	ldrb	r3, [r3, r2]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	d004      	beq.n	8006012 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006008:	231f      	movs	r3, #31
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	2202      	movs	r2, #2
 800600e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006010:	e11d      	b.n	800624e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_SPI_Transmit+0x64>
 8006018:	1dbb      	adds	r3, r7, #6
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006020:	231f      	movs	r3, #31
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	2201      	movs	r2, #1
 8006026:	701a      	strb	r2, [r3, #0]
    goto error;
 8006028:	e111      	b.n	800624e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	225d      	movs	r2, #93	; 0x5d
 800602e:	2103      	movs	r1, #3
 8006030:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1dba      	adds	r2, r7, #6
 8006042:	8812      	ldrh	r2, [r2, #0]
 8006044:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	1dba      	adds	r2, r7, #6
 800604a:	8812      	ldrh	r2, [r2, #0]
 800604c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2244      	movs	r2, #68	; 0x44
 8006058:	2100      	movs	r1, #0
 800605a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2246      	movs	r2, #70	; 0x46
 8006060:	2100      	movs	r1, #0
 8006062:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	429a      	cmp	r2, r3
 800607a:	d110      	bne.n	800609e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2140      	movs	r1, #64	; 0x40
 8006088:	438a      	bics	r2, r1
 800608a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2180      	movs	r1, #128	; 0x80
 8006098:	01c9      	lsls	r1, r1, #7
 800609a:	430a      	orrs	r2, r1
 800609c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2240      	movs	r2, #64	; 0x40
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	d007      	beq.n	80060bc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2140      	movs	r1, #64	; 0x40
 80060b8:	430a      	orrs	r2, r1
 80060ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	23e0      	movs	r3, #224	; 0xe0
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d94e      	bls.n	8006166 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <HAL_SPI_Transmit+0x11e>
 80060d0:	2316      	movs	r3, #22
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d13f      	bne.n	800615a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	881a      	ldrh	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	1c9a      	adds	r2, r3, #2
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060fe:	e02c      	b.n	800615a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2202      	movs	r2, #2
 8006108:	4013      	ands	r3, r2
 800610a:	2b02      	cmp	r3, #2
 800610c:	d112      	bne.n	8006134 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006112:	881a      	ldrh	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	1c9a      	adds	r2, r3, #2
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006132:	e012      	b.n	800615a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006134:	f7fd ff86 	bl	8004044 <HAL_GetTick>
 8006138:	0002      	movs	r2, r0
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d802      	bhi.n	800614a <HAL_SPI_Transmit+0x18e>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	3301      	adds	r3, #1
 8006148:	d102      	bne.n	8006150 <HAL_SPI_Transmit+0x194>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006150:	231f      	movs	r3, #31
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2203      	movs	r2, #3
 8006156:	701a      	strb	r2, [r3, #0]
          goto error;
 8006158:	e079      	b.n	800624e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1cd      	bne.n	8006100 <HAL_SPI_Transmit+0x144>
 8006164:	e04f      	b.n	8006206 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <HAL_SPI_Transmit+0x1bc>
 800616e:	2316      	movs	r3, #22
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d141      	bne.n	80061fc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800619e:	e02d      	b.n	80061fc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2202      	movs	r2, #2
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d113      	bne.n	80061d6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	7812      	ldrb	r2, [r2, #0]
 80061ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061d4:	e012      	b.n	80061fc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061d6:	f7fd ff35 	bl	8004044 <HAL_GetTick>
 80061da:	0002      	movs	r2, r0
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d802      	bhi.n	80061ec <HAL_SPI_Transmit+0x230>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	3301      	adds	r3, #1
 80061ea:	d102      	bne.n	80061f2 <HAL_SPI_Transmit+0x236>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80061f2:	231f      	movs	r3, #31
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	2203      	movs	r2, #3
 80061f8:	701a      	strb	r2, [r3, #0]
          goto error;
 80061fa:	e028      	b.n	800624e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1cc      	bne.n	80061a0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	0018      	movs	r0, r3
 800620e:	f000 f95d 	bl	80064cc <SPI_EndRxTxTransaction>
 8006212:	1e03      	subs	r3, r0, #0
 8006214:	d002      	beq.n	800621c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006242:	231f      	movs	r3, #31
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	2201      	movs	r2, #1
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	e000      	b.n	800624e <HAL_SPI_Transmit+0x292>
  }

error:
 800624c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	225d      	movs	r2, #93	; 0x5d
 8006252:	2101      	movs	r1, #1
 8006254:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	225c      	movs	r2, #92	; 0x5c
 800625a:	2100      	movs	r1, #0
 800625c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800625e:	231f      	movs	r3, #31
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	781b      	ldrb	r3, [r3, #0]
}
 8006264:	0018      	movs	r0, r3
 8006266:	46bd      	mov	sp, r7
 8006268:	b008      	add	sp, #32
 800626a:	bd80      	pop	{r7, pc}

0800626c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	1dfb      	adds	r3, r7, #7
 800627a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800627c:	f7fd fee2 	bl	8004044 <HAL_GetTick>
 8006280:	0002      	movs	r2, r0
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	18d3      	adds	r3, r2, r3
 800628a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800628c:	f7fd feda 	bl	8004044 <HAL_GetTick>
 8006290:	0003      	movs	r3, r0
 8006292:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006294:	4b3a      	ldr	r3, [pc, #232]	; (8006380 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	015b      	lsls	r3, r3, #5
 800629a:	0d1b      	lsrs	r3, r3, #20
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	4353      	muls	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062a2:	e058      	b.n	8006356 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	d055      	beq.n	8006356 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062aa:	f7fd fecb 	bl	8004044 <HAL_GetTick>
 80062ae:	0002      	movs	r2, r0
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d902      	bls.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d142      	bne.n	8006346 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	21e0      	movs	r1, #224	; 0xe0
 80062cc:	438a      	bics	r2, r1
 80062ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	2382      	movs	r3, #130	; 0x82
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	429a      	cmp	r2, r3
 80062da:	d113      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0x98>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	2380      	movs	r3, #128	; 0x80
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d005      	beq.n	80062f4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d107      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2140      	movs	r1, #64	; 0x40
 8006300:	438a      	bics	r2, r1
 8006302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	019b      	lsls	r3, r3, #6
 800630c:	429a      	cmp	r2, r3
 800630e:	d110      	bne.n	8006332 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	491a      	ldr	r1, [pc, #104]	; (8006384 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800631c:	400a      	ands	r2, r1
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	0189      	lsls	r1, r1, #6
 800632e:	430a      	orrs	r2, r1
 8006330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	225d      	movs	r2, #93	; 0x5d
 8006336:	2101      	movs	r1, #1
 8006338:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	225c      	movs	r2, #92	; 0x5c
 800633e:	2100      	movs	r1, #0
 8006340:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e017      	b.n	8006376 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	3b01      	subs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	4013      	ands	r3, r2
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	425a      	negs	r2, r3
 8006366:	4153      	adcs	r3, r2
 8006368:	b2db      	uxtb	r3, r3
 800636a:	001a      	movs	r2, r3
 800636c:	1dfb      	adds	r3, r7, #7
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d197      	bne.n	80062a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	b008      	add	sp, #32
 800637c:	bd80      	pop	{r7, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	20000008 	.word	0x20000008
 8006384:	ffffdfff 	.word	0xffffdfff

08006388 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08a      	sub	sp, #40	; 0x28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006396:	2317      	movs	r3, #23
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800639e:	f7fd fe51 	bl	8004044 <HAL_GetTick>
 80063a2:	0002      	movs	r2, r0
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	18d3      	adds	r3, r2, r3
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80063ae:	f7fd fe49 	bl	8004044 <HAL_GetTick>
 80063b2:	0003      	movs	r3, r0
 80063b4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063be:	4b41      	ldr	r3, [pc, #260]	; (80064c4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	0013      	movs	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	189b      	adds	r3, r3, r2
 80063c8:	00da      	lsls	r2, r3, #3
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	0d1b      	lsrs	r3, r3, #20
 80063ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d0:	4353      	muls	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063d4:	e068      	b.n	80064a8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	23c0      	movs	r3, #192	; 0xc0
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	429a      	cmp	r2, r3
 80063de:	d10a      	bne.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	2117      	movs	r1, #23
 80063ee:	187b      	adds	r3, r7, r1
 80063f0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063f2:	187b      	adds	r3, r7, r1
 80063f4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	d055      	beq.n	80064a8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063fc:	f7fd fe22 	bl	8004044 <HAL_GetTick>
 8006400:	0002      	movs	r2, r0
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006408:	429a      	cmp	r2, r3
 800640a:	d902      	bls.n	8006412 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	d142      	bne.n	8006498 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	21e0      	movs	r1, #224	; 0xe0
 800641e:	438a      	bics	r2, r1
 8006420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	2382      	movs	r3, #130	; 0x82
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	429a      	cmp	r2, r3
 800642c:	d113      	bne.n	8006456 <SPI_WaitFifoStateUntilTimeout+0xce>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	021b      	lsls	r3, r3, #8
 8006436:	429a      	cmp	r2, r3
 8006438:	d005      	beq.n	8006446 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	2380      	movs	r3, #128	; 0x80
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	429a      	cmp	r2, r3
 8006444:	d107      	bne.n	8006456 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2140      	movs	r1, #64	; 0x40
 8006452:	438a      	bics	r2, r1
 8006454:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800645a:	2380      	movs	r3, #128	; 0x80
 800645c:	019b      	lsls	r3, r3, #6
 800645e:	429a      	cmp	r2, r3
 8006460:	d110      	bne.n	8006484 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4916      	ldr	r1, [pc, #88]	; (80064c8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800646e:	400a      	ands	r2, r1
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2180      	movs	r1, #128	; 0x80
 800647e:	0189      	lsls	r1, r1, #6
 8006480:	430a      	orrs	r2, r1
 8006482:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	225d      	movs	r2, #93	; 0x5d
 8006488:	2101      	movs	r1, #1
 800648a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	225c      	movs	r2, #92	; 0x5c
 8006490:	2100      	movs	r1, #0
 8006492:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e010      	b.n	80064ba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	4013      	ands	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d18e      	bne.n	80063d6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	0018      	movs	r0, r3
 80064bc:	46bd      	mov	sp, r7
 80064be:	b00a      	add	sp, #40	; 0x28
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	20000008 	.word	0x20000008
 80064c8:	ffffdfff 	.word	0xffffdfff

080064cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af02      	add	r7, sp, #8
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	23c0      	movs	r3, #192	; 0xc0
 80064dc:	0159      	lsls	r1, r3, #5
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	0013      	movs	r3, r2
 80064e6:	2200      	movs	r2, #0
 80064e8:	f7ff ff4e 	bl	8006388 <SPI_WaitFifoStateUntilTimeout>
 80064ec:	1e03      	subs	r3, r0, #0
 80064ee:	d007      	beq.n	8006500 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f4:	2220      	movs	r2, #32
 80064f6:	431a      	orrs	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e027      	b.n	8006550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	0013      	movs	r3, r2
 800650a:	2200      	movs	r2, #0
 800650c:	2180      	movs	r1, #128	; 0x80
 800650e:	f7ff fead 	bl	800626c <SPI_WaitFlagStateUntilTimeout>
 8006512:	1e03      	subs	r3, r0, #0
 8006514:	d007      	beq.n	8006526 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651a:	2220      	movs	r2, #32
 800651c:	431a      	orrs	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e014      	b.n	8006550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	23c0      	movs	r3, #192	; 0xc0
 800652a:	00d9      	lsls	r1, r3, #3
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	0013      	movs	r3, r2
 8006534:	2200      	movs	r2, #0
 8006536:	f7ff ff27 	bl	8006388 <SPI_WaitFifoStateUntilTimeout>
 800653a:	1e03      	subs	r3, r0, #0
 800653c:	d007      	beq.n	800654e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006542:	2220      	movs	r2, #32
 8006544:	431a      	orrs	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e000      	b.n	8006550 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	0018      	movs	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	b004      	add	sp, #16
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e04a      	b.n	8006600 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	223d      	movs	r2, #61	; 0x3d
 800656e:	5c9b      	ldrb	r3, [r3, r2]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d107      	bne.n	8006586 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	223c      	movs	r2, #60	; 0x3c
 800657a:	2100      	movs	r1, #0
 800657c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	0018      	movs	r0, r3
 8006582:	f7fd fb1f 	bl	8003bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	223d      	movs	r2, #61	; 0x3d
 800658a:	2102      	movs	r1, #2
 800658c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3304      	adds	r3, #4
 8006596:	0019      	movs	r1, r3
 8006598:	0010      	movs	r0, r2
 800659a:	f000 f9e3 	bl	8006964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2248      	movs	r2, #72	; 0x48
 80065a2:	2101      	movs	r1, #1
 80065a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	223e      	movs	r2, #62	; 0x3e
 80065aa:	2101      	movs	r1, #1
 80065ac:	5499      	strb	r1, [r3, r2]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	223f      	movs	r2, #63	; 0x3f
 80065b2:	2101      	movs	r1, #1
 80065b4:	5499      	strb	r1, [r3, r2]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2240      	movs	r2, #64	; 0x40
 80065ba:	2101      	movs	r1, #1
 80065bc:	5499      	strb	r1, [r3, r2]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2241      	movs	r2, #65	; 0x41
 80065c2:	2101      	movs	r1, #1
 80065c4:	5499      	strb	r1, [r3, r2]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2242      	movs	r2, #66	; 0x42
 80065ca:	2101      	movs	r1, #1
 80065cc:	5499      	strb	r1, [r3, r2]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2243      	movs	r2, #67	; 0x43
 80065d2:	2101      	movs	r1, #1
 80065d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2244      	movs	r2, #68	; 0x44
 80065da:	2101      	movs	r1, #1
 80065dc:	5499      	strb	r1, [r3, r2]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2245      	movs	r2, #69	; 0x45
 80065e2:	2101      	movs	r1, #1
 80065e4:	5499      	strb	r1, [r3, r2]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2246      	movs	r2, #70	; 0x46
 80065ea:	2101      	movs	r1, #1
 80065ec:	5499      	strb	r1, [r3, r2]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2247      	movs	r2, #71	; 0x47
 80065f2:	2101      	movs	r1, #1
 80065f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	223d      	movs	r2, #61	; 0x3d
 80065fa:	2101      	movs	r1, #1
 80065fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	0018      	movs	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	b002      	add	sp, #8
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	223d      	movs	r2, #61	; 0x3d
 8006614:	5c9b      	ldrb	r3, [r3, r2]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	d001      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e042      	b.n	80066a6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	223d      	movs	r2, #61	; 0x3d
 8006624:	2102      	movs	r1, #2
 8006626:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2101      	movs	r1, #1
 8006634:	430a      	orrs	r2, r1
 8006636:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1c      	ldr	r2, [pc, #112]	; (80066b0 <HAL_TIM_Base_Start_IT+0xa8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00f      	beq.n	8006662 <HAL_TIM_Base_Start_IT+0x5a>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	2380      	movs	r3, #128	; 0x80
 8006648:	05db      	lsls	r3, r3, #23
 800664a:	429a      	cmp	r2, r3
 800664c:	d009      	beq.n	8006662 <HAL_TIM_Base_Start_IT+0x5a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a18      	ldr	r2, [pc, #96]	; (80066b4 <HAL_TIM_Base_Start_IT+0xac>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_TIM_Base_Start_IT+0x5a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d116      	bne.n	8006690 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	4a14      	ldr	r2, [pc, #80]	; (80066bc <HAL_TIM_Base_Start_IT+0xb4>)
 800666a:	4013      	ands	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b06      	cmp	r3, #6
 8006672:	d016      	beq.n	80066a2 <HAL_TIM_Base_Start_IT+0x9a>
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	2380      	movs	r3, #128	; 0x80
 8006678:	025b      	lsls	r3, r3, #9
 800667a:	429a      	cmp	r2, r3
 800667c:	d011      	beq.n	80066a2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2101      	movs	r1, #1
 800668a:	430a      	orrs	r2, r1
 800668c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800668e:	e008      	b.n	80066a2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2101      	movs	r1, #1
 800669c:	430a      	orrs	r2, r1
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	e000      	b.n	80066a4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	0018      	movs	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b004      	add	sp, #16
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40000400 	.word	0x40000400
 80066b8:	40014000 	.word	0x40014000
 80066bc:	00010007 	.word	0x00010007

080066c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2202      	movs	r2, #2
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d124      	bne.n	8006720 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	2202      	movs	r2, #2
 80066de:	4013      	ands	r3, r2
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d11d      	bne.n	8006720 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2203      	movs	r2, #3
 80066ea:	4252      	negs	r2, r2
 80066ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	2203      	movs	r2, #3
 80066fc:	4013      	ands	r3, r2
 80066fe:	d004      	beq.n	800670a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	0018      	movs	r0, r3
 8006704:	f000 f916 	bl	8006934 <HAL_TIM_IC_CaptureCallback>
 8006708:	e007      	b.n	800671a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	0018      	movs	r0, r3
 800670e:	f000 f909 	bl	8006924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	0018      	movs	r0, r3
 8006716:	f000 f915 	bl	8006944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2204      	movs	r2, #4
 8006728:	4013      	ands	r3, r2
 800672a:	2b04      	cmp	r3, #4
 800672c:	d125      	bne.n	800677a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	2204      	movs	r2, #4
 8006736:	4013      	ands	r3, r2
 8006738:	2b04      	cmp	r3, #4
 800673a:	d11e      	bne.n	800677a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2205      	movs	r2, #5
 8006742:	4252      	negs	r2, r2
 8006744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	23c0      	movs	r3, #192	; 0xc0
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4013      	ands	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	0018      	movs	r0, r3
 800675e:	f000 f8e9 	bl	8006934 <HAL_TIM_IC_CaptureCallback>
 8006762:	e007      	b.n	8006774 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	0018      	movs	r0, r3
 8006768:	f000 f8dc 	bl	8006924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	0018      	movs	r0, r3
 8006770:	f000 f8e8 	bl	8006944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2208      	movs	r2, #8
 8006782:	4013      	ands	r3, r2
 8006784:	2b08      	cmp	r3, #8
 8006786:	d124      	bne.n	80067d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	2208      	movs	r2, #8
 8006790:	4013      	ands	r3, r2
 8006792:	2b08      	cmp	r3, #8
 8006794:	d11d      	bne.n	80067d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2209      	movs	r2, #9
 800679c:	4252      	negs	r2, r2
 800679e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2204      	movs	r2, #4
 80067a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	2203      	movs	r2, #3
 80067ae:	4013      	ands	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	0018      	movs	r0, r3
 80067b6:	f000 f8bd 	bl	8006934 <HAL_TIM_IC_CaptureCallback>
 80067ba:	e007      	b.n	80067cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	0018      	movs	r0, r3
 80067c0:	f000 f8b0 	bl	8006924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	0018      	movs	r0, r3
 80067c8:	f000 f8bc 	bl	8006944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2210      	movs	r2, #16
 80067da:	4013      	ands	r3, r2
 80067dc:	2b10      	cmp	r3, #16
 80067de:	d125      	bne.n	800682c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	2210      	movs	r2, #16
 80067e8:	4013      	ands	r3, r2
 80067ea:	2b10      	cmp	r3, #16
 80067ec:	d11e      	bne.n	800682c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2211      	movs	r2, #17
 80067f4:	4252      	negs	r2, r2
 80067f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2208      	movs	r2, #8
 80067fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	23c0      	movs	r3, #192	; 0xc0
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4013      	ands	r3, r2
 800680a:	d004      	beq.n	8006816 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	0018      	movs	r0, r3
 8006810:	f000 f890 	bl	8006934 <HAL_TIM_IC_CaptureCallback>
 8006814:	e007      	b.n	8006826 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	0018      	movs	r0, r3
 800681a:	f000 f883 	bl	8006924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	0018      	movs	r0, r3
 8006822:	f000 f88f 	bl	8006944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2201      	movs	r2, #1
 8006834:	4013      	ands	r3, r2
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10f      	bne.n	800685a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	4013      	ands	r3, r2
 8006844:	2b01      	cmp	r3, #1
 8006846:	d108      	bne.n	800685a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2202      	movs	r2, #2
 800684e:	4252      	negs	r2, r2
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	0018      	movs	r0, r3
 8006856:	f7fc fd45 	bl	80032e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	2280      	movs	r2, #128	; 0x80
 8006862:	4013      	ands	r3, r2
 8006864:	2b80      	cmp	r3, #128	; 0x80
 8006866:	d10f      	bne.n	8006888 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	2280      	movs	r2, #128	; 0x80
 8006870:	4013      	ands	r3, r2
 8006872:	2b80      	cmp	r3, #128	; 0x80
 8006874:	d108      	bne.n	8006888 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2281      	movs	r2, #129	; 0x81
 800687c:	4252      	negs	r2, r2
 800687e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	0018      	movs	r0, r3
 8006884:	f000 f8f6 	bl	8006a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691a      	ldr	r2, [r3, #16]
 800688e:	2380      	movs	r3, #128	; 0x80
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	401a      	ands	r2, r3
 8006894:	2380      	movs	r3, #128	; 0x80
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	429a      	cmp	r2, r3
 800689a:	d10e      	bne.n	80068ba <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	2280      	movs	r2, #128	; 0x80
 80068a4:	4013      	ands	r3, r2
 80068a6:	2b80      	cmp	r3, #128	; 0x80
 80068a8:	d107      	bne.n	80068ba <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1c      	ldr	r2, [pc, #112]	; (8006920 <HAL_TIM_IRQHandler+0x260>)
 80068b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 f8e5 	bl	8006a84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2240      	movs	r2, #64	; 0x40
 80068c2:	4013      	ands	r3, r2
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	d10f      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	2240      	movs	r2, #64	; 0x40
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d108      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2241      	movs	r2, #65	; 0x41
 80068dc:	4252      	negs	r2, r2
 80068de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 f836 	bl	8006954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2220      	movs	r2, #32
 80068f0:	4013      	ands	r3, r2
 80068f2:	2b20      	cmp	r3, #32
 80068f4:	d10f      	bne.n	8006916 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	4013      	ands	r3, r2
 8006900:	2b20      	cmp	r3, #32
 8006902:	d108      	bne.n	8006916 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2221      	movs	r2, #33	; 0x21
 800690a:	4252      	negs	r2, r2
 800690c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	0018      	movs	r0, r3
 8006912:	f000 f8a7 	bl	8006a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	46bd      	mov	sp, r7
 800691a:	b002      	add	sp, #8
 800691c:	bd80      	pop	{r7, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	fffffeff 	.word	0xfffffeff

08006924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800692c:	46c0      	nop			; (mov r8, r8)
 800692e:	46bd      	mov	sp, r7
 8006930:	b002      	add	sp, #8
 8006932:	bd80      	pop	{r7, pc}

08006934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800693c:	46c0      	nop			; (mov r8, r8)
 800693e:	46bd      	mov	sp, r7
 8006940:	b002      	add	sp, #8
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800694c:	46c0      	nop			; (mov r8, r8)
 800694e:	46bd      	mov	sp, r7
 8006950:	b002      	add	sp, #8
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800695c:	46c0      	nop			; (mov r8, r8)
 800695e:	46bd      	mov	sp, r7
 8006960:	b002      	add	sp, #8
 8006962:	bd80      	pop	{r7, pc}

08006964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a34      	ldr	r2, [pc, #208]	; (8006a48 <TIM_Base_SetConfig+0xe4>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d008      	beq.n	800698e <TIM_Base_SetConfig+0x2a>
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	2380      	movs	r3, #128	; 0x80
 8006980:	05db      	lsls	r3, r3, #23
 8006982:	429a      	cmp	r2, r3
 8006984:	d003      	beq.n	800698e <TIM_Base_SetConfig+0x2a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a30      	ldr	r2, [pc, #192]	; (8006a4c <TIM_Base_SetConfig+0xe8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d108      	bne.n	80069a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2270      	movs	r2, #112	; 0x70
 8006992:	4393      	bics	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a29      	ldr	r2, [pc, #164]	; (8006a48 <TIM_Base_SetConfig+0xe4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d018      	beq.n	80069da <TIM_Base_SetConfig+0x76>
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	2380      	movs	r3, #128	; 0x80
 80069ac:	05db      	lsls	r3, r3, #23
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d013      	beq.n	80069da <TIM_Base_SetConfig+0x76>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a25      	ldr	r2, [pc, #148]	; (8006a4c <TIM_Base_SetConfig+0xe8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00f      	beq.n	80069da <TIM_Base_SetConfig+0x76>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a24      	ldr	r2, [pc, #144]	; (8006a50 <TIM_Base_SetConfig+0xec>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00b      	beq.n	80069da <TIM_Base_SetConfig+0x76>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a23      	ldr	r2, [pc, #140]	; (8006a54 <TIM_Base_SetConfig+0xf0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d007      	beq.n	80069da <TIM_Base_SetConfig+0x76>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a22      	ldr	r2, [pc, #136]	; (8006a58 <TIM_Base_SetConfig+0xf4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_Base_SetConfig+0x76>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a21      	ldr	r2, [pc, #132]	; (8006a5c <TIM_Base_SetConfig+0xf8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d108      	bne.n	80069ec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a20      	ldr	r2, [pc, #128]	; (8006a60 <TIM_Base_SetConfig+0xfc>)
 80069de:	4013      	ands	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2280      	movs	r2, #128	; 0x80
 80069f0:	4393      	bics	r3, r2
 80069f2:	001a      	movs	r2, r3
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a0c      	ldr	r2, [pc, #48]	; (8006a48 <TIM_Base_SetConfig+0xe4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00b      	beq.n	8006a32 <TIM_Base_SetConfig+0xce>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a0d      	ldr	r2, [pc, #52]	; (8006a54 <TIM_Base_SetConfig+0xf0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d007      	beq.n	8006a32 <TIM_Base_SetConfig+0xce>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a0c      	ldr	r2, [pc, #48]	; (8006a58 <TIM_Base_SetConfig+0xf4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d003      	beq.n	8006a32 <TIM_Base_SetConfig+0xce>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a0b      	ldr	r2, [pc, #44]	; (8006a5c <TIM_Base_SetConfig+0xf8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d103      	bne.n	8006a3a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	691a      	ldr	r2, [r3, #16]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	615a      	str	r2, [r3, #20]
}
 8006a40:	46c0      	nop			; (mov r8, r8)
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b004      	add	sp, #16
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40002000 	.word	0x40002000
 8006a54:	40014000 	.word	0x40014000
 8006a58:	40014400 	.word	0x40014400
 8006a5c:	40014800 	.word	0x40014800
 8006a60:	fffffcff 	.word	0xfffffcff

08006a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a6c:	46c0      	nop			; (mov r8, r8)
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b002      	add	sp, #8
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a7c:	46c0      	nop			; (mov r8, r8)
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	b002      	add	sp, #8
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a8c:	46c0      	nop			; (mov r8, r8)
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b002      	add	sp, #8
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e046      	b.n	8006b34 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2288      	movs	r2, #136	; 0x88
 8006aaa:	589b      	ldr	r3, [r3, r2]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d107      	bne.n	8006ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2284      	movs	r2, #132	; 0x84
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7fd f8c8 	bl	8003c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2288      	movs	r2, #136	; 0x88
 8006ac4:	2124      	movs	r1, #36	; 0x24
 8006ac6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	438a      	bics	r2, r1
 8006ad6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	0018      	movs	r0, r3
 8006adc:	f000 f830 	bl	8006b40 <UART_SetConfig>
 8006ae0:	0003      	movs	r3, r0
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d101      	bne.n	8006aea <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e024      	b.n	8006b34 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f000 fae1 	bl	80070bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	490d      	ldr	r1, [pc, #52]	; (8006b3c <HAL_UART_Init+0xa8>)
 8006b06:	400a      	ands	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	212a      	movs	r1, #42	; 0x2a
 8006b16:	438a      	bics	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2101      	movs	r1, #1
 8006b26:	430a      	orrs	r2, r1
 8006b28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f000 fb79 	bl	8007224 <UART_CheckIdleState>
 8006b32:	0003      	movs	r3, r0
}
 8006b34:	0018      	movs	r0, r3
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b002      	add	sp, #8
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	ffffb7ff 	.word	0xffffb7ff

08006b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b40:	b5b0      	push	{r4, r5, r7, lr}
 8006b42:	b090      	sub	sp, #64	; 0x40
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b48:	231a      	movs	r3, #26
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	189b      	adds	r3, r3, r2
 8006b4e:	19db      	adds	r3, r3, r7
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4aaf      	ldr	r2, [pc, #700]	; (8006e30 <UART_SetConfig+0x2f0>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	0019      	movs	r1, r3
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4aaa      	ldr	r2, [pc, #680]	; (8006e34 <UART_SetConfig+0x2f4>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	68d9      	ldr	r1, [r3, #12]
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	0003      	movs	r3, r0
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4aa4      	ldr	r2, [pc, #656]	; (8006e38 <UART_SetConfig+0x2f8>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d004      	beq.n	8006bb6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4a9f      	ldr	r2, [pc, #636]	; (8006e3c <UART_SetConfig+0x2fc>)
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	0019      	movs	r1, r3
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	220f      	movs	r2, #15
 8006bd4:	4393      	bics	r3, r2
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	0003      	movs	r3, r0
 8006be2:	430b      	orrs	r3, r1
 8006be4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a95      	ldr	r2, [pc, #596]	; (8006e40 <UART_SetConfig+0x300>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d131      	bne.n	8006c54 <UART_SetConfig+0x114>
 8006bf0:	4b94      	ldr	r3, [pc, #592]	; (8006e44 <UART_SetConfig+0x304>)
 8006bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d01d      	beq.n	8006c38 <UART_SetConfig+0xf8>
 8006bfc:	d823      	bhi.n	8006c46 <UART_SetConfig+0x106>
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d00c      	beq.n	8006c1c <UART_SetConfig+0xdc>
 8006c02:	d820      	bhi.n	8006c46 <UART_SetConfig+0x106>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <UART_SetConfig+0xce>
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d00e      	beq.n	8006c2a <UART_SetConfig+0xea>
 8006c0c:	e01b      	b.n	8006c46 <UART_SetConfig+0x106>
 8006c0e:	231b      	movs	r3, #27
 8006c10:	2220      	movs	r2, #32
 8006c12:	189b      	adds	r3, r3, r2
 8006c14:	19db      	adds	r3, r3, r7
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	e0b4      	b.n	8006d86 <UART_SetConfig+0x246>
 8006c1c:	231b      	movs	r3, #27
 8006c1e:	2220      	movs	r2, #32
 8006c20:	189b      	adds	r3, r3, r2
 8006c22:	19db      	adds	r3, r3, r7
 8006c24:	2202      	movs	r2, #2
 8006c26:	701a      	strb	r2, [r3, #0]
 8006c28:	e0ad      	b.n	8006d86 <UART_SetConfig+0x246>
 8006c2a:	231b      	movs	r3, #27
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	189b      	adds	r3, r3, r2
 8006c30:	19db      	adds	r3, r3, r7
 8006c32:	2204      	movs	r2, #4
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e0a6      	b.n	8006d86 <UART_SetConfig+0x246>
 8006c38:	231b      	movs	r3, #27
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	189b      	adds	r3, r3, r2
 8006c3e:	19db      	adds	r3, r3, r7
 8006c40:	2208      	movs	r2, #8
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	e09f      	b.n	8006d86 <UART_SetConfig+0x246>
 8006c46:	231b      	movs	r3, #27
 8006c48:	2220      	movs	r2, #32
 8006c4a:	189b      	adds	r3, r3, r2
 8006c4c:	19db      	adds	r3, r3, r7
 8006c4e:	2210      	movs	r2, #16
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e098      	b.n	8006d86 <UART_SetConfig+0x246>
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a7b      	ldr	r2, [pc, #492]	; (8006e48 <UART_SetConfig+0x308>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d131      	bne.n	8006cc2 <UART_SetConfig+0x182>
 8006c5e:	4b79      	ldr	r3, [pc, #484]	; (8006e44 <UART_SetConfig+0x304>)
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	220c      	movs	r2, #12
 8006c64:	4013      	ands	r3, r2
 8006c66:	2b0c      	cmp	r3, #12
 8006c68:	d01d      	beq.n	8006ca6 <UART_SetConfig+0x166>
 8006c6a:	d823      	bhi.n	8006cb4 <UART_SetConfig+0x174>
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d00c      	beq.n	8006c8a <UART_SetConfig+0x14a>
 8006c70:	d820      	bhi.n	8006cb4 <UART_SetConfig+0x174>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <UART_SetConfig+0x13c>
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d00e      	beq.n	8006c98 <UART_SetConfig+0x158>
 8006c7a:	e01b      	b.n	8006cb4 <UART_SetConfig+0x174>
 8006c7c:	231b      	movs	r3, #27
 8006c7e:	2220      	movs	r2, #32
 8006c80:	189b      	adds	r3, r3, r2
 8006c82:	19db      	adds	r3, r3, r7
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	e07d      	b.n	8006d86 <UART_SetConfig+0x246>
 8006c8a:	231b      	movs	r3, #27
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	189b      	adds	r3, r3, r2
 8006c90:	19db      	adds	r3, r3, r7
 8006c92:	2202      	movs	r2, #2
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e076      	b.n	8006d86 <UART_SetConfig+0x246>
 8006c98:	231b      	movs	r3, #27
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	189b      	adds	r3, r3, r2
 8006c9e:	19db      	adds	r3, r3, r7
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	e06f      	b.n	8006d86 <UART_SetConfig+0x246>
 8006ca6:	231b      	movs	r3, #27
 8006ca8:	2220      	movs	r2, #32
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	19db      	adds	r3, r3, r7
 8006cae:	2208      	movs	r2, #8
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	e068      	b.n	8006d86 <UART_SetConfig+0x246>
 8006cb4:	231b      	movs	r3, #27
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	189b      	adds	r3, r3, r2
 8006cba:	19db      	adds	r3, r3, r7
 8006cbc:	2210      	movs	r2, #16
 8006cbe:	701a      	strb	r2, [r3, #0]
 8006cc0:	e061      	b.n	8006d86 <UART_SetConfig+0x246>
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a61      	ldr	r2, [pc, #388]	; (8006e4c <UART_SetConfig+0x30c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d106      	bne.n	8006cda <UART_SetConfig+0x19a>
 8006ccc:	231b      	movs	r3, #27
 8006cce:	2220      	movs	r2, #32
 8006cd0:	189b      	adds	r3, r3, r2
 8006cd2:	19db      	adds	r3, r3, r7
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	e055      	b.n	8006d86 <UART_SetConfig+0x246>
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a5c      	ldr	r2, [pc, #368]	; (8006e50 <UART_SetConfig+0x310>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d106      	bne.n	8006cf2 <UART_SetConfig+0x1b2>
 8006ce4:	231b      	movs	r3, #27
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	19db      	adds	r3, r3, r7
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	e049      	b.n	8006d86 <UART_SetConfig+0x246>
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a50      	ldr	r2, [pc, #320]	; (8006e38 <UART_SetConfig+0x2f8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d13e      	bne.n	8006d7a <UART_SetConfig+0x23a>
 8006cfc:	4b51      	ldr	r3, [pc, #324]	; (8006e44 <UART_SetConfig+0x304>)
 8006cfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d00:	23c0      	movs	r3, #192	; 0xc0
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	4013      	ands	r3, r2
 8006d06:	22c0      	movs	r2, #192	; 0xc0
 8006d08:	0112      	lsls	r2, r2, #4
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d027      	beq.n	8006d5e <UART_SetConfig+0x21e>
 8006d0e:	22c0      	movs	r2, #192	; 0xc0
 8006d10:	0112      	lsls	r2, r2, #4
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d82a      	bhi.n	8006d6c <UART_SetConfig+0x22c>
 8006d16:	2280      	movs	r2, #128	; 0x80
 8006d18:	0112      	lsls	r2, r2, #4
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d011      	beq.n	8006d42 <UART_SetConfig+0x202>
 8006d1e:	2280      	movs	r2, #128	; 0x80
 8006d20:	0112      	lsls	r2, r2, #4
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d822      	bhi.n	8006d6c <UART_SetConfig+0x22c>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <UART_SetConfig+0x1f4>
 8006d2a:	2280      	movs	r2, #128	; 0x80
 8006d2c:	00d2      	lsls	r2, r2, #3
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00e      	beq.n	8006d50 <UART_SetConfig+0x210>
 8006d32:	e01b      	b.n	8006d6c <UART_SetConfig+0x22c>
 8006d34:	231b      	movs	r3, #27
 8006d36:	2220      	movs	r2, #32
 8006d38:	189b      	adds	r3, r3, r2
 8006d3a:	19db      	adds	r3, r3, r7
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	e021      	b.n	8006d86 <UART_SetConfig+0x246>
 8006d42:	231b      	movs	r3, #27
 8006d44:	2220      	movs	r2, #32
 8006d46:	189b      	adds	r3, r3, r2
 8006d48:	19db      	adds	r3, r3, r7
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	e01a      	b.n	8006d86 <UART_SetConfig+0x246>
 8006d50:	231b      	movs	r3, #27
 8006d52:	2220      	movs	r2, #32
 8006d54:	189b      	adds	r3, r3, r2
 8006d56:	19db      	adds	r3, r3, r7
 8006d58:	2204      	movs	r2, #4
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	e013      	b.n	8006d86 <UART_SetConfig+0x246>
 8006d5e:	231b      	movs	r3, #27
 8006d60:	2220      	movs	r2, #32
 8006d62:	189b      	adds	r3, r3, r2
 8006d64:	19db      	adds	r3, r3, r7
 8006d66:	2208      	movs	r2, #8
 8006d68:	701a      	strb	r2, [r3, #0]
 8006d6a:	e00c      	b.n	8006d86 <UART_SetConfig+0x246>
 8006d6c:	231b      	movs	r3, #27
 8006d6e:	2220      	movs	r2, #32
 8006d70:	189b      	adds	r3, r3, r2
 8006d72:	19db      	adds	r3, r3, r7
 8006d74:	2210      	movs	r2, #16
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	e005      	b.n	8006d86 <UART_SetConfig+0x246>
 8006d7a:	231b      	movs	r3, #27
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	189b      	adds	r3, r3, r2
 8006d80:	19db      	adds	r3, r3, r7
 8006d82:	2210      	movs	r2, #16
 8006d84:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a2b      	ldr	r2, [pc, #172]	; (8006e38 <UART_SetConfig+0x2f8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d000      	beq.n	8006d92 <UART_SetConfig+0x252>
 8006d90:	e0a9      	b.n	8006ee6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d92:	231b      	movs	r3, #27
 8006d94:	2220      	movs	r2, #32
 8006d96:	189b      	adds	r3, r3, r2
 8006d98:	19db      	adds	r3, r3, r7
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d015      	beq.n	8006dcc <UART_SetConfig+0x28c>
 8006da0:	dc18      	bgt.n	8006dd4 <UART_SetConfig+0x294>
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d00d      	beq.n	8006dc2 <UART_SetConfig+0x282>
 8006da6:	dc15      	bgt.n	8006dd4 <UART_SetConfig+0x294>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <UART_SetConfig+0x272>
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d005      	beq.n	8006dbc <UART_SetConfig+0x27c>
 8006db0:	e010      	b.n	8006dd4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db2:	f7fe fe7d 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 8006db6:	0003      	movs	r3, r0
 8006db8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dba:	e014      	b.n	8006de6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dbc:	4b25      	ldr	r3, [pc, #148]	; (8006e54 <UART_SetConfig+0x314>)
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dc0:	e011      	b.n	8006de6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc2:	f7fe fde9 	bl	8005998 <HAL_RCC_GetSysClockFreq>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dca:	e00c      	b.n	8006de6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dcc:	2380      	movs	r3, #128	; 0x80
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dd2:	e008      	b.n	8006de6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006dd8:	231a      	movs	r3, #26
 8006dda:	2220      	movs	r2, #32
 8006ddc:	189b      	adds	r3, r3, r2
 8006dde:	19db      	adds	r3, r3, r7
 8006de0:	2201      	movs	r2, #1
 8006de2:	701a      	strb	r2, [r3, #0]
        break;
 8006de4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d100      	bne.n	8006dee <UART_SetConfig+0x2ae>
 8006dec:	e14b      	b.n	8007086 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006df2:	4b19      	ldr	r3, [pc, #100]	; (8006e58 <UART_SetConfig+0x318>)
 8006df4:	0052      	lsls	r2, r2, #1
 8006df6:	5ad3      	ldrh	r3, [r2, r3]
 8006df8:	0019      	movs	r1, r3
 8006dfa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006dfc:	f7f9 f98c 	bl	8000118 <__udivsi3>
 8006e00:	0003      	movs	r3, r0
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	0013      	movs	r3, r2
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	189b      	adds	r3, r3, r2
 8006e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d305      	bcc.n	8006e20 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d91d      	bls.n	8006e5c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006e20:	231a      	movs	r3, #26
 8006e22:	2220      	movs	r2, #32
 8006e24:	189b      	adds	r3, r3, r2
 8006e26:	19db      	adds	r3, r3, r7
 8006e28:	2201      	movs	r2, #1
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e12b      	b.n	8007086 <UART_SetConfig+0x546>
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	cfff69f3 	.word	0xcfff69f3
 8006e34:	ffffcfff 	.word	0xffffcfff
 8006e38:	40008000 	.word	0x40008000
 8006e3c:	11fff4ff 	.word	0x11fff4ff
 8006e40:	40013800 	.word	0x40013800
 8006e44:	40021000 	.word	0x40021000
 8006e48:	40004400 	.word	0x40004400
 8006e4c:	40004800 	.word	0x40004800
 8006e50:	40004c00 	.word	0x40004c00
 8006e54:	00f42400 	.word	0x00f42400
 8006e58:	0800884c 	.word	0x0800884c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	2300      	movs	r3, #0
 8006e62:	61fb      	str	r3, [r7, #28]
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e68:	4b92      	ldr	r3, [pc, #584]	; (80070b4 <UART_SetConfig+0x574>)
 8006e6a:	0052      	lsls	r2, r2, #1
 8006e6c:	5ad3      	ldrh	r3, [r2, r3]
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	69b8      	ldr	r0, [r7, #24]
 8006e7a:	69f9      	ldr	r1, [r7, #28]
 8006e7c:	f7f9 fac2 	bl	8000404 <__aeabi_uldivmod>
 8006e80:	0002      	movs	r2, r0
 8006e82:	000b      	movs	r3, r1
 8006e84:	0e11      	lsrs	r1, r2, #24
 8006e86:	021d      	lsls	r5, r3, #8
 8006e88:	430d      	orrs	r5, r1
 8006e8a:	0214      	lsls	r4, r2, #8
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	085b      	lsrs	r3, r3, #1
 8006e92:	60bb      	str	r3, [r7, #8]
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	68b8      	ldr	r0, [r7, #8]
 8006e9a:	68f9      	ldr	r1, [r7, #12]
 8006e9c:	1900      	adds	r0, r0, r4
 8006e9e:	4169      	adcs	r1, r5
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f7f9 faa9 	bl	8000404 <__aeabi_uldivmod>
 8006eb2:	0002      	movs	r2, r0
 8006eb4:	000b      	movs	r3, r1
 8006eb6:	0013      	movs	r3, r2
 8006eb8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ebc:	23c0      	movs	r3, #192	; 0xc0
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d309      	bcc.n	8006ed8 <UART_SetConfig+0x398>
 8006ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec6:	2380      	movs	r3, #128	; 0x80
 8006ec8:	035b      	lsls	r3, r3, #13
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d204      	bcs.n	8006ed8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed4:	60da      	str	r2, [r3, #12]
 8006ed6:	e0d6      	b.n	8007086 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006ed8:	231a      	movs	r3, #26
 8006eda:	2220      	movs	r2, #32
 8006edc:	189b      	adds	r3, r3, r2
 8006ede:	19db      	adds	r3, r3, r7
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	e0cf      	b.n	8007086 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	69da      	ldr	r2, [r3, #28]
 8006eea:	2380      	movs	r3, #128	; 0x80
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d000      	beq.n	8006ef4 <UART_SetConfig+0x3b4>
 8006ef2:	e070      	b.n	8006fd6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006ef4:	231b      	movs	r3, #27
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	189b      	adds	r3, r3, r2
 8006efa:	19db      	adds	r3, r3, r7
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b08      	cmp	r3, #8
 8006f00:	d015      	beq.n	8006f2e <UART_SetConfig+0x3ee>
 8006f02:	dc18      	bgt.n	8006f36 <UART_SetConfig+0x3f6>
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d00d      	beq.n	8006f24 <UART_SetConfig+0x3e4>
 8006f08:	dc15      	bgt.n	8006f36 <UART_SetConfig+0x3f6>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <UART_SetConfig+0x3d4>
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d005      	beq.n	8006f1e <UART_SetConfig+0x3de>
 8006f12:	e010      	b.n	8006f36 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f14:	f7fe fdcc 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 8006f18:	0003      	movs	r3, r0
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f1c:	e014      	b.n	8006f48 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f1e:	4b66      	ldr	r3, [pc, #408]	; (80070b8 <UART_SetConfig+0x578>)
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f22:	e011      	b.n	8006f48 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f24:	f7fe fd38 	bl	8005998 <HAL_RCC_GetSysClockFreq>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f2c:	e00c      	b.n	8006f48 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2e:	2380      	movs	r3, #128	; 0x80
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f34:	e008      	b.n	8006f48 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006f3a:	231a      	movs	r3, #26
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	189b      	adds	r3, r3, r2
 8006f40:	19db      	adds	r3, r3, r7
 8006f42:	2201      	movs	r2, #1
 8006f44:	701a      	strb	r2, [r3, #0]
        break;
 8006f46:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d100      	bne.n	8006f50 <UART_SetConfig+0x410>
 8006f4e:	e09a      	b.n	8007086 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f54:	4b57      	ldr	r3, [pc, #348]	; (80070b4 <UART_SetConfig+0x574>)
 8006f56:	0052      	lsls	r2, r2, #1
 8006f58:	5ad3      	ldrh	r3, [r2, r3]
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006f5e:	f7f9 f8db 	bl	8000118 <__udivsi3>
 8006f62:	0003      	movs	r3, r0
 8006f64:	005a      	lsls	r2, r3, #1
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	18d2      	adds	r2, r2, r3
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	0019      	movs	r1, r3
 8006f74:	0010      	movs	r0, r2
 8006f76:	f7f9 f8cf 	bl	8000118 <__udivsi3>
 8006f7a:	0003      	movs	r3, r0
 8006f7c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	2b0f      	cmp	r3, #15
 8006f82:	d921      	bls.n	8006fc8 <UART_SetConfig+0x488>
 8006f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f86:	2380      	movs	r3, #128	; 0x80
 8006f88:	025b      	lsls	r3, r3, #9
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d21c      	bcs.n	8006fc8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	200e      	movs	r0, #14
 8006f94:	2420      	movs	r4, #32
 8006f96:	1903      	adds	r3, r0, r4
 8006f98:	19db      	adds	r3, r3, r7
 8006f9a:	210f      	movs	r1, #15
 8006f9c:	438a      	bics	r2, r1
 8006f9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	085b      	lsrs	r3, r3, #1
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2207      	movs	r2, #7
 8006fa8:	4013      	ands	r3, r2
 8006faa:	b299      	uxth	r1, r3
 8006fac:	1903      	adds	r3, r0, r4
 8006fae:	19db      	adds	r3, r3, r7
 8006fb0:	1902      	adds	r2, r0, r4
 8006fb2:	19d2      	adds	r2, r2, r7
 8006fb4:	8812      	ldrh	r2, [r2, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	1902      	adds	r2, r0, r4
 8006fc0:	19d2      	adds	r2, r2, r7
 8006fc2:	8812      	ldrh	r2, [r2, #0]
 8006fc4:	60da      	str	r2, [r3, #12]
 8006fc6:	e05e      	b.n	8007086 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006fc8:	231a      	movs	r3, #26
 8006fca:	2220      	movs	r2, #32
 8006fcc:	189b      	adds	r3, r3, r2
 8006fce:	19db      	adds	r3, r3, r7
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	e057      	b.n	8007086 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fd6:	231b      	movs	r3, #27
 8006fd8:	2220      	movs	r2, #32
 8006fda:	189b      	adds	r3, r3, r2
 8006fdc:	19db      	adds	r3, r3, r7
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d015      	beq.n	8007010 <UART_SetConfig+0x4d0>
 8006fe4:	dc18      	bgt.n	8007018 <UART_SetConfig+0x4d8>
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d00d      	beq.n	8007006 <UART_SetConfig+0x4c6>
 8006fea:	dc15      	bgt.n	8007018 <UART_SetConfig+0x4d8>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <UART_SetConfig+0x4b6>
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d005      	beq.n	8007000 <UART_SetConfig+0x4c0>
 8006ff4:	e010      	b.n	8007018 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ff6:	f7fe fd5b 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ffe:	e014      	b.n	800702a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007000:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <UART_SetConfig+0x578>)
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007004:	e011      	b.n	800702a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007006:	f7fe fcc7 	bl	8005998 <HAL_RCC_GetSysClockFreq>
 800700a:	0003      	movs	r3, r0
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800700e:	e00c      	b.n	800702a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007010:	2380      	movs	r3, #128	; 0x80
 8007012:	021b      	lsls	r3, r3, #8
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007016:	e008      	b.n	800702a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800701c:	231a      	movs	r3, #26
 800701e:	2220      	movs	r2, #32
 8007020:	189b      	adds	r3, r3, r2
 8007022:	19db      	adds	r3, r3, r7
 8007024:	2201      	movs	r2, #1
 8007026:	701a      	strb	r2, [r3, #0]
        break;
 8007028:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800702a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702c:	2b00      	cmp	r3, #0
 800702e:	d02a      	beq.n	8007086 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007034:	4b1f      	ldr	r3, [pc, #124]	; (80070b4 <UART_SetConfig+0x574>)
 8007036:	0052      	lsls	r2, r2, #1
 8007038:	5ad3      	ldrh	r3, [r2, r3]
 800703a:	0019      	movs	r1, r3
 800703c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800703e:	f7f9 f86b 	bl	8000118 <__udivsi3>
 8007042:	0003      	movs	r3, r0
 8007044:	001a      	movs	r2, r3
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	085b      	lsrs	r3, r3, #1
 800704c:	18d2      	adds	r2, r2, r3
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	0019      	movs	r1, r3
 8007054:	0010      	movs	r0, r2
 8007056:	f7f9 f85f 	bl	8000118 <__udivsi3>
 800705a:	0003      	movs	r3, r0
 800705c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	2b0f      	cmp	r3, #15
 8007062:	d90a      	bls.n	800707a <UART_SetConfig+0x53a>
 8007064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007066:	2380      	movs	r3, #128	; 0x80
 8007068:	025b      	lsls	r3, r3, #9
 800706a:	429a      	cmp	r2, r3
 800706c:	d205      	bcs.n	800707a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	b29a      	uxth	r2, r3
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60da      	str	r2, [r3, #12]
 8007078:	e005      	b.n	8007086 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800707a:	231a      	movs	r3, #26
 800707c:	2220      	movs	r2, #32
 800707e:	189b      	adds	r3, r3, r2
 8007080:	19db      	adds	r3, r3, r7
 8007082:	2201      	movs	r2, #1
 8007084:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	226a      	movs	r2, #106	; 0x6a
 800708a:	2101      	movs	r1, #1
 800708c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	2268      	movs	r2, #104	; 0x68
 8007092:	2101      	movs	r1, #1
 8007094:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	2200      	movs	r2, #0
 800709a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	2200      	movs	r2, #0
 80070a0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80070a2:	231a      	movs	r3, #26
 80070a4:	2220      	movs	r2, #32
 80070a6:	189b      	adds	r3, r3, r2
 80070a8:	19db      	adds	r3, r3, r7
 80070aa:	781b      	ldrb	r3, [r3, #0]
}
 80070ac:	0018      	movs	r0, r3
 80070ae:	46bd      	mov	sp, r7
 80070b0:	b010      	add	sp, #64	; 0x40
 80070b2:	bdb0      	pop	{r4, r5, r7, pc}
 80070b4:	0800884c 	.word	0x0800884c
 80070b8:	00f42400 	.word	0x00f42400

080070bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c8:	2201      	movs	r2, #1
 80070ca:	4013      	ands	r3, r2
 80070cc:	d00b      	beq.n	80070e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4a4a      	ldr	r2, [pc, #296]	; (8007200 <UART_AdvFeatureConfig+0x144>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	0019      	movs	r1, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ea:	2202      	movs	r2, #2
 80070ec:	4013      	ands	r3, r2
 80070ee:	d00b      	beq.n	8007108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4a43      	ldr	r2, [pc, #268]	; (8007204 <UART_AdvFeatureConfig+0x148>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	0019      	movs	r1, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	430a      	orrs	r2, r1
 8007106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	2204      	movs	r2, #4
 800710e:	4013      	ands	r3, r2
 8007110:	d00b      	beq.n	800712a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	4a3b      	ldr	r2, [pc, #236]	; (8007208 <UART_AdvFeatureConfig+0x14c>)
 800711a:	4013      	ands	r3, r2
 800711c:	0019      	movs	r1, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712e:	2208      	movs	r2, #8
 8007130:	4013      	ands	r3, r2
 8007132:	d00b      	beq.n	800714c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	4a34      	ldr	r2, [pc, #208]	; (800720c <UART_AdvFeatureConfig+0x150>)
 800713c:	4013      	ands	r3, r2
 800713e:	0019      	movs	r1, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	2210      	movs	r2, #16
 8007152:	4013      	ands	r3, r2
 8007154:	d00b      	beq.n	800716e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4a2c      	ldr	r2, [pc, #176]	; (8007210 <UART_AdvFeatureConfig+0x154>)
 800715e:	4013      	ands	r3, r2
 8007160:	0019      	movs	r1, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	2220      	movs	r2, #32
 8007174:	4013      	ands	r3, r2
 8007176:	d00b      	beq.n	8007190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	4a25      	ldr	r2, [pc, #148]	; (8007214 <UART_AdvFeatureConfig+0x158>)
 8007180:	4013      	ands	r3, r2
 8007182:	0019      	movs	r1, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	2240      	movs	r2, #64	; 0x40
 8007196:	4013      	ands	r3, r2
 8007198:	d01d      	beq.n	80071d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4a1d      	ldr	r2, [pc, #116]	; (8007218 <UART_AdvFeatureConfig+0x15c>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	0019      	movs	r1, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b6:	2380      	movs	r3, #128	; 0x80
 80071b8:	035b      	lsls	r3, r3, #13
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d10b      	bne.n	80071d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4a15      	ldr	r2, [pc, #84]	; (800721c <UART_AdvFeatureConfig+0x160>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	0019      	movs	r1, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	2280      	movs	r2, #128	; 0x80
 80071dc:	4013      	ands	r3, r2
 80071de:	d00b      	beq.n	80071f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	4a0e      	ldr	r2, [pc, #56]	; (8007220 <UART_AdvFeatureConfig+0x164>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	0019      	movs	r1, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]
  }
}
 80071f8:	46c0      	nop			; (mov r8, r8)
 80071fa:	46bd      	mov	sp, r7
 80071fc:	b002      	add	sp, #8
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	fffdffff 	.word	0xfffdffff
 8007204:	fffeffff 	.word	0xfffeffff
 8007208:	fffbffff 	.word	0xfffbffff
 800720c:	ffff7fff 	.word	0xffff7fff
 8007210:	ffffefff 	.word	0xffffefff
 8007214:	ffffdfff 	.word	0xffffdfff
 8007218:	ffefffff 	.word	0xffefffff
 800721c:	ff9fffff 	.word	0xff9fffff
 8007220:	fff7ffff 	.word	0xfff7ffff

08007224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af02      	add	r7, sp, #8
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2290      	movs	r2, #144	; 0x90
 8007230:	2100      	movs	r1, #0
 8007232:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007234:	f7fc ff06 	bl	8004044 <HAL_GetTick>
 8007238:	0003      	movs	r3, r0
 800723a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2208      	movs	r2, #8
 8007244:	4013      	ands	r3, r2
 8007246:	2b08      	cmp	r3, #8
 8007248:	d10c      	bne.n	8007264 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2280      	movs	r2, #128	; 0x80
 800724e:	0391      	lsls	r1, r2, #14
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4a1a      	ldr	r2, [pc, #104]	; (80072bc <UART_CheckIdleState+0x98>)
 8007254:	9200      	str	r2, [sp, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	f000 f832 	bl	80072c0 <UART_WaitOnFlagUntilTimeout>
 800725c:	1e03      	subs	r3, r0, #0
 800725e:	d001      	beq.n	8007264 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e026      	b.n	80072b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2204      	movs	r2, #4
 800726c:	4013      	ands	r3, r2
 800726e:	2b04      	cmp	r3, #4
 8007270:	d10c      	bne.n	800728c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2280      	movs	r2, #128	; 0x80
 8007276:	03d1      	lsls	r1, r2, #15
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	4a10      	ldr	r2, [pc, #64]	; (80072bc <UART_CheckIdleState+0x98>)
 800727c:	9200      	str	r2, [sp, #0]
 800727e:	2200      	movs	r2, #0
 8007280:	f000 f81e 	bl	80072c0 <UART_WaitOnFlagUntilTimeout>
 8007284:	1e03      	subs	r3, r0, #0
 8007286:	d001      	beq.n	800728c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e012      	b.n	80072b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2288      	movs	r2, #136	; 0x88
 8007290:	2120      	movs	r1, #32
 8007292:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	228c      	movs	r2, #140	; 0x8c
 8007298:	2120      	movs	r1, #32
 800729a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2284      	movs	r2, #132	; 0x84
 80072ac:	2100      	movs	r1, #0
 80072ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	0018      	movs	r0, r3
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b004      	add	sp, #16
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	01ffffff 	.word	0x01ffffff

080072c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b094      	sub	sp, #80	; 0x50
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	1dfb      	adds	r3, r7, #7
 80072ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d0:	e0a7      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072d4:	3301      	adds	r3, #1
 80072d6:	d100      	bne.n	80072da <UART_WaitOnFlagUntilTimeout+0x1a>
 80072d8:	e0a3      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072da:	f7fc feb3 	bl	8004044 <HAL_GetTick>
 80072de:	0002      	movs	r2, r0
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d302      	bcc.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d13f      	bne.n	8007370 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f0:	f3ef 8310 	mrs	r3, PRIMASK
 80072f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80072f8:	647b      	str	r3, [r7, #68]	; 0x44
 80072fa:	2301      	movs	r3, #1
 80072fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	f383 8810 	msr	PRIMASK, r3
}
 8007304:	46c0      	nop			; (mov r8, r8)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	494e      	ldr	r1, [pc, #312]	; (800744c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007312:	400a      	ands	r2, r1
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007318:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	f383 8810 	msr	PRIMASK, r3
}
 8007320:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007322:	f3ef 8310 	mrs	r3, PRIMASK
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732a:	643b      	str	r3, [r7, #64]	; 0x40
 800732c:	2301      	movs	r3, #1
 800732e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	f383 8810 	msr	PRIMASK, r3
}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2101      	movs	r1, #1
 8007344:	438a      	bics	r2, r1
 8007346:	609a      	str	r2, [r3, #8]
 8007348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734e:	f383 8810 	msr	PRIMASK, r3
}
 8007352:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2288      	movs	r2, #136	; 0x88
 8007358:	2120      	movs	r1, #32
 800735a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	228c      	movs	r2, #140	; 0x8c
 8007360:	2120      	movs	r1, #32
 8007362:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2284      	movs	r2, #132	; 0x84
 8007368:	2100      	movs	r1, #0
 800736a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e069      	b.n	8007444 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2204      	movs	r2, #4
 8007378:	4013      	ands	r3, r2
 800737a:	d052      	beq.n	8007422 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69da      	ldr	r2, [r3, #28]
 8007382:	2380      	movs	r3, #128	; 0x80
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	401a      	ands	r2, r3
 8007388:	2380      	movs	r3, #128	; 0x80
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	429a      	cmp	r2, r3
 800738e:	d148      	bne.n	8007422 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2280      	movs	r2, #128	; 0x80
 8007396:	0112      	lsls	r2, r2, #4
 8007398:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800739a:	f3ef 8310 	mrs	r3, PRIMASK
 800739e:	613b      	str	r3, [r7, #16]
  return(result);
 80073a0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f383 8810 	msr	PRIMASK, r3
}
 80073ae:	46c0      	nop			; (mov r8, r8)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4924      	ldr	r1, [pc, #144]	; (800744c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80073bc:	400a      	ands	r2, r1
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	f383 8810 	msr	PRIMASK, r3
}
 80073ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073cc:	f3ef 8310 	mrs	r3, PRIMASK
 80073d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80073d2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d6:	2301      	movs	r3, #1
 80073d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	f383 8810 	msr	PRIMASK, r3
}
 80073e0:	46c0      	nop			; (mov r8, r8)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2101      	movs	r1, #1
 80073ee:	438a      	bics	r2, r1
 80073f0:	609a      	str	r2, [r3, #8]
 80073f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	f383 8810 	msr	PRIMASK, r3
}
 80073fc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2288      	movs	r2, #136	; 0x88
 8007402:	2120      	movs	r1, #32
 8007404:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	228c      	movs	r2, #140	; 0x8c
 800740a:	2120      	movs	r1, #32
 800740c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2290      	movs	r2, #144	; 0x90
 8007412:	2120      	movs	r1, #32
 8007414:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2284      	movs	r2, #132	; 0x84
 800741a:	2100      	movs	r1, #0
 800741c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e010      	b.n	8007444 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	4013      	ands	r3, r2
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	425a      	negs	r2, r3
 8007432:	4153      	adcs	r3, r2
 8007434:	b2db      	uxtb	r3, r3
 8007436:	001a      	movs	r2, r3
 8007438:	1dfb      	adds	r3, r7, #7
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d100      	bne.n	8007442 <UART_WaitOnFlagUntilTimeout+0x182>
 8007440:	e747      	b.n	80072d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	0018      	movs	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	b014      	add	sp, #80	; 0x50
 800744a:	bd80      	pop	{r7, pc}
 800744c:	fffffe5f 	.word	0xfffffe5f

08007450 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2284      	movs	r2, #132	; 0x84
 800745c:	5c9b      	ldrb	r3, [r3, r2]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_UARTEx_DisableFifoMode+0x16>
 8007462:	2302      	movs	r3, #2
 8007464:	e027      	b.n	80074b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2284      	movs	r2, #132	; 0x84
 800746a:	2101      	movs	r1, #1
 800746c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2288      	movs	r2, #136	; 0x88
 8007472:	2124      	movs	r1, #36	; 0x24
 8007474:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2101      	movs	r1, #1
 800748a:	438a      	bics	r2, r1
 800748c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4a0b      	ldr	r2, [pc, #44]	; (80074c0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007492:	4013      	ands	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2288      	movs	r2, #136	; 0x88
 80074a8:	2120      	movs	r1, #32
 80074aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2284      	movs	r2, #132	; 0x84
 80074b0:	2100      	movs	r1, #0
 80074b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	0018      	movs	r0, r3
 80074b8:	46bd      	mov	sp, r7
 80074ba:	b004      	add	sp, #16
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	dfffffff 	.word	0xdfffffff

080074c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2284      	movs	r2, #132	; 0x84
 80074d2:	5c9b      	ldrb	r3, [r3, r2]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074d8:	2302      	movs	r3, #2
 80074da:	e02e      	b.n	800753a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2284      	movs	r2, #132	; 0x84
 80074e0:	2101      	movs	r1, #1
 80074e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2288      	movs	r2, #136	; 0x88
 80074e8:	2124      	movs	r1, #36	; 0x24
 80074ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2101      	movs	r1, #1
 8007500:	438a      	bics	r2, r1
 8007502:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	08d9      	lsrs	r1, r3, #3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	0018      	movs	r0, r3
 800751c:	f000 f854 	bl	80075c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2288      	movs	r2, #136	; 0x88
 800752c:	2120      	movs	r1, #32
 800752e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2284      	movs	r2, #132	; 0x84
 8007534:	2100      	movs	r1, #0
 8007536:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	0018      	movs	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	b004      	add	sp, #16
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2284      	movs	r2, #132	; 0x84
 8007552:	5c9b      	ldrb	r3, [r3, r2]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007558:	2302      	movs	r3, #2
 800755a:	e02f      	b.n	80075bc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2284      	movs	r2, #132	; 0x84
 8007560:	2101      	movs	r1, #1
 8007562:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2288      	movs	r2, #136	; 0x88
 8007568:	2124      	movs	r1, #36	; 0x24
 800756a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2101      	movs	r1, #1
 8007580:	438a      	bics	r2, r1
 8007582:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	4a0e      	ldr	r2, [pc, #56]	; (80075c4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800758c:	4013      	ands	r3, r2
 800758e:	0019      	movs	r1, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	0018      	movs	r0, r3
 800759e:	f000 f813 	bl	80075c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2288      	movs	r2, #136	; 0x88
 80075ae:	2120      	movs	r1, #32
 80075b0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2284      	movs	r2, #132	; 0x84
 80075b6:	2100      	movs	r1, #0
 80075b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	0018      	movs	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	b004      	add	sp, #16
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	f1ffffff 	.word	0xf1ffffff

080075c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d108      	bne.n	80075ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	226a      	movs	r2, #106	; 0x6a
 80075dc:	2101      	movs	r1, #1
 80075de:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2268      	movs	r2, #104	; 0x68
 80075e4:	2101      	movs	r1, #1
 80075e6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075e8:	e043      	b.n	8007672 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075ea:	260f      	movs	r6, #15
 80075ec:	19bb      	adds	r3, r7, r6
 80075ee:	2208      	movs	r2, #8
 80075f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075f2:	200e      	movs	r0, #14
 80075f4:	183b      	adds	r3, r7, r0
 80075f6:	2208      	movs	r2, #8
 80075f8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	0e5b      	lsrs	r3, r3, #25
 8007602:	b2da      	uxtb	r2, r3
 8007604:	240d      	movs	r4, #13
 8007606:	193b      	adds	r3, r7, r4
 8007608:	2107      	movs	r1, #7
 800760a:	400a      	ands	r2, r1
 800760c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	0f5b      	lsrs	r3, r3, #29
 8007616:	b2da      	uxtb	r2, r3
 8007618:	250c      	movs	r5, #12
 800761a:	197b      	adds	r3, r7, r5
 800761c:	2107      	movs	r1, #7
 800761e:	400a      	ands	r2, r1
 8007620:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007622:	183b      	adds	r3, r7, r0
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	197a      	adds	r2, r7, r5
 8007628:	7812      	ldrb	r2, [r2, #0]
 800762a:	4914      	ldr	r1, [pc, #80]	; (800767c <UARTEx_SetNbDataToProcess+0xb4>)
 800762c:	5c8a      	ldrb	r2, [r1, r2]
 800762e:	435a      	muls	r2, r3
 8007630:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007632:	197b      	adds	r3, r7, r5
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	4a12      	ldr	r2, [pc, #72]	; (8007680 <UARTEx_SetNbDataToProcess+0xb8>)
 8007638:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800763a:	0019      	movs	r1, r3
 800763c:	f7f8 fdf6 	bl	800022c <__divsi3>
 8007640:	0003      	movs	r3, r0
 8007642:	b299      	uxth	r1, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	226a      	movs	r2, #106	; 0x6a
 8007648:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800764a:	19bb      	adds	r3, r7, r6
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	193a      	adds	r2, r7, r4
 8007650:	7812      	ldrb	r2, [r2, #0]
 8007652:	490a      	ldr	r1, [pc, #40]	; (800767c <UARTEx_SetNbDataToProcess+0xb4>)
 8007654:	5c8a      	ldrb	r2, [r1, r2]
 8007656:	435a      	muls	r2, r3
 8007658:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800765a:	193b      	adds	r3, r7, r4
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	4a08      	ldr	r2, [pc, #32]	; (8007680 <UARTEx_SetNbDataToProcess+0xb8>)
 8007660:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007662:	0019      	movs	r1, r3
 8007664:	f7f8 fde2 	bl	800022c <__divsi3>
 8007668:	0003      	movs	r3, r0
 800766a:	b299      	uxth	r1, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2268      	movs	r2, #104	; 0x68
 8007670:	5299      	strh	r1, [r3, r2]
}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	46bd      	mov	sp, r7
 8007676:	b005      	add	sp, #20
 8007678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800767a:	46c0      	nop			; (mov r8, r8)
 800767c:	08008864 	.word	0x08008864
 8007680:	0800886c 	.word	0x0800886c

08007684 <_ZdlPvj>:
 8007684:	b510      	push	{r4, lr}
 8007686:	f000 f801 	bl	800768c <_ZdlPv>
 800768a:	bd10      	pop	{r4, pc}

0800768c <_ZdlPv>:
 800768c:	b510      	push	{r4, lr}
 800768e:	f000 f81f 	bl	80076d0 <free>
 8007692:	bd10      	pop	{r4, pc}

08007694 <__assert_func>:
 8007694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007696:	0014      	movs	r4, r2
 8007698:	001a      	movs	r2, r3
 800769a:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <__assert_func+0x2c>)
 800769c:	0005      	movs	r5, r0
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	000e      	movs	r6, r1
 80076a2:	68d8      	ldr	r0, [r3, #12]
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <__assert_func+0x30>)
 80076a6:	2c00      	cmp	r4, #0
 80076a8:	d101      	bne.n	80076ae <__assert_func+0x1a>
 80076aa:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <__assert_func+0x34>)
 80076ac:	001c      	movs	r4, r3
 80076ae:	4907      	ldr	r1, [pc, #28]	; (80076cc <__assert_func+0x38>)
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	9402      	str	r4, [sp, #8]
 80076b4:	002b      	movs	r3, r5
 80076b6:	9600      	str	r6, [sp, #0]
 80076b8:	f000 f95e 	bl	8007978 <fiprintf>
 80076bc:	f000 fa68 	bl	8007b90 <abort>
 80076c0:	2000006c 	.word	0x2000006c
 80076c4:	08008874 	.word	0x08008874
 80076c8:	080088af 	.word	0x080088af
 80076cc:	08008881 	.word	0x08008881

080076d0 <free>:
 80076d0:	b510      	push	{r4, lr}
 80076d2:	4b03      	ldr	r3, [pc, #12]	; (80076e0 <free+0x10>)
 80076d4:	0001      	movs	r1, r0
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	f000 fa62 	bl	8007ba0 <_free_r>
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	2000006c 	.word	0x2000006c

080076e4 <sbrk_aligned>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	4e0f      	ldr	r6, [pc, #60]	; (8007724 <sbrk_aligned+0x40>)
 80076e8:	000d      	movs	r5, r1
 80076ea:	6831      	ldr	r1, [r6, #0]
 80076ec:	0004      	movs	r4, r0
 80076ee:	2900      	cmp	r1, #0
 80076f0:	d102      	bne.n	80076f8 <sbrk_aligned+0x14>
 80076f2:	f000 f9fb 	bl	8007aec <_sbrk_r>
 80076f6:	6030      	str	r0, [r6, #0]
 80076f8:	0029      	movs	r1, r5
 80076fa:	0020      	movs	r0, r4
 80076fc:	f000 f9f6 	bl	8007aec <_sbrk_r>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d00a      	beq.n	800771a <sbrk_aligned+0x36>
 8007704:	2303      	movs	r3, #3
 8007706:	1cc5      	adds	r5, r0, #3
 8007708:	439d      	bics	r5, r3
 800770a:	42a8      	cmp	r0, r5
 800770c:	d007      	beq.n	800771e <sbrk_aligned+0x3a>
 800770e:	1a29      	subs	r1, r5, r0
 8007710:	0020      	movs	r0, r4
 8007712:	f000 f9eb 	bl	8007aec <_sbrk_r>
 8007716:	3001      	adds	r0, #1
 8007718:	d101      	bne.n	800771e <sbrk_aligned+0x3a>
 800771a:	2501      	movs	r5, #1
 800771c:	426d      	negs	r5, r5
 800771e:	0028      	movs	r0, r5
 8007720:	bd70      	pop	{r4, r5, r6, pc}
 8007722:	46c0      	nop			; (mov r8, r8)
 8007724:	20000490 	.word	0x20000490

08007728 <_malloc_r>:
 8007728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800772a:	2203      	movs	r2, #3
 800772c:	1ccb      	adds	r3, r1, #3
 800772e:	4393      	bics	r3, r2
 8007730:	3308      	adds	r3, #8
 8007732:	0006      	movs	r6, r0
 8007734:	001f      	movs	r7, r3
 8007736:	2b0c      	cmp	r3, #12
 8007738:	d238      	bcs.n	80077ac <_malloc_r+0x84>
 800773a:	270c      	movs	r7, #12
 800773c:	42b9      	cmp	r1, r7
 800773e:	d837      	bhi.n	80077b0 <_malloc_r+0x88>
 8007740:	0030      	movs	r0, r6
 8007742:	f000 f873 	bl	800782c <__malloc_lock>
 8007746:	4b38      	ldr	r3, [pc, #224]	; (8007828 <_malloc_r+0x100>)
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	001c      	movs	r4, r3
 800774e:	2c00      	cmp	r4, #0
 8007750:	d133      	bne.n	80077ba <_malloc_r+0x92>
 8007752:	0039      	movs	r1, r7
 8007754:	0030      	movs	r0, r6
 8007756:	f7ff ffc5 	bl	80076e4 <sbrk_aligned>
 800775a:	0004      	movs	r4, r0
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d15e      	bne.n	800781e <_malloc_r+0xf6>
 8007760:	9b00      	ldr	r3, [sp, #0]
 8007762:	681c      	ldr	r4, [r3, #0]
 8007764:	0025      	movs	r5, r4
 8007766:	2d00      	cmp	r5, #0
 8007768:	d14e      	bne.n	8007808 <_malloc_r+0xe0>
 800776a:	2c00      	cmp	r4, #0
 800776c:	d051      	beq.n	8007812 <_malloc_r+0xea>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	0029      	movs	r1, r5
 8007772:	18e3      	adds	r3, r4, r3
 8007774:	0030      	movs	r0, r6
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	f000 f9b8 	bl	8007aec <_sbrk_r>
 800777c:	9b01      	ldr	r3, [sp, #4]
 800777e:	4283      	cmp	r3, r0
 8007780:	d147      	bne.n	8007812 <_malloc_r+0xea>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	0030      	movs	r0, r6
 8007786:	1aff      	subs	r7, r7, r3
 8007788:	0039      	movs	r1, r7
 800778a:	f7ff ffab 	bl	80076e4 <sbrk_aligned>
 800778e:	3001      	adds	r0, #1
 8007790:	d03f      	beq.n	8007812 <_malloc_r+0xea>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	19db      	adds	r3, r3, r7
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	9b00      	ldr	r3, [sp, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d040      	beq.n	8007822 <_malloc_r+0xfa>
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	42a2      	cmp	r2, r4
 80077a4:	d133      	bne.n	800780e <_malloc_r+0xe6>
 80077a6:	2200      	movs	r2, #0
 80077a8:	605a      	str	r2, [r3, #4]
 80077aa:	e014      	b.n	80077d6 <_malloc_r+0xae>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	dac5      	bge.n	800773c <_malloc_r+0x14>
 80077b0:	230c      	movs	r3, #12
 80077b2:	2500      	movs	r5, #0
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	0028      	movs	r0, r5
 80077b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077ba:	6821      	ldr	r1, [r4, #0]
 80077bc:	1bc9      	subs	r1, r1, r7
 80077be:	d420      	bmi.n	8007802 <_malloc_r+0xda>
 80077c0:	290b      	cmp	r1, #11
 80077c2:	d918      	bls.n	80077f6 <_malloc_r+0xce>
 80077c4:	19e2      	adds	r2, r4, r7
 80077c6:	6027      	str	r7, [r4, #0]
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d112      	bne.n	80077f2 <_malloc_r+0xca>
 80077cc:	9b00      	ldr	r3, [sp, #0]
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	6863      	ldr	r3, [r4, #4]
 80077d2:	6011      	str	r1, [r2, #0]
 80077d4:	6053      	str	r3, [r2, #4]
 80077d6:	0030      	movs	r0, r6
 80077d8:	0025      	movs	r5, r4
 80077da:	f000 f82f 	bl	800783c <__malloc_unlock>
 80077de:	2207      	movs	r2, #7
 80077e0:	350b      	adds	r5, #11
 80077e2:	1d23      	adds	r3, r4, #4
 80077e4:	4395      	bics	r5, r2
 80077e6:	1aea      	subs	r2, r5, r3
 80077e8:	429d      	cmp	r5, r3
 80077ea:	d0e4      	beq.n	80077b6 <_malloc_r+0x8e>
 80077ec:	1b5b      	subs	r3, r3, r5
 80077ee:	50a3      	str	r3, [r4, r2]
 80077f0:	e7e1      	b.n	80077b6 <_malloc_r+0x8e>
 80077f2:	605a      	str	r2, [r3, #4]
 80077f4:	e7ec      	b.n	80077d0 <_malloc_r+0xa8>
 80077f6:	6862      	ldr	r2, [r4, #4]
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	d1d5      	bne.n	80077a8 <_malloc_r+0x80>
 80077fc:	9b00      	ldr	r3, [sp, #0]
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	e7e9      	b.n	80077d6 <_malloc_r+0xae>
 8007802:	0023      	movs	r3, r4
 8007804:	6864      	ldr	r4, [r4, #4]
 8007806:	e7a2      	b.n	800774e <_malloc_r+0x26>
 8007808:	002c      	movs	r4, r5
 800780a:	686d      	ldr	r5, [r5, #4]
 800780c:	e7ab      	b.n	8007766 <_malloc_r+0x3e>
 800780e:	0013      	movs	r3, r2
 8007810:	e7c4      	b.n	800779c <_malloc_r+0x74>
 8007812:	230c      	movs	r3, #12
 8007814:	0030      	movs	r0, r6
 8007816:	6033      	str	r3, [r6, #0]
 8007818:	f000 f810 	bl	800783c <__malloc_unlock>
 800781c:	e7cb      	b.n	80077b6 <_malloc_r+0x8e>
 800781e:	6027      	str	r7, [r4, #0]
 8007820:	e7d9      	b.n	80077d6 <_malloc_r+0xae>
 8007822:	605b      	str	r3, [r3, #4]
 8007824:	deff      	udf	#255	; 0xff
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	2000048c 	.word	0x2000048c

0800782c <__malloc_lock>:
 800782c:	b510      	push	{r4, lr}
 800782e:	4802      	ldr	r0, [pc, #8]	; (8007838 <__malloc_lock+0xc>)
 8007830:	f000 f9ac 	bl	8007b8c <__retarget_lock_acquire_recursive>
 8007834:	bd10      	pop	{r4, pc}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	200005d4 	.word	0x200005d4

0800783c <__malloc_unlock>:
 800783c:	b510      	push	{r4, lr}
 800783e:	4802      	ldr	r0, [pc, #8]	; (8007848 <__malloc_unlock+0xc>)
 8007840:	f000 f9a5 	bl	8007b8e <__retarget_lock_release_recursive>
 8007844:	bd10      	pop	{r4, pc}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	200005d4 	.word	0x200005d4

0800784c <std>:
 800784c:	2300      	movs	r3, #0
 800784e:	b510      	push	{r4, lr}
 8007850:	0004      	movs	r4, r0
 8007852:	6003      	str	r3, [r0, #0]
 8007854:	6043      	str	r3, [r0, #4]
 8007856:	6083      	str	r3, [r0, #8]
 8007858:	8181      	strh	r1, [r0, #12]
 800785a:	6643      	str	r3, [r0, #100]	; 0x64
 800785c:	0019      	movs	r1, r3
 800785e:	81c2      	strh	r2, [r0, #14]
 8007860:	6103      	str	r3, [r0, #16]
 8007862:	6143      	str	r3, [r0, #20]
 8007864:	6183      	str	r3, [r0, #24]
 8007866:	2208      	movs	r2, #8
 8007868:	305c      	adds	r0, #92	; 0x5c
 800786a:	f000 f8fd 	bl	8007a68 <memset>
 800786e:	4b05      	ldr	r3, [pc, #20]	; (8007884 <std+0x38>)
 8007870:	6224      	str	r4, [r4, #32]
 8007872:	6263      	str	r3, [r4, #36]	; 0x24
 8007874:	4b04      	ldr	r3, [pc, #16]	; (8007888 <std+0x3c>)
 8007876:	62a3      	str	r3, [r4, #40]	; 0x28
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <std+0x40>)
 800787a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800787c:	4b04      	ldr	r3, [pc, #16]	; (8007890 <std+0x44>)
 800787e:	6323      	str	r3, [r4, #48]	; 0x30
 8007880:	bd10      	pop	{r4, pc}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	080079d1 	.word	0x080079d1
 8007888:	080079f9 	.word	0x080079f9
 800788c:	08007a31 	.word	0x08007a31
 8007890:	08007a5d 	.word	0x08007a5d

08007894 <stdio_exit_handler>:
 8007894:	b510      	push	{r4, lr}
 8007896:	4a03      	ldr	r2, [pc, #12]	; (80078a4 <stdio_exit_handler+0x10>)
 8007898:	4903      	ldr	r1, [pc, #12]	; (80078a8 <stdio_exit_handler+0x14>)
 800789a:	4804      	ldr	r0, [pc, #16]	; (80078ac <stdio_exit_handler+0x18>)
 800789c:	f000 f87c 	bl	8007998 <_fwalk_sglue>
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	20000014 	.word	0x20000014
 80078a8:	080082d1 	.word	0x080082d1
 80078ac:	20000020 	.word	0x20000020

080078b0 <cleanup_stdio>:
 80078b0:	6841      	ldr	r1, [r0, #4]
 80078b2:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <cleanup_stdio+0x30>)
 80078b4:	b510      	push	{r4, lr}
 80078b6:	0004      	movs	r4, r0
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d001      	beq.n	80078c0 <cleanup_stdio+0x10>
 80078bc:	f000 fd08 	bl	80082d0 <_fflush_r>
 80078c0:	68a1      	ldr	r1, [r4, #8]
 80078c2:	4b08      	ldr	r3, [pc, #32]	; (80078e4 <cleanup_stdio+0x34>)
 80078c4:	4299      	cmp	r1, r3
 80078c6:	d002      	beq.n	80078ce <cleanup_stdio+0x1e>
 80078c8:	0020      	movs	r0, r4
 80078ca:	f000 fd01 	bl	80082d0 <_fflush_r>
 80078ce:	68e1      	ldr	r1, [r4, #12]
 80078d0:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <cleanup_stdio+0x38>)
 80078d2:	4299      	cmp	r1, r3
 80078d4:	d002      	beq.n	80078dc <cleanup_stdio+0x2c>
 80078d6:	0020      	movs	r0, r4
 80078d8:	f000 fcfa 	bl	80082d0 <_fflush_r>
 80078dc:	bd10      	pop	{r4, pc}
 80078de:	46c0      	nop			; (mov r8, r8)
 80078e0:	20000494 	.word	0x20000494
 80078e4:	200004fc 	.word	0x200004fc
 80078e8:	20000564 	.word	0x20000564

080078ec <global_stdio_init.part.0>:
 80078ec:	b510      	push	{r4, lr}
 80078ee:	4b09      	ldr	r3, [pc, #36]	; (8007914 <global_stdio_init.part.0+0x28>)
 80078f0:	4a09      	ldr	r2, [pc, #36]	; (8007918 <global_stdio_init.part.0+0x2c>)
 80078f2:	2104      	movs	r1, #4
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	4809      	ldr	r0, [pc, #36]	; (800791c <global_stdio_init.part.0+0x30>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	f7ff ffa7 	bl	800784c <std>
 80078fe:	2201      	movs	r2, #1
 8007900:	2109      	movs	r1, #9
 8007902:	4807      	ldr	r0, [pc, #28]	; (8007920 <global_stdio_init.part.0+0x34>)
 8007904:	f7ff ffa2 	bl	800784c <std>
 8007908:	2202      	movs	r2, #2
 800790a:	2112      	movs	r1, #18
 800790c:	4805      	ldr	r0, [pc, #20]	; (8007924 <global_stdio_init.part.0+0x38>)
 800790e:	f7ff ff9d 	bl	800784c <std>
 8007912:	bd10      	pop	{r4, pc}
 8007914:	200005cc 	.word	0x200005cc
 8007918:	08007895 	.word	0x08007895
 800791c:	20000494 	.word	0x20000494
 8007920:	200004fc 	.word	0x200004fc
 8007924:	20000564 	.word	0x20000564

08007928 <__sfp_lock_acquire>:
 8007928:	b510      	push	{r4, lr}
 800792a:	4802      	ldr	r0, [pc, #8]	; (8007934 <__sfp_lock_acquire+0xc>)
 800792c:	f000 f92e 	bl	8007b8c <__retarget_lock_acquire_recursive>
 8007930:	bd10      	pop	{r4, pc}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	200005d5 	.word	0x200005d5

08007938 <__sfp_lock_release>:
 8007938:	b510      	push	{r4, lr}
 800793a:	4802      	ldr	r0, [pc, #8]	; (8007944 <__sfp_lock_release+0xc>)
 800793c:	f000 f927 	bl	8007b8e <__retarget_lock_release_recursive>
 8007940:	bd10      	pop	{r4, pc}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	200005d5 	.word	0x200005d5

08007948 <__sinit>:
 8007948:	b510      	push	{r4, lr}
 800794a:	0004      	movs	r4, r0
 800794c:	f7ff ffec 	bl	8007928 <__sfp_lock_acquire>
 8007950:	6a23      	ldr	r3, [r4, #32]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <__sinit+0x14>
 8007956:	f7ff ffef 	bl	8007938 <__sfp_lock_release>
 800795a:	bd10      	pop	{r4, pc}
 800795c:	4b04      	ldr	r3, [pc, #16]	; (8007970 <__sinit+0x28>)
 800795e:	6223      	str	r3, [r4, #32]
 8007960:	4b04      	ldr	r3, [pc, #16]	; (8007974 <__sinit+0x2c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1f6      	bne.n	8007956 <__sinit+0xe>
 8007968:	f7ff ffc0 	bl	80078ec <global_stdio_init.part.0>
 800796c:	e7f3      	b.n	8007956 <__sinit+0xe>
 800796e:	46c0      	nop			; (mov r8, r8)
 8007970:	080078b1 	.word	0x080078b1
 8007974:	200005cc 	.word	0x200005cc

08007978 <fiprintf>:
 8007978:	b40e      	push	{r1, r2, r3}
 800797a:	b517      	push	{r0, r1, r2, r4, lr}
 800797c:	4c05      	ldr	r4, [pc, #20]	; (8007994 <fiprintf+0x1c>)
 800797e:	ab05      	add	r3, sp, #20
 8007980:	cb04      	ldmia	r3!, {r2}
 8007982:	0001      	movs	r1, r0
 8007984:	6820      	ldr	r0, [r4, #0]
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	f000 f97c 	bl	8007c84 <_vfiprintf_r>
 800798c:	bc1e      	pop	{r1, r2, r3, r4}
 800798e:	bc08      	pop	{r3}
 8007990:	b003      	add	sp, #12
 8007992:	4718      	bx	r3
 8007994:	2000006c 	.word	0x2000006c

08007998 <_fwalk_sglue>:
 8007998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799a:	0014      	movs	r4, r2
 800799c:	2600      	movs	r6, #0
 800799e:	9000      	str	r0, [sp, #0]
 80079a0:	9101      	str	r1, [sp, #4]
 80079a2:	68a5      	ldr	r5, [r4, #8]
 80079a4:	6867      	ldr	r7, [r4, #4]
 80079a6:	3f01      	subs	r7, #1
 80079a8:	d504      	bpl.n	80079b4 <_fwalk_sglue+0x1c>
 80079aa:	6824      	ldr	r4, [r4, #0]
 80079ac:	2c00      	cmp	r4, #0
 80079ae:	d1f8      	bne.n	80079a2 <_fwalk_sglue+0xa>
 80079b0:	0030      	movs	r0, r6
 80079b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079b4:	89ab      	ldrh	r3, [r5, #12]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d908      	bls.n	80079cc <_fwalk_sglue+0x34>
 80079ba:	220e      	movs	r2, #14
 80079bc:	5eab      	ldrsh	r3, [r5, r2]
 80079be:	3301      	adds	r3, #1
 80079c0:	d004      	beq.n	80079cc <_fwalk_sglue+0x34>
 80079c2:	0029      	movs	r1, r5
 80079c4:	9800      	ldr	r0, [sp, #0]
 80079c6:	9b01      	ldr	r3, [sp, #4]
 80079c8:	4798      	blx	r3
 80079ca:	4306      	orrs	r6, r0
 80079cc:	3568      	adds	r5, #104	; 0x68
 80079ce:	e7ea      	b.n	80079a6 <_fwalk_sglue+0xe>

080079d0 <__sread>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	000c      	movs	r4, r1
 80079d4:	250e      	movs	r5, #14
 80079d6:	5f49      	ldrsh	r1, [r1, r5]
 80079d8:	f000 f874 	bl	8007ac4 <_read_r>
 80079dc:	2800      	cmp	r0, #0
 80079de:	db03      	blt.n	80079e8 <__sread+0x18>
 80079e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80079e2:	181b      	adds	r3, r3, r0
 80079e4:	6563      	str	r3, [r4, #84]	; 0x54
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	4a02      	ldr	r2, [pc, #8]	; (80079f4 <__sread+0x24>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	81a3      	strh	r3, [r4, #12]
 80079f0:	e7f9      	b.n	80079e6 <__sread+0x16>
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	ffffefff 	.word	0xffffefff

080079f8 <__swrite>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	001f      	movs	r7, r3
 80079fc:	898b      	ldrh	r3, [r1, #12]
 80079fe:	0005      	movs	r5, r0
 8007a00:	000c      	movs	r4, r1
 8007a02:	0016      	movs	r6, r2
 8007a04:	05db      	lsls	r3, r3, #23
 8007a06:	d505      	bpl.n	8007a14 <__swrite+0x1c>
 8007a08:	230e      	movs	r3, #14
 8007a0a:	5ec9      	ldrsh	r1, [r1, r3]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2302      	movs	r3, #2
 8007a10:	f000 f844 	bl	8007a9c <_lseek_r>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	4a05      	ldr	r2, [pc, #20]	; (8007a2c <__swrite+0x34>)
 8007a18:	0028      	movs	r0, r5
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	0032      	movs	r2, r6
 8007a20:	230e      	movs	r3, #14
 8007a22:	5ee1      	ldrsh	r1, [r4, r3]
 8007a24:	003b      	movs	r3, r7
 8007a26:	f000 f873 	bl	8007b10 <_write_r>
 8007a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a2c:	ffffefff 	.word	0xffffefff

08007a30 <__sseek>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	000c      	movs	r4, r1
 8007a34:	250e      	movs	r5, #14
 8007a36:	5f49      	ldrsh	r1, [r1, r5]
 8007a38:	f000 f830 	bl	8007a9c <_lseek_r>
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	1c42      	adds	r2, r0, #1
 8007a40:	d103      	bne.n	8007a4a <__sseek+0x1a>
 8007a42:	4a05      	ldr	r2, [pc, #20]	; (8007a58 <__sseek+0x28>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	81a3      	strh	r3, [r4, #12]
 8007a48:	bd70      	pop	{r4, r5, r6, pc}
 8007a4a:	2280      	movs	r2, #128	; 0x80
 8007a4c:	0152      	lsls	r2, r2, #5
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	81a3      	strh	r3, [r4, #12]
 8007a52:	6560      	str	r0, [r4, #84]	; 0x54
 8007a54:	e7f8      	b.n	8007a48 <__sseek+0x18>
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	ffffefff 	.word	0xffffefff

08007a5c <__sclose>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	230e      	movs	r3, #14
 8007a60:	5ec9      	ldrsh	r1, [r1, r3]
 8007a62:	f000 f809 	bl	8007a78 <_close_r>
 8007a66:	bd10      	pop	{r4, pc}

08007a68 <memset>:
 8007a68:	0003      	movs	r3, r0
 8007a6a:	1882      	adds	r2, r0, r2
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d100      	bne.n	8007a72 <memset+0xa>
 8007a70:	4770      	bx	lr
 8007a72:	7019      	strb	r1, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	e7f9      	b.n	8007a6c <memset+0x4>

08007a78 <_close_r>:
 8007a78:	2300      	movs	r3, #0
 8007a7a:	b570      	push	{r4, r5, r6, lr}
 8007a7c:	4d06      	ldr	r5, [pc, #24]	; (8007a98 <_close_r+0x20>)
 8007a7e:	0004      	movs	r4, r0
 8007a80:	0008      	movs	r0, r1
 8007a82:	602b      	str	r3, [r5, #0]
 8007a84:	f7fc f9cf 	bl	8003e26 <_close>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d103      	bne.n	8007a94 <_close_r+0x1c>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d000      	beq.n	8007a94 <_close_r+0x1c>
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	bd70      	pop	{r4, r5, r6, pc}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	200005d0 	.word	0x200005d0

08007a9c <_lseek_r>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	0004      	movs	r4, r0
 8007aa0:	0008      	movs	r0, r1
 8007aa2:	0011      	movs	r1, r2
 8007aa4:	001a      	movs	r2, r3
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4d05      	ldr	r5, [pc, #20]	; (8007ac0 <_lseek_r+0x24>)
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7fc f9dc 	bl	8003e68 <_lseek>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d103      	bne.n	8007abc <_lseek_r+0x20>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d000      	beq.n	8007abc <_lseek_r+0x20>
 8007aba:	6023      	str	r3, [r4, #0]
 8007abc:	bd70      	pop	{r4, r5, r6, pc}
 8007abe:	46c0      	nop			; (mov r8, r8)
 8007ac0:	200005d0 	.word	0x200005d0

08007ac4 <_read_r>:
 8007ac4:	b570      	push	{r4, r5, r6, lr}
 8007ac6:	0004      	movs	r4, r0
 8007ac8:	0008      	movs	r0, r1
 8007aca:	0011      	movs	r1, r2
 8007acc:	001a      	movs	r2, r3
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4d05      	ldr	r5, [pc, #20]	; (8007ae8 <_read_r+0x24>)
 8007ad2:	602b      	str	r3, [r5, #0]
 8007ad4:	f7fc f96e 	bl	8003db4 <_read>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d103      	bne.n	8007ae4 <_read_r+0x20>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d000      	beq.n	8007ae4 <_read_r+0x20>
 8007ae2:	6023      	str	r3, [r4, #0]
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	200005d0 	.word	0x200005d0

08007aec <_sbrk_r>:
 8007aec:	2300      	movs	r3, #0
 8007aee:	b570      	push	{r4, r5, r6, lr}
 8007af0:	4d06      	ldr	r5, [pc, #24]	; (8007b0c <_sbrk_r+0x20>)
 8007af2:	0004      	movs	r4, r0
 8007af4:	0008      	movs	r0, r1
 8007af6:	602b      	str	r3, [r5, #0]
 8007af8:	f7fc f9c2 	bl	8003e80 <_sbrk>
 8007afc:	1c43      	adds	r3, r0, #1
 8007afe:	d103      	bne.n	8007b08 <_sbrk_r+0x1c>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d000      	beq.n	8007b08 <_sbrk_r+0x1c>
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	bd70      	pop	{r4, r5, r6, pc}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	200005d0 	.word	0x200005d0

08007b10 <_write_r>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	0004      	movs	r4, r0
 8007b14:	0008      	movs	r0, r1
 8007b16:	0011      	movs	r1, r2
 8007b18:	001a      	movs	r2, r3
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4d05      	ldr	r5, [pc, #20]	; (8007b34 <_write_r+0x24>)
 8007b1e:	602b      	str	r3, [r5, #0]
 8007b20:	f7fc f965 	bl	8003dee <_write>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d103      	bne.n	8007b30 <_write_r+0x20>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d000      	beq.n	8007b30 <_write_r+0x20>
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	200005d0 	.word	0x200005d0

08007b38 <__errno>:
 8007b38:	4b01      	ldr	r3, [pc, #4]	; (8007b40 <__errno+0x8>)
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	4770      	bx	lr
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	2000006c 	.word	0x2000006c

08007b44 <__libc_init_array>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	2600      	movs	r6, #0
 8007b48:	4c0c      	ldr	r4, [pc, #48]	; (8007b7c <__libc_init_array+0x38>)
 8007b4a:	4d0d      	ldr	r5, [pc, #52]	; (8007b80 <__libc_init_array+0x3c>)
 8007b4c:	1b64      	subs	r4, r4, r5
 8007b4e:	10a4      	asrs	r4, r4, #2
 8007b50:	42a6      	cmp	r6, r4
 8007b52:	d109      	bne.n	8007b68 <__libc_init_array+0x24>
 8007b54:	2600      	movs	r6, #0
 8007b56:	f000 fd6d 	bl	8008634 <_init>
 8007b5a:	4c0a      	ldr	r4, [pc, #40]	; (8007b84 <__libc_init_array+0x40>)
 8007b5c:	4d0a      	ldr	r5, [pc, #40]	; (8007b88 <__libc_init_array+0x44>)
 8007b5e:	1b64      	subs	r4, r4, r5
 8007b60:	10a4      	asrs	r4, r4, #2
 8007b62:	42a6      	cmp	r6, r4
 8007b64:	d105      	bne.n	8007b72 <__libc_init_array+0x2e>
 8007b66:	bd70      	pop	{r4, r5, r6, pc}
 8007b68:	00b3      	lsls	r3, r6, #2
 8007b6a:	58eb      	ldr	r3, [r5, r3]
 8007b6c:	4798      	blx	r3
 8007b6e:	3601      	adds	r6, #1
 8007b70:	e7ee      	b.n	8007b50 <__libc_init_array+0xc>
 8007b72:	00b3      	lsls	r3, r6, #2
 8007b74:	58eb      	ldr	r3, [r5, r3]
 8007b76:	4798      	blx	r3
 8007b78:	3601      	adds	r6, #1
 8007b7a:	e7f2      	b.n	8007b62 <__libc_init_array+0x1e>
 8007b7c:	080088ec 	.word	0x080088ec
 8007b80:	080088ec 	.word	0x080088ec
 8007b84:	080088f4 	.word	0x080088f4
 8007b88:	080088ec 	.word	0x080088ec

08007b8c <__retarget_lock_acquire_recursive>:
 8007b8c:	4770      	bx	lr

08007b8e <__retarget_lock_release_recursive>:
 8007b8e:	4770      	bx	lr

08007b90 <abort>:
 8007b90:	2006      	movs	r0, #6
 8007b92:	b510      	push	{r4, lr}
 8007b94:	f000 fc98 	bl	80084c8 <raise>
 8007b98:	2001      	movs	r0, #1
 8007b9a:	f7fc f8ff 	bl	8003d9c <_exit>
	...

08007ba0 <_free_r>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	0005      	movs	r5, r0
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	d010      	beq.n	8007bca <_free_r+0x2a>
 8007ba8:	1f0c      	subs	r4, r1, #4
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	da00      	bge.n	8007bb2 <_free_r+0x12>
 8007bb0:	18e4      	adds	r4, r4, r3
 8007bb2:	0028      	movs	r0, r5
 8007bb4:	f7ff fe3a 	bl	800782c <__malloc_lock>
 8007bb8:	4a1d      	ldr	r2, [pc, #116]	; (8007c30 <_free_r+0x90>)
 8007bba:	6813      	ldr	r3, [r2, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d105      	bne.n	8007bcc <_free_r+0x2c>
 8007bc0:	6063      	str	r3, [r4, #4]
 8007bc2:	6014      	str	r4, [r2, #0]
 8007bc4:	0028      	movs	r0, r5
 8007bc6:	f7ff fe39 	bl	800783c <__malloc_unlock>
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	d908      	bls.n	8007be2 <_free_r+0x42>
 8007bd0:	6820      	ldr	r0, [r4, #0]
 8007bd2:	1821      	adds	r1, r4, r0
 8007bd4:	428b      	cmp	r3, r1
 8007bd6:	d1f3      	bne.n	8007bc0 <_free_r+0x20>
 8007bd8:	6819      	ldr	r1, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	1809      	adds	r1, r1, r0
 8007bde:	6021      	str	r1, [r4, #0]
 8007be0:	e7ee      	b.n	8007bc0 <_free_r+0x20>
 8007be2:	001a      	movs	r2, r3
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <_free_r+0x4e>
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	d9f9      	bls.n	8007be2 <_free_r+0x42>
 8007bee:	6811      	ldr	r1, [r2, #0]
 8007bf0:	1850      	adds	r0, r2, r1
 8007bf2:	42a0      	cmp	r0, r4
 8007bf4:	d10b      	bne.n	8007c0e <_free_r+0x6e>
 8007bf6:	6820      	ldr	r0, [r4, #0]
 8007bf8:	1809      	adds	r1, r1, r0
 8007bfa:	1850      	adds	r0, r2, r1
 8007bfc:	6011      	str	r1, [r2, #0]
 8007bfe:	4283      	cmp	r3, r0
 8007c00:	d1e0      	bne.n	8007bc4 <_free_r+0x24>
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	1841      	adds	r1, r0, r1
 8007c08:	6011      	str	r1, [r2, #0]
 8007c0a:	6053      	str	r3, [r2, #4]
 8007c0c:	e7da      	b.n	8007bc4 <_free_r+0x24>
 8007c0e:	42a0      	cmp	r0, r4
 8007c10:	d902      	bls.n	8007c18 <_free_r+0x78>
 8007c12:	230c      	movs	r3, #12
 8007c14:	602b      	str	r3, [r5, #0]
 8007c16:	e7d5      	b.n	8007bc4 <_free_r+0x24>
 8007c18:	6820      	ldr	r0, [r4, #0]
 8007c1a:	1821      	adds	r1, r4, r0
 8007c1c:	428b      	cmp	r3, r1
 8007c1e:	d103      	bne.n	8007c28 <_free_r+0x88>
 8007c20:	6819      	ldr	r1, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	1809      	adds	r1, r1, r0
 8007c26:	6021      	str	r1, [r4, #0]
 8007c28:	6063      	str	r3, [r4, #4]
 8007c2a:	6054      	str	r4, [r2, #4]
 8007c2c:	e7ca      	b.n	8007bc4 <_free_r+0x24>
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	2000048c 	.word	0x2000048c

08007c34 <__sfputc_r>:
 8007c34:	6893      	ldr	r3, [r2, #8]
 8007c36:	b510      	push	{r4, lr}
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	6093      	str	r3, [r2, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	da04      	bge.n	8007c4a <__sfputc_r+0x16>
 8007c40:	6994      	ldr	r4, [r2, #24]
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	db07      	blt.n	8007c56 <__sfputc_r+0x22>
 8007c46:	290a      	cmp	r1, #10
 8007c48:	d005      	beq.n	8007c56 <__sfputc_r+0x22>
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	1c58      	adds	r0, r3, #1
 8007c4e:	6010      	str	r0, [r2, #0]
 8007c50:	7019      	strb	r1, [r3, #0]
 8007c52:	0008      	movs	r0, r1
 8007c54:	bd10      	pop	{r4, pc}
 8007c56:	f000 fb66 	bl	8008326 <__swbuf_r>
 8007c5a:	0001      	movs	r1, r0
 8007c5c:	e7f9      	b.n	8007c52 <__sfputc_r+0x1e>

08007c5e <__sfputs_r>:
 8007c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c60:	0006      	movs	r6, r0
 8007c62:	000f      	movs	r7, r1
 8007c64:	0014      	movs	r4, r2
 8007c66:	18d5      	adds	r5, r2, r3
 8007c68:	42ac      	cmp	r4, r5
 8007c6a:	d101      	bne.n	8007c70 <__sfputs_r+0x12>
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e007      	b.n	8007c80 <__sfputs_r+0x22>
 8007c70:	7821      	ldrb	r1, [r4, #0]
 8007c72:	003a      	movs	r2, r7
 8007c74:	0030      	movs	r0, r6
 8007c76:	f7ff ffdd 	bl	8007c34 <__sfputc_r>
 8007c7a:	3401      	adds	r4, #1
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d1f3      	bne.n	8007c68 <__sfputs_r+0xa>
 8007c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c84 <_vfiprintf_r>:
 8007c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c86:	b0a1      	sub	sp, #132	; 0x84
 8007c88:	000f      	movs	r7, r1
 8007c8a:	0015      	movs	r5, r2
 8007c8c:	001e      	movs	r6, r3
 8007c8e:	9003      	str	r0, [sp, #12]
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d004      	beq.n	8007c9e <_vfiprintf_r+0x1a>
 8007c94:	6a03      	ldr	r3, [r0, #32]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <_vfiprintf_r+0x1a>
 8007c9a:	f7ff fe55 	bl	8007948 <__sinit>
 8007c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ca0:	07db      	lsls	r3, r3, #31
 8007ca2:	d405      	bmi.n	8007cb0 <_vfiprintf_r+0x2c>
 8007ca4:	89bb      	ldrh	r3, [r7, #12]
 8007ca6:	059b      	lsls	r3, r3, #22
 8007ca8:	d402      	bmi.n	8007cb0 <_vfiprintf_r+0x2c>
 8007caa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007cac:	f7ff ff6e 	bl	8007b8c <__retarget_lock_acquire_recursive>
 8007cb0:	89bb      	ldrh	r3, [r7, #12]
 8007cb2:	071b      	lsls	r3, r3, #28
 8007cb4:	d502      	bpl.n	8007cbc <_vfiprintf_r+0x38>
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d113      	bne.n	8007ce4 <_vfiprintf_r+0x60>
 8007cbc:	0039      	movs	r1, r7
 8007cbe:	9803      	ldr	r0, [sp, #12]
 8007cc0:	f000 fb74 	bl	80083ac <__swsetup_r>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d00d      	beq.n	8007ce4 <_vfiprintf_r+0x60>
 8007cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cca:	07db      	lsls	r3, r3, #31
 8007ccc:	d503      	bpl.n	8007cd6 <_vfiprintf_r+0x52>
 8007cce:	2001      	movs	r0, #1
 8007cd0:	4240      	negs	r0, r0
 8007cd2:	b021      	add	sp, #132	; 0x84
 8007cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cd6:	89bb      	ldrh	r3, [r7, #12]
 8007cd8:	059b      	lsls	r3, r3, #22
 8007cda:	d4f8      	bmi.n	8007cce <_vfiprintf_r+0x4a>
 8007cdc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007cde:	f7ff ff56 	bl	8007b8e <__retarget_lock_release_recursive>
 8007ce2:	e7f4      	b.n	8007cce <_vfiprintf_r+0x4a>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	ac08      	add	r4, sp, #32
 8007ce8:	6163      	str	r3, [r4, #20]
 8007cea:	3320      	adds	r3, #32
 8007cec:	7663      	strb	r3, [r4, #25]
 8007cee:	3310      	adds	r3, #16
 8007cf0:	76a3      	strb	r3, [r4, #26]
 8007cf2:	9607      	str	r6, [sp, #28]
 8007cf4:	002e      	movs	r6, r5
 8007cf6:	7833      	ldrb	r3, [r6, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <_vfiprintf_r+0x7c>
 8007cfc:	2b25      	cmp	r3, #37	; 0x25
 8007cfe:	d148      	bne.n	8007d92 <_vfiprintf_r+0x10e>
 8007d00:	1b73      	subs	r3, r6, r5
 8007d02:	9305      	str	r3, [sp, #20]
 8007d04:	42ae      	cmp	r6, r5
 8007d06:	d00b      	beq.n	8007d20 <_vfiprintf_r+0x9c>
 8007d08:	002a      	movs	r2, r5
 8007d0a:	0039      	movs	r1, r7
 8007d0c:	9803      	ldr	r0, [sp, #12]
 8007d0e:	f7ff ffa6 	bl	8007c5e <__sfputs_r>
 8007d12:	3001      	adds	r0, #1
 8007d14:	d100      	bne.n	8007d18 <_vfiprintf_r+0x94>
 8007d16:	e0af      	b.n	8007e78 <_vfiprintf_r+0x1f4>
 8007d18:	6963      	ldr	r3, [r4, #20]
 8007d1a:	9a05      	ldr	r2, [sp, #20]
 8007d1c:	189b      	adds	r3, r3, r2
 8007d1e:	6163      	str	r3, [r4, #20]
 8007d20:	7833      	ldrb	r3, [r6, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d100      	bne.n	8007d28 <_vfiprintf_r+0xa4>
 8007d26:	e0a7      	b.n	8007e78 <_vfiprintf_r+0x1f4>
 8007d28:	2201      	movs	r2, #1
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	4252      	negs	r2, r2
 8007d2e:	6062      	str	r2, [r4, #4]
 8007d30:	a904      	add	r1, sp, #16
 8007d32:	3254      	adds	r2, #84	; 0x54
 8007d34:	1852      	adds	r2, r2, r1
 8007d36:	1c75      	adds	r5, r6, #1
 8007d38:	6023      	str	r3, [r4, #0]
 8007d3a:	60e3      	str	r3, [r4, #12]
 8007d3c:	60a3      	str	r3, [r4, #8]
 8007d3e:	7013      	strb	r3, [r2, #0]
 8007d40:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d42:	4b59      	ldr	r3, [pc, #356]	; (8007ea8 <_vfiprintf_r+0x224>)
 8007d44:	2205      	movs	r2, #5
 8007d46:	0018      	movs	r0, r3
 8007d48:	7829      	ldrb	r1, [r5, #0]
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	f000 fbdc 	bl	8008508 <memchr>
 8007d50:	1c6e      	adds	r6, r5, #1
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d11f      	bne.n	8007d96 <_vfiprintf_r+0x112>
 8007d56:	6822      	ldr	r2, [r4, #0]
 8007d58:	06d3      	lsls	r3, r2, #27
 8007d5a:	d504      	bpl.n	8007d66 <_vfiprintf_r+0xe2>
 8007d5c:	2353      	movs	r3, #83	; 0x53
 8007d5e:	a904      	add	r1, sp, #16
 8007d60:	185b      	adds	r3, r3, r1
 8007d62:	2120      	movs	r1, #32
 8007d64:	7019      	strb	r1, [r3, #0]
 8007d66:	0713      	lsls	r3, r2, #28
 8007d68:	d504      	bpl.n	8007d74 <_vfiprintf_r+0xf0>
 8007d6a:	2353      	movs	r3, #83	; 0x53
 8007d6c:	a904      	add	r1, sp, #16
 8007d6e:	185b      	adds	r3, r3, r1
 8007d70:	212b      	movs	r1, #43	; 0x2b
 8007d72:	7019      	strb	r1, [r3, #0]
 8007d74:	782b      	ldrb	r3, [r5, #0]
 8007d76:	2b2a      	cmp	r3, #42	; 0x2a
 8007d78:	d016      	beq.n	8007da8 <_vfiprintf_r+0x124>
 8007d7a:	002e      	movs	r6, r5
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	200a      	movs	r0, #10
 8007d80:	68e3      	ldr	r3, [r4, #12]
 8007d82:	7832      	ldrb	r2, [r6, #0]
 8007d84:	1c75      	adds	r5, r6, #1
 8007d86:	3a30      	subs	r2, #48	; 0x30
 8007d88:	2a09      	cmp	r2, #9
 8007d8a:	d94e      	bls.n	8007e2a <_vfiprintf_r+0x1a6>
 8007d8c:	2900      	cmp	r1, #0
 8007d8e:	d111      	bne.n	8007db4 <_vfiprintf_r+0x130>
 8007d90:	e017      	b.n	8007dc2 <_vfiprintf_r+0x13e>
 8007d92:	3601      	adds	r6, #1
 8007d94:	e7af      	b.n	8007cf6 <_vfiprintf_r+0x72>
 8007d96:	9b05      	ldr	r3, [sp, #20]
 8007d98:	6822      	ldr	r2, [r4, #0]
 8007d9a:	1ac0      	subs	r0, r0, r3
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4083      	lsls	r3, r0
 8007da0:	4313      	orrs	r3, r2
 8007da2:	0035      	movs	r5, r6
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	e7cc      	b.n	8007d42 <_vfiprintf_r+0xbe>
 8007da8:	9b07      	ldr	r3, [sp, #28]
 8007daa:	1d19      	adds	r1, r3, #4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	9107      	str	r1, [sp, #28]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	db01      	blt.n	8007db8 <_vfiprintf_r+0x134>
 8007db4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007db6:	e004      	b.n	8007dc2 <_vfiprintf_r+0x13e>
 8007db8:	425b      	negs	r3, r3
 8007dba:	60e3      	str	r3, [r4, #12]
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	7833      	ldrb	r3, [r6, #0]
 8007dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8007dc6:	d10a      	bne.n	8007dde <_vfiprintf_r+0x15a>
 8007dc8:	7873      	ldrb	r3, [r6, #1]
 8007dca:	2b2a      	cmp	r3, #42	; 0x2a
 8007dcc:	d135      	bne.n	8007e3a <_vfiprintf_r+0x1b6>
 8007dce:	9b07      	ldr	r3, [sp, #28]
 8007dd0:	3602      	adds	r6, #2
 8007dd2:	1d1a      	adds	r2, r3, #4
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	9207      	str	r2, [sp, #28]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	db2b      	blt.n	8007e34 <_vfiprintf_r+0x1b0>
 8007ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dde:	4d33      	ldr	r5, [pc, #204]	; (8007eac <_vfiprintf_r+0x228>)
 8007de0:	2203      	movs	r2, #3
 8007de2:	0028      	movs	r0, r5
 8007de4:	7831      	ldrb	r1, [r6, #0]
 8007de6:	f000 fb8f 	bl	8008508 <memchr>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d006      	beq.n	8007dfc <_vfiprintf_r+0x178>
 8007dee:	2340      	movs	r3, #64	; 0x40
 8007df0:	1b40      	subs	r0, r0, r5
 8007df2:	4083      	lsls	r3, r0
 8007df4:	6822      	ldr	r2, [r4, #0]
 8007df6:	3601      	adds	r6, #1
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	6023      	str	r3, [r4, #0]
 8007dfc:	7831      	ldrb	r1, [r6, #0]
 8007dfe:	2206      	movs	r2, #6
 8007e00:	482b      	ldr	r0, [pc, #172]	; (8007eb0 <_vfiprintf_r+0x22c>)
 8007e02:	1c75      	adds	r5, r6, #1
 8007e04:	7621      	strb	r1, [r4, #24]
 8007e06:	f000 fb7f 	bl	8008508 <memchr>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d043      	beq.n	8007e96 <_vfiprintf_r+0x212>
 8007e0e:	4b29      	ldr	r3, [pc, #164]	; (8007eb4 <_vfiprintf_r+0x230>)
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d125      	bne.n	8007e60 <_vfiprintf_r+0x1dc>
 8007e14:	2207      	movs	r2, #7
 8007e16:	9b07      	ldr	r3, [sp, #28]
 8007e18:	3307      	adds	r3, #7
 8007e1a:	4393      	bics	r3, r2
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	9307      	str	r3, [sp, #28]
 8007e20:	6963      	ldr	r3, [r4, #20]
 8007e22:	9a04      	ldr	r2, [sp, #16]
 8007e24:	189b      	adds	r3, r3, r2
 8007e26:	6163      	str	r3, [r4, #20]
 8007e28:	e764      	b.n	8007cf4 <_vfiprintf_r+0x70>
 8007e2a:	4343      	muls	r3, r0
 8007e2c:	002e      	movs	r6, r5
 8007e2e:	2101      	movs	r1, #1
 8007e30:	189b      	adds	r3, r3, r2
 8007e32:	e7a6      	b.n	8007d82 <_vfiprintf_r+0xfe>
 8007e34:	2301      	movs	r3, #1
 8007e36:	425b      	negs	r3, r3
 8007e38:	e7d0      	b.n	8007ddc <_vfiprintf_r+0x158>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	200a      	movs	r0, #10
 8007e3e:	001a      	movs	r2, r3
 8007e40:	3601      	adds	r6, #1
 8007e42:	6063      	str	r3, [r4, #4]
 8007e44:	7831      	ldrb	r1, [r6, #0]
 8007e46:	1c75      	adds	r5, r6, #1
 8007e48:	3930      	subs	r1, #48	; 0x30
 8007e4a:	2909      	cmp	r1, #9
 8007e4c:	d903      	bls.n	8007e56 <_vfiprintf_r+0x1d2>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0c5      	beq.n	8007dde <_vfiprintf_r+0x15a>
 8007e52:	9209      	str	r2, [sp, #36]	; 0x24
 8007e54:	e7c3      	b.n	8007dde <_vfiprintf_r+0x15a>
 8007e56:	4342      	muls	r2, r0
 8007e58:	002e      	movs	r6, r5
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	1852      	adds	r2, r2, r1
 8007e5e:	e7f1      	b.n	8007e44 <_vfiprintf_r+0x1c0>
 8007e60:	aa07      	add	r2, sp, #28
 8007e62:	9200      	str	r2, [sp, #0]
 8007e64:	0021      	movs	r1, r4
 8007e66:	003a      	movs	r2, r7
 8007e68:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <_vfiprintf_r+0x234>)
 8007e6a:	9803      	ldr	r0, [sp, #12]
 8007e6c:	e000      	b.n	8007e70 <_vfiprintf_r+0x1ec>
 8007e6e:	bf00      	nop
 8007e70:	9004      	str	r0, [sp, #16]
 8007e72:	9b04      	ldr	r3, [sp, #16]
 8007e74:	3301      	adds	r3, #1
 8007e76:	d1d3      	bne.n	8007e20 <_vfiprintf_r+0x19c>
 8007e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e7a:	07db      	lsls	r3, r3, #31
 8007e7c:	d405      	bmi.n	8007e8a <_vfiprintf_r+0x206>
 8007e7e:	89bb      	ldrh	r3, [r7, #12]
 8007e80:	059b      	lsls	r3, r3, #22
 8007e82:	d402      	bmi.n	8007e8a <_vfiprintf_r+0x206>
 8007e84:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007e86:	f7ff fe82 	bl	8007b8e <__retarget_lock_release_recursive>
 8007e8a:	89bb      	ldrh	r3, [r7, #12]
 8007e8c:	065b      	lsls	r3, r3, #25
 8007e8e:	d500      	bpl.n	8007e92 <_vfiprintf_r+0x20e>
 8007e90:	e71d      	b.n	8007cce <_vfiprintf_r+0x4a>
 8007e92:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007e94:	e71d      	b.n	8007cd2 <_vfiprintf_r+0x4e>
 8007e96:	aa07      	add	r2, sp, #28
 8007e98:	9200      	str	r2, [sp, #0]
 8007e9a:	0021      	movs	r1, r4
 8007e9c:	003a      	movs	r2, r7
 8007e9e:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <_vfiprintf_r+0x234>)
 8007ea0:	9803      	ldr	r0, [sp, #12]
 8007ea2:	f000 f87b 	bl	8007f9c <_printf_i>
 8007ea6:	e7e3      	b.n	8007e70 <_vfiprintf_r+0x1ec>
 8007ea8:	080088b0 	.word	0x080088b0
 8007eac:	080088b6 	.word	0x080088b6
 8007eb0:	080088ba 	.word	0x080088ba
 8007eb4:	00000000 	.word	0x00000000
 8007eb8:	08007c5f 	.word	0x08007c5f

08007ebc <_printf_common>:
 8007ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ebe:	0016      	movs	r6, r2
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	688a      	ldr	r2, [r1, #8]
 8007ec4:	690b      	ldr	r3, [r1, #16]
 8007ec6:	000c      	movs	r4, r1
 8007ec8:	9000      	str	r0, [sp, #0]
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	da00      	bge.n	8007ed0 <_printf_common+0x14>
 8007ece:	0013      	movs	r3, r2
 8007ed0:	0022      	movs	r2, r4
 8007ed2:	6033      	str	r3, [r6, #0]
 8007ed4:	3243      	adds	r2, #67	; 0x43
 8007ed6:	7812      	ldrb	r2, [r2, #0]
 8007ed8:	2a00      	cmp	r2, #0
 8007eda:	d001      	beq.n	8007ee0 <_printf_common+0x24>
 8007edc:	3301      	adds	r3, #1
 8007ede:	6033      	str	r3, [r6, #0]
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	069b      	lsls	r3, r3, #26
 8007ee4:	d502      	bpl.n	8007eec <_printf_common+0x30>
 8007ee6:	6833      	ldr	r3, [r6, #0]
 8007ee8:	3302      	adds	r3, #2
 8007eea:	6033      	str	r3, [r6, #0]
 8007eec:	6822      	ldr	r2, [r4, #0]
 8007eee:	2306      	movs	r3, #6
 8007ef0:	0015      	movs	r5, r2
 8007ef2:	401d      	ands	r5, r3
 8007ef4:	421a      	tst	r2, r3
 8007ef6:	d027      	beq.n	8007f48 <_printf_common+0x8c>
 8007ef8:	0023      	movs	r3, r4
 8007efa:	3343      	adds	r3, #67	; 0x43
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	1e5a      	subs	r2, r3, #1
 8007f00:	4193      	sbcs	r3, r2
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	0692      	lsls	r2, r2, #26
 8007f06:	d430      	bmi.n	8007f6a <_printf_common+0xae>
 8007f08:	0022      	movs	r2, r4
 8007f0a:	9901      	ldr	r1, [sp, #4]
 8007f0c:	9800      	ldr	r0, [sp, #0]
 8007f0e:	9d08      	ldr	r5, [sp, #32]
 8007f10:	3243      	adds	r2, #67	; 0x43
 8007f12:	47a8      	blx	r5
 8007f14:	3001      	adds	r0, #1
 8007f16:	d025      	beq.n	8007f64 <_printf_common+0xa8>
 8007f18:	2206      	movs	r2, #6
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	2500      	movs	r5, #0
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d105      	bne.n	8007f30 <_printf_common+0x74>
 8007f24:	6833      	ldr	r3, [r6, #0]
 8007f26:	68e5      	ldr	r5, [r4, #12]
 8007f28:	1aed      	subs	r5, r5, r3
 8007f2a:	43eb      	mvns	r3, r5
 8007f2c:	17db      	asrs	r3, r3, #31
 8007f2e:	401d      	ands	r5, r3
 8007f30:	68a3      	ldr	r3, [r4, #8]
 8007f32:	6922      	ldr	r2, [r4, #16]
 8007f34:	4293      	cmp	r3, r2
 8007f36:	dd01      	ble.n	8007f3c <_printf_common+0x80>
 8007f38:	1a9b      	subs	r3, r3, r2
 8007f3a:	18ed      	adds	r5, r5, r3
 8007f3c:	2600      	movs	r6, #0
 8007f3e:	42b5      	cmp	r5, r6
 8007f40:	d120      	bne.n	8007f84 <_printf_common+0xc8>
 8007f42:	2000      	movs	r0, #0
 8007f44:	e010      	b.n	8007f68 <_printf_common+0xac>
 8007f46:	3501      	adds	r5, #1
 8007f48:	68e3      	ldr	r3, [r4, #12]
 8007f4a:	6832      	ldr	r2, [r6, #0]
 8007f4c:	1a9b      	subs	r3, r3, r2
 8007f4e:	42ab      	cmp	r3, r5
 8007f50:	ddd2      	ble.n	8007ef8 <_printf_common+0x3c>
 8007f52:	0022      	movs	r2, r4
 8007f54:	2301      	movs	r3, #1
 8007f56:	9901      	ldr	r1, [sp, #4]
 8007f58:	9800      	ldr	r0, [sp, #0]
 8007f5a:	9f08      	ldr	r7, [sp, #32]
 8007f5c:	3219      	adds	r2, #25
 8007f5e:	47b8      	blx	r7
 8007f60:	3001      	adds	r0, #1
 8007f62:	d1f0      	bne.n	8007f46 <_printf_common+0x8a>
 8007f64:	2001      	movs	r0, #1
 8007f66:	4240      	negs	r0, r0
 8007f68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f6a:	2030      	movs	r0, #48	; 0x30
 8007f6c:	18e1      	adds	r1, r4, r3
 8007f6e:	3143      	adds	r1, #67	; 0x43
 8007f70:	7008      	strb	r0, [r1, #0]
 8007f72:	0021      	movs	r1, r4
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	3145      	adds	r1, #69	; 0x45
 8007f78:	7809      	ldrb	r1, [r1, #0]
 8007f7a:	18a2      	adds	r2, r4, r2
 8007f7c:	3243      	adds	r2, #67	; 0x43
 8007f7e:	3302      	adds	r3, #2
 8007f80:	7011      	strb	r1, [r2, #0]
 8007f82:	e7c1      	b.n	8007f08 <_printf_common+0x4c>
 8007f84:	0022      	movs	r2, r4
 8007f86:	2301      	movs	r3, #1
 8007f88:	9901      	ldr	r1, [sp, #4]
 8007f8a:	9800      	ldr	r0, [sp, #0]
 8007f8c:	9f08      	ldr	r7, [sp, #32]
 8007f8e:	321a      	adds	r2, #26
 8007f90:	47b8      	blx	r7
 8007f92:	3001      	adds	r0, #1
 8007f94:	d0e6      	beq.n	8007f64 <_printf_common+0xa8>
 8007f96:	3601      	adds	r6, #1
 8007f98:	e7d1      	b.n	8007f3e <_printf_common+0x82>
	...

08007f9c <_printf_i>:
 8007f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f9e:	b08b      	sub	sp, #44	; 0x2c
 8007fa0:	9206      	str	r2, [sp, #24]
 8007fa2:	000a      	movs	r2, r1
 8007fa4:	3243      	adds	r2, #67	; 0x43
 8007fa6:	9307      	str	r3, [sp, #28]
 8007fa8:	9005      	str	r0, [sp, #20]
 8007faa:	9204      	str	r2, [sp, #16]
 8007fac:	7e0a      	ldrb	r2, [r1, #24]
 8007fae:	000c      	movs	r4, r1
 8007fb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fb2:	2a78      	cmp	r2, #120	; 0x78
 8007fb4:	d809      	bhi.n	8007fca <_printf_i+0x2e>
 8007fb6:	2a62      	cmp	r2, #98	; 0x62
 8007fb8:	d80b      	bhi.n	8007fd2 <_printf_i+0x36>
 8007fba:	2a00      	cmp	r2, #0
 8007fbc:	d100      	bne.n	8007fc0 <_printf_i+0x24>
 8007fbe:	e0be      	b.n	800813e <_printf_i+0x1a2>
 8007fc0:	497c      	ldr	r1, [pc, #496]	; (80081b4 <_printf_i+0x218>)
 8007fc2:	9103      	str	r1, [sp, #12]
 8007fc4:	2a58      	cmp	r2, #88	; 0x58
 8007fc6:	d100      	bne.n	8007fca <_printf_i+0x2e>
 8007fc8:	e093      	b.n	80080f2 <_printf_i+0x156>
 8007fca:	0026      	movs	r6, r4
 8007fcc:	3642      	adds	r6, #66	; 0x42
 8007fce:	7032      	strb	r2, [r6, #0]
 8007fd0:	e022      	b.n	8008018 <_printf_i+0x7c>
 8007fd2:	0010      	movs	r0, r2
 8007fd4:	3863      	subs	r0, #99	; 0x63
 8007fd6:	2815      	cmp	r0, #21
 8007fd8:	d8f7      	bhi.n	8007fca <_printf_i+0x2e>
 8007fda:	f7f8 f893 	bl	8000104 <__gnu_thumb1_case_shi>
 8007fde:	0016      	.short	0x0016
 8007fe0:	fff6001f 	.word	0xfff6001f
 8007fe4:	fff6fff6 	.word	0xfff6fff6
 8007fe8:	001ffff6 	.word	0x001ffff6
 8007fec:	fff6fff6 	.word	0xfff6fff6
 8007ff0:	fff6fff6 	.word	0xfff6fff6
 8007ff4:	003600a3 	.word	0x003600a3
 8007ff8:	fff60083 	.word	0xfff60083
 8007ffc:	00b4fff6 	.word	0x00b4fff6
 8008000:	0036fff6 	.word	0x0036fff6
 8008004:	fff6fff6 	.word	0xfff6fff6
 8008008:	0087      	.short	0x0087
 800800a:	0026      	movs	r6, r4
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	3642      	adds	r6, #66	; 0x42
 8008010:	1d11      	adds	r1, r2, #4
 8008012:	6019      	str	r1, [r3, #0]
 8008014:	6813      	ldr	r3, [r2, #0]
 8008016:	7033      	strb	r3, [r6, #0]
 8008018:	2301      	movs	r3, #1
 800801a:	e0a2      	b.n	8008162 <_printf_i+0x1c6>
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	6809      	ldr	r1, [r1, #0]
 8008020:	1d02      	adds	r2, r0, #4
 8008022:	060d      	lsls	r5, r1, #24
 8008024:	d50b      	bpl.n	800803e <_printf_i+0xa2>
 8008026:	6805      	ldr	r5, [r0, #0]
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	2d00      	cmp	r5, #0
 800802c:	da03      	bge.n	8008036 <_printf_i+0x9a>
 800802e:	232d      	movs	r3, #45	; 0x2d
 8008030:	9a04      	ldr	r2, [sp, #16]
 8008032:	426d      	negs	r5, r5
 8008034:	7013      	strb	r3, [r2, #0]
 8008036:	4b5f      	ldr	r3, [pc, #380]	; (80081b4 <_printf_i+0x218>)
 8008038:	270a      	movs	r7, #10
 800803a:	9303      	str	r3, [sp, #12]
 800803c:	e01b      	b.n	8008076 <_printf_i+0xda>
 800803e:	6805      	ldr	r5, [r0, #0]
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	0649      	lsls	r1, r1, #25
 8008044:	d5f1      	bpl.n	800802a <_printf_i+0x8e>
 8008046:	b22d      	sxth	r5, r5
 8008048:	e7ef      	b.n	800802a <_printf_i+0x8e>
 800804a:	680d      	ldr	r5, [r1, #0]
 800804c:	6819      	ldr	r1, [r3, #0]
 800804e:	1d08      	adds	r0, r1, #4
 8008050:	6018      	str	r0, [r3, #0]
 8008052:	062e      	lsls	r6, r5, #24
 8008054:	d501      	bpl.n	800805a <_printf_i+0xbe>
 8008056:	680d      	ldr	r5, [r1, #0]
 8008058:	e003      	b.n	8008062 <_printf_i+0xc6>
 800805a:	066d      	lsls	r5, r5, #25
 800805c:	d5fb      	bpl.n	8008056 <_printf_i+0xba>
 800805e:	680d      	ldr	r5, [r1, #0]
 8008060:	b2ad      	uxth	r5, r5
 8008062:	4b54      	ldr	r3, [pc, #336]	; (80081b4 <_printf_i+0x218>)
 8008064:	2708      	movs	r7, #8
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	2a6f      	cmp	r2, #111	; 0x6f
 800806a:	d000      	beq.n	800806e <_printf_i+0xd2>
 800806c:	3702      	adds	r7, #2
 800806e:	0023      	movs	r3, r4
 8008070:	2200      	movs	r2, #0
 8008072:	3343      	adds	r3, #67	; 0x43
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	6863      	ldr	r3, [r4, #4]
 8008078:	60a3      	str	r3, [r4, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	db03      	blt.n	8008086 <_printf_i+0xea>
 800807e:	2104      	movs	r1, #4
 8008080:	6822      	ldr	r2, [r4, #0]
 8008082:	438a      	bics	r2, r1
 8008084:	6022      	str	r2, [r4, #0]
 8008086:	2d00      	cmp	r5, #0
 8008088:	d102      	bne.n	8008090 <_printf_i+0xf4>
 800808a:	9e04      	ldr	r6, [sp, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00c      	beq.n	80080aa <_printf_i+0x10e>
 8008090:	9e04      	ldr	r6, [sp, #16]
 8008092:	0028      	movs	r0, r5
 8008094:	0039      	movs	r1, r7
 8008096:	f7f8 f8c5 	bl	8000224 <__aeabi_uidivmod>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	3e01      	subs	r6, #1
 800809e:	5c5b      	ldrb	r3, [r3, r1]
 80080a0:	7033      	strb	r3, [r6, #0]
 80080a2:	002b      	movs	r3, r5
 80080a4:	0005      	movs	r5, r0
 80080a6:	429f      	cmp	r7, r3
 80080a8:	d9f3      	bls.n	8008092 <_printf_i+0xf6>
 80080aa:	2f08      	cmp	r7, #8
 80080ac:	d109      	bne.n	80080c2 <_printf_i+0x126>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	07db      	lsls	r3, r3, #31
 80080b2:	d506      	bpl.n	80080c2 <_printf_i+0x126>
 80080b4:	6862      	ldr	r2, [r4, #4]
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	dc02      	bgt.n	80080c2 <_printf_i+0x126>
 80080bc:	2330      	movs	r3, #48	; 0x30
 80080be:	3e01      	subs	r6, #1
 80080c0:	7033      	strb	r3, [r6, #0]
 80080c2:	9b04      	ldr	r3, [sp, #16]
 80080c4:	1b9b      	subs	r3, r3, r6
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	9b07      	ldr	r3, [sp, #28]
 80080ca:	0021      	movs	r1, r4
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	9805      	ldr	r0, [sp, #20]
 80080d0:	9b06      	ldr	r3, [sp, #24]
 80080d2:	aa09      	add	r2, sp, #36	; 0x24
 80080d4:	f7ff fef2 	bl	8007ebc <_printf_common>
 80080d8:	3001      	adds	r0, #1
 80080da:	d147      	bne.n	800816c <_printf_i+0x1d0>
 80080dc:	2001      	movs	r0, #1
 80080de:	4240      	negs	r0, r0
 80080e0:	b00b      	add	sp, #44	; 0x2c
 80080e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e4:	2220      	movs	r2, #32
 80080e6:	6809      	ldr	r1, [r1, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	6022      	str	r2, [r4, #0]
 80080ec:	2278      	movs	r2, #120	; 0x78
 80080ee:	4932      	ldr	r1, [pc, #200]	; (80081b8 <_printf_i+0x21c>)
 80080f0:	9103      	str	r1, [sp, #12]
 80080f2:	0021      	movs	r1, r4
 80080f4:	3145      	adds	r1, #69	; 0x45
 80080f6:	700a      	strb	r2, [r1, #0]
 80080f8:	6819      	ldr	r1, [r3, #0]
 80080fa:	6822      	ldr	r2, [r4, #0]
 80080fc:	c920      	ldmia	r1!, {r5}
 80080fe:	0610      	lsls	r0, r2, #24
 8008100:	d402      	bmi.n	8008108 <_printf_i+0x16c>
 8008102:	0650      	lsls	r0, r2, #25
 8008104:	d500      	bpl.n	8008108 <_printf_i+0x16c>
 8008106:	b2ad      	uxth	r5, r5
 8008108:	6019      	str	r1, [r3, #0]
 800810a:	07d3      	lsls	r3, r2, #31
 800810c:	d502      	bpl.n	8008114 <_printf_i+0x178>
 800810e:	2320      	movs	r3, #32
 8008110:	4313      	orrs	r3, r2
 8008112:	6023      	str	r3, [r4, #0]
 8008114:	2710      	movs	r7, #16
 8008116:	2d00      	cmp	r5, #0
 8008118:	d1a9      	bne.n	800806e <_printf_i+0xd2>
 800811a:	2220      	movs	r2, #32
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	4393      	bics	r3, r2
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	e7a4      	b.n	800806e <_printf_i+0xd2>
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	680d      	ldr	r5, [r1, #0]
 8008128:	1d10      	adds	r0, r2, #4
 800812a:	6949      	ldr	r1, [r1, #20]
 800812c:	6018      	str	r0, [r3, #0]
 800812e:	6813      	ldr	r3, [r2, #0]
 8008130:	062e      	lsls	r6, r5, #24
 8008132:	d501      	bpl.n	8008138 <_printf_i+0x19c>
 8008134:	6019      	str	r1, [r3, #0]
 8008136:	e002      	b.n	800813e <_printf_i+0x1a2>
 8008138:	066d      	lsls	r5, r5, #25
 800813a:	d5fb      	bpl.n	8008134 <_printf_i+0x198>
 800813c:	8019      	strh	r1, [r3, #0]
 800813e:	2300      	movs	r3, #0
 8008140:	9e04      	ldr	r6, [sp, #16]
 8008142:	6123      	str	r3, [r4, #16]
 8008144:	e7c0      	b.n	80080c8 <_printf_i+0x12c>
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	1d11      	adds	r1, r2, #4
 800814a:	6019      	str	r1, [r3, #0]
 800814c:	6816      	ldr	r6, [r2, #0]
 800814e:	2100      	movs	r1, #0
 8008150:	0030      	movs	r0, r6
 8008152:	6862      	ldr	r2, [r4, #4]
 8008154:	f000 f9d8 	bl	8008508 <memchr>
 8008158:	2800      	cmp	r0, #0
 800815a:	d001      	beq.n	8008160 <_printf_i+0x1c4>
 800815c:	1b80      	subs	r0, r0, r6
 800815e:	6060      	str	r0, [r4, #4]
 8008160:	6863      	ldr	r3, [r4, #4]
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	2300      	movs	r3, #0
 8008166:	9a04      	ldr	r2, [sp, #16]
 8008168:	7013      	strb	r3, [r2, #0]
 800816a:	e7ad      	b.n	80080c8 <_printf_i+0x12c>
 800816c:	0032      	movs	r2, r6
 800816e:	6923      	ldr	r3, [r4, #16]
 8008170:	9906      	ldr	r1, [sp, #24]
 8008172:	9805      	ldr	r0, [sp, #20]
 8008174:	9d07      	ldr	r5, [sp, #28]
 8008176:	47a8      	blx	r5
 8008178:	3001      	adds	r0, #1
 800817a:	d0af      	beq.n	80080dc <_printf_i+0x140>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	079b      	lsls	r3, r3, #30
 8008180:	d415      	bmi.n	80081ae <_printf_i+0x212>
 8008182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008184:	68e0      	ldr	r0, [r4, #12]
 8008186:	4298      	cmp	r0, r3
 8008188:	daaa      	bge.n	80080e0 <_printf_i+0x144>
 800818a:	0018      	movs	r0, r3
 800818c:	e7a8      	b.n	80080e0 <_printf_i+0x144>
 800818e:	0022      	movs	r2, r4
 8008190:	2301      	movs	r3, #1
 8008192:	9906      	ldr	r1, [sp, #24]
 8008194:	9805      	ldr	r0, [sp, #20]
 8008196:	9e07      	ldr	r6, [sp, #28]
 8008198:	3219      	adds	r2, #25
 800819a:	47b0      	blx	r6
 800819c:	3001      	adds	r0, #1
 800819e:	d09d      	beq.n	80080dc <_printf_i+0x140>
 80081a0:	3501      	adds	r5, #1
 80081a2:	68e3      	ldr	r3, [r4, #12]
 80081a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	42ab      	cmp	r3, r5
 80081aa:	dcf0      	bgt.n	800818e <_printf_i+0x1f2>
 80081ac:	e7e9      	b.n	8008182 <_printf_i+0x1e6>
 80081ae:	2500      	movs	r5, #0
 80081b0:	e7f7      	b.n	80081a2 <_printf_i+0x206>
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	080088c1 	.word	0x080088c1
 80081b8:	080088d2 	.word	0x080088d2

080081bc <__sflush_r>:
 80081bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081be:	898b      	ldrh	r3, [r1, #12]
 80081c0:	0005      	movs	r5, r0
 80081c2:	000c      	movs	r4, r1
 80081c4:	071a      	lsls	r2, r3, #28
 80081c6:	d45c      	bmi.n	8008282 <__sflush_r+0xc6>
 80081c8:	684a      	ldr	r2, [r1, #4]
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	dc04      	bgt.n	80081d8 <__sflush_r+0x1c>
 80081ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	dc01      	bgt.n	80081d8 <__sflush_r+0x1c>
 80081d4:	2000      	movs	r0, #0
 80081d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80081da:	2f00      	cmp	r7, #0
 80081dc:	d0fa      	beq.n	80081d4 <__sflush_r+0x18>
 80081de:	2200      	movs	r2, #0
 80081e0:	2080      	movs	r0, #128	; 0x80
 80081e2:	682e      	ldr	r6, [r5, #0]
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	001a      	movs	r2, r3
 80081e8:	0140      	lsls	r0, r0, #5
 80081ea:	6a21      	ldr	r1, [r4, #32]
 80081ec:	4002      	ands	r2, r0
 80081ee:	4203      	tst	r3, r0
 80081f0:	d034      	beq.n	800825c <__sflush_r+0xa0>
 80081f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	075b      	lsls	r3, r3, #29
 80081f8:	d506      	bpl.n	8008208 <__sflush_r+0x4c>
 80081fa:	6863      	ldr	r3, [r4, #4]
 80081fc:	1ac0      	subs	r0, r0, r3
 80081fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <__sflush_r+0x4c>
 8008204:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008206:	1ac0      	subs	r0, r0, r3
 8008208:	0002      	movs	r2, r0
 800820a:	2300      	movs	r3, #0
 800820c:	0028      	movs	r0, r5
 800820e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008210:	6a21      	ldr	r1, [r4, #32]
 8008212:	47b8      	blx	r7
 8008214:	89a2      	ldrh	r2, [r4, #12]
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d106      	bne.n	8008228 <__sflush_r+0x6c>
 800821a:	6829      	ldr	r1, [r5, #0]
 800821c:	291d      	cmp	r1, #29
 800821e:	d82c      	bhi.n	800827a <__sflush_r+0xbe>
 8008220:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <__sflush_r+0x110>)
 8008222:	410b      	asrs	r3, r1
 8008224:	07db      	lsls	r3, r3, #31
 8008226:	d428      	bmi.n	800827a <__sflush_r+0xbe>
 8008228:	2300      	movs	r3, #0
 800822a:	6063      	str	r3, [r4, #4]
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	04d2      	lsls	r2, r2, #19
 8008232:	d505      	bpl.n	8008240 <__sflush_r+0x84>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d102      	bne.n	800823e <__sflush_r+0x82>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d100      	bne.n	8008240 <__sflush_r+0x84>
 800823e:	6560      	str	r0, [r4, #84]	; 0x54
 8008240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008242:	602e      	str	r6, [r5, #0]
 8008244:	2900      	cmp	r1, #0
 8008246:	d0c5      	beq.n	80081d4 <__sflush_r+0x18>
 8008248:	0023      	movs	r3, r4
 800824a:	3344      	adds	r3, #68	; 0x44
 800824c:	4299      	cmp	r1, r3
 800824e:	d002      	beq.n	8008256 <__sflush_r+0x9a>
 8008250:	0028      	movs	r0, r5
 8008252:	f7ff fca5 	bl	8007ba0 <_free_r>
 8008256:	2000      	movs	r0, #0
 8008258:	6360      	str	r0, [r4, #52]	; 0x34
 800825a:	e7bc      	b.n	80081d6 <__sflush_r+0x1a>
 800825c:	2301      	movs	r3, #1
 800825e:	0028      	movs	r0, r5
 8008260:	47b8      	blx	r7
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	d1c6      	bne.n	80081f4 <__sflush_r+0x38>
 8008266:	682b      	ldr	r3, [r5, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0c3      	beq.n	80081f4 <__sflush_r+0x38>
 800826c:	2b1d      	cmp	r3, #29
 800826e:	d001      	beq.n	8008274 <__sflush_r+0xb8>
 8008270:	2b16      	cmp	r3, #22
 8008272:	d101      	bne.n	8008278 <__sflush_r+0xbc>
 8008274:	602e      	str	r6, [r5, #0]
 8008276:	e7ad      	b.n	80081d4 <__sflush_r+0x18>
 8008278:	89a2      	ldrh	r2, [r4, #12]
 800827a:	2340      	movs	r3, #64	; 0x40
 800827c:	4313      	orrs	r3, r2
 800827e:	81a3      	strh	r3, [r4, #12]
 8008280:	e7a9      	b.n	80081d6 <__sflush_r+0x1a>
 8008282:	690e      	ldr	r6, [r1, #16]
 8008284:	2e00      	cmp	r6, #0
 8008286:	d0a5      	beq.n	80081d4 <__sflush_r+0x18>
 8008288:	680f      	ldr	r7, [r1, #0]
 800828a:	600e      	str	r6, [r1, #0]
 800828c:	1bba      	subs	r2, r7, r6
 800828e:	9201      	str	r2, [sp, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	079b      	lsls	r3, r3, #30
 8008294:	d100      	bne.n	8008298 <__sflush_r+0xdc>
 8008296:	694a      	ldr	r2, [r1, #20]
 8008298:	60a2      	str	r2, [r4, #8]
 800829a:	9b01      	ldr	r3, [sp, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	dd99      	ble.n	80081d4 <__sflush_r+0x18>
 80082a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082a2:	0032      	movs	r2, r6
 80082a4:	001f      	movs	r7, r3
 80082a6:	0028      	movs	r0, r5
 80082a8:	9b01      	ldr	r3, [sp, #4]
 80082aa:	6a21      	ldr	r1, [r4, #32]
 80082ac:	47b8      	blx	r7
 80082ae:	2800      	cmp	r0, #0
 80082b0:	dc06      	bgt.n	80082c0 <__sflush_r+0x104>
 80082b2:	2340      	movs	r3, #64	; 0x40
 80082b4:	2001      	movs	r0, #1
 80082b6:	89a2      	ldrh	r2, [r4, #12]
 80082b8:	4240      	negs	r0, r0
 80082ba:	4313      	orrs	r3, r2
 80082bc:	81a3      	strh	r3, [r4, #12]
 80082be:	e78a      	b.n	80081d6 <__sflush_r+0x1a>
 80082c0:	9b01      	ldr	r3, [sp, #4]
 80082c2:	1836      	adds	r6, r6, r0
 80082c4:	1a1b      	subs	r3, r3, r0
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	e7e7      	b.n	800829a <__sflush_r+0xde>
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	dfbffffe 	.word	0xdfbffffe

080082d0 <_fflush_r>:
 80082d0:	690b      	ldr	r3, [r1, #16]
 80082d2:	b570      	push	{r4, r5, r6, lr}
 80082d4:	0005      	movs	r5, r0
 80082d6:	000c      	movs	r4, r1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d102      	bne.n	80082e2 <_fflush_r+0x12>
 80082dc:	2500      	movs	r5, #0
 80082de:	0028      	movs	r0, r5
 80082e0:	bd70      	pop	{r4, r5, r6, pc}
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d004      	beq.n	80082f0 <_fflush_r+0x20>
 80082e6:	6a03      	ldr	r3, [r0, #32]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <_fflush_r+0x20>
 80082ec:	f7ff fb2c 	bl	8007948 <__sinit>
 80082f0:	220c      	movs	r2, #12
 80082f2:	5ea3      	ldrsh	r3, [r4, r2]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0f1      	beq.n	80082dc <_fflush_r+0xc>
 80082f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082fa:	07d2      	lsls	r2, r2, #31
 80082fc:	d404      	bmi.n	8008308 <_fflush_r+0x38>
 80082fe:	059b      	lsls	r3, r3, #22
 8008300:	d402      	bmi.n	8008308 <_fflush_r+0x38>
 8008302:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008304:	f7ff fc42 	bl	8007b8c <__retarget_lock_acquire_recursive>
 8008308:	0028      	movs	r0, r5
 800830a:	0021      	movs	r1, r4
 800830c:	f7ff ff56 	bl	80081bc <__sflush_r>
 8008310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008312:	0005      	movs	r5, r0
 8008314:	07db      	lsls	r3, r3, #31
 8008316:	d4e2      	bmi.n	80082de <_fflush_r+0xe>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	059b      	lsls	r3, r3, #22
 800831c:	d4df      	bmi.n	80082de <_fflush_r+0xe>
 800831e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008320:	f7ff fc35 	bl	8007b8e <__retarget_lock_release_recursive>
 8008324:	e7db      	b.n	80082de <_fflush_r+0xe>

08008326 <__swbuf_r>:
 8008326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008328:	0006      	movs	r6, r0
 800832a:	000d      	movs	r5, r1
 800832c:	0014      	movs	r4, r2
 800832e:	2800      	cmp	r0, #0
 8008330:	d004      	beq.n	800833c <__swbuf_r+0x16>
 8008332:	6a03      	ldr	r3, [r0, #32]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <__swbuf_r+0x16>
 8008338:	f7ff fb06 	bl	8007948 <__sinit>
 800833c:	69a3      	ldr	r3, [r4, #24]
 800833e:	60a3      	str	r3, [r4, #8]
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	071b      	lsls	r3, r3, #28
 8008344:	d528      	bpl.n	8008398 <__swbuf_r+0x72>
 8008346:	6923      	ldr	r3, [r4, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d025      	beq.n	8008398 <__swbuf_r+0x72>
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	6820      	ldr	r0, [r4, #0]
 8008350:	b2ef      	uxtb	r7, r5
 8008352:	1ac0      	subs	r0, r0, r3
 8008354:	6963      	ldr	r3, [r4, #20]
 8008356:	b2ed      	uxtb	r5, r5
 8008358:	4283      	cmp	r3, r0
 800835a:	dc05      	bgt.n	8008368 <__swbuf_r+0x42>
 800835c:	0021      	movs	r1, r4
 800835e:	0030      	movs	r0, r6
 8008360:	f7ff ffb6 	bl	80082d0 <_fflush_r>
 8008364:	2800      	cmp	r0, #0
 8008366:	d11d      	bne.n	80083a4 <__swbuf_r+0x7e>
 8008368:	68a3      	ldr	r3, [r4, #8]
 800836a:	3001      	adds	r0, #1
 800836c:	3b01      	subs	r3, #1
 800836e:	60a3      	str	r3, [r4, #8]
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	1c5a      	adds	r2, r3, #1
 8008374:	6022      	str	r2, [r4, #0]
 8008376:	701f      	strb	r7, [r3, #0]
 8008378:	6963      	ldr	r3, [r4, #20]
 800837a:	4283      	cmp	r3, r0
 800837c:	d004      	beq.n	8008388 <__swbuf_r+0x62>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	07db      	lsls	r3, r3, #31
 8008382:	d507      	bpl.n	8008394 <__swbuf_r+0x6e>
 8008384:	2d0a      	cmp	r5, #10
 8008386:	d105      	bne.n	8008394 <__swbuf_r+0x6e>
 8008388:	0021      	movs	r1, r4
 800838a:	0030      	movs	r0, r6
 800838c:	f7ff ffa0 	bl	80082d0 <_fflush_r>
 8008390:	2800      	cmp	r0, #0
 8008392:	d107      	bne.n	80083a4 <__swbuf_r+0x7e>
 8008394:	0028      	movs	r0, r5
 8008396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008398:	0021      	movs	r1, r4
 800839a:	0030      	movs	r0, r6
 800839c:	f000 f806 	bl	80083ac <__swsetup_r>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d0d3      	beq.n	800834c <__swbuf_r+0x26>
 80083a4:	2501      	movs	r5, #1
 80083a6:	426d      	negs	r5, r5
 80083a8:	e7f4      	b.n	8008394 <__swbuf_r+0x6e>
	...

080083ac <__swsetup_r>:
 80083ac:	4b30      	ldr	r3, [pc, #192]	; (8008470 <__swsetup_r+0xc4>)
 80083ae:	b570      	push	{r4, r5, r6, lr}
 80083b0:	0005      	movs	r5, r0
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	000c      	movs	r4, r1
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d004      	beq.n	80083c4 <__swsetup_r+0x18>
 80083ba:	6a03      	ldr	r3, [r0, #32]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <__swsetup_r+0x18>
 80083c0:	f7ff fac2 	bl	8007948 <__sinit>
 80083c4:	230c      	movs	r3, #12
 80083c6:	5ee2      	ldrsh	r2, [r4, r3]
 80083c8:	b293      	uxth	r3, r2
 80083ca:	0711      	lsls	r1, r2, #28
 80083cc:	d423      	bmi.n	8008416 <__swsetup_r+0x6a>
 80083ce:	06d9      	lsls	r1, r3, #27
 80083d0:	d407      	bmi.n	80083e2 <__swsetup_r+0x36>
 80083d2:	2309      	movs	r3, #9
 80083d4:	2001      	movs	r0, #1
 80083d6:	602b      	str	r3, [r5, #0]
 80083d8:	3337      	adds	r3, #55	; 0x37
 80083da:	4313      	orrs	r3, r2
 80083dc:	81a3      	strh	r3, [r4, #12]
 80083de:	4240      	negs	r0, r0
 80083e0:	bd70      	pop	{r4, r5, r6, pc}
 80083e2:	075b      	lsls	r3, r3, #29
 80083e4:	d513      	bpl.n	800840e <__swsetup_r+0x62>
 80083e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083e8:	2900      	cmp	r1, #0
 80083ea:	d008      	beq.n	80083fe <__swsetup_r+0x52>
 80083ec:	0023      	movs	r3, r4
 80083ee:	3344      	adds	r3, #68	; 0x44
 80083f0:	4299      	cmp	r1, r3
 80083f2:	d002      	beq.n	80083fa <__swsetup_r+0x4e>
 80083f4:	0028      	movs	r0, r5
 80083f6:	f7ff fbd3 	bl	8007ba0 <_free_r>
 80083fa:	2300      	movs	r3, #0
 80083fc:	6363      	str	r3, [r4, #52]	; 0x34
 80083fe:	2224      	movs	r2, #36	; 0x24
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	4393      	bics	r3, r2
 8008404:	81a3      	strh	r3, [r4, #12]
 8008406:	2300      	movs	r3, #0
 8008408:	6063      	str	r3, [r4, #4]
 800840a:	6923      	ldr	r3, [r4, #16]
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	2308      	movs	r3, #8
 8008410:	89a2      	ldrh	r2, [r4, #12]
 8008412:	4313      	orrs	r3, r2
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10b      	bne.n	8008434 <__swsetup_r+0x88>
 800841c:	21a0      	movs	r1, #160	; 0xa0
 800841e:	2280      	movs	r2, #128	; 0x80
 8008420:	89a3      	ldrh	r3, [r4, #12]
 8008422:	0089      	lsls	r1, r1, #2
 8008424:	0092      	lsls	r2, r2, #2
 8008426:	400b      	ands	r3, r1
 8008428:	4293      	cmp	r3, r2
 800842a:	d003      	beq.n	8008434 <__swsetup_r+0x88>
 800842c:	0021      	movs	r1, r4
 800842e:	0028      	movs	r0, r5
 8008430:	f000 f89e 	bl	8008570 <__smakebuf_r>
 8008434:	220c      	movs	r2, #12
 8008436:	5ea3      	ldrsh	r3, [r4, r2]
 8008438:	2001      	movs	r0, #1
 800843a:	001a      	movs	r2, r3
 800843c:	b299      	uxth	r1, r3
 800843e:	4002      	ands	r2, r0
 8008440:	4203      	tst	r3, r0
 8008442:	d00f      	beq.n	8008464 <__swsetup_r+0xb8>
 8008444:	2200      	movs	r2, #0
 8008446:	60a2      	str	r2, [r4, #8]
 8008448:	6962      	ldr	r2, [r4, #20]
 800844a:	4252      	negs	r2, r2
 800844c:	61a2      	str	r2, [r4, #24]
 800844e:	2000      	movs	r0, #0
 8008450:	6922      	ldr	r2, [r4, #16]
 8008452:	4282      	cmp	r2, r0
 8008454:	d1c4      	bne.n	80083e0 <__swsetup_r+0x34>
 8008456:	0609      	lsls	r1, r1, #24
 8008458:	d5c2      	bpl.n	80083e0 <__swsetup_r+0x34>
 800845a:	2240      	movs	r2, #64	; 0x40
 800845c:	4313      	orrs	r3, r2
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	3801      	subs	r0, #1
 8008462:	e7bd      	b.n	80083e0 <__swsetup_r+0x34>
 8008464:	0788      	lsls	r0, r1, #30
 8008466:	d400      	bmi.n	800846a <__swsetup_r+0xbe>
 8008468:	6962      	ldr	r2, [r4, #20]
 800846a:	60a2      	str	r2, [r4, #8]
 800846c:	e7ef      	b.n	800844e <__swsetup_r+0xa2>
 800846e:	46c0      	nop			; (mov r8, r8)
 8008470:	2000006c 	.word	0x2000006c

08008474 <_raise_r>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	0004      	movs	r4, r0
 8008478:	000d      	movs	r5, r1
 800847a:	291f      	cmp	r1, #31
 800847c:	d904      	bls.n	8008488 <_raise_r+0x14>
 800847e:	2316      	movs	r3, #22
 8008480:	6003      	str	r3, [r0, #0]
 8008482:	2001      	movs	r0, #1
 8008484:	4240      	negs	r0, r0
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d004      	beq.n	8008498 <_raise_r+0x24>
 800848e:	008a      	lsls	r2, r1, #2
 8008490:	189b      	adds	r3, r3, r2
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	2a00      	cmp	r2, #0
 8008496:	d108      	bne.n	80084aa <_raise_r+0x36>
 8008498:	0020      	movs	r0, r4
 800849a:	f000 f831 	bl	8008500 <_getpid_r>
 800849e:	002a      	movs	r2, r5
 80084a0:	0001      	movs	r1, r0
 80084a2:	0020      	movs	r0, r4
 80084a4:	f000 f81a 	bl	80084dc <_kill_r>
 80084a8:	e7ed      	b.n	8008486 <_raise_r+0x12>
 80084aa:	2000      	movs	r0, #0
 80084ac:	2a01      	cmp	r2, #1
 80084ae:	d0ea      	beq.n	8008486 <_raise_r+0x12>
 80084b0:	1c51      	adds	r1, r2, #1
 80084b2:	d103      	bne.n	80084bc <_raise_r+0x48>
 80084b4:	2316      	movs	r3, #22
 80084b6:	3001      	adds	r0, #1
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	e7e4      	b.n	8008486 <_raise_r+0x12>
 80084bc:	2400      	movs	r4, #0
 80084be:	0028      	movs	r0, r5
 80084c0:	601c      	str	r4, [r3, #0]
 80084c2:	4790      	blx	r2
 80084c4:	0020      	movs	r0, r4
 80084c6:	e7de      	b.n	8008486 <_raise_r+0x12>

080084c8 <raise>:
 80084c8:	b510      	push	{r4, lr}
 80084ca:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <raise+0x10>)
 80084cc:	0001      	movs	r1, r0
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	f7ff ffd0 	bl	8008474 <_raise_r>
 80084d4:	bd10      	pop	{r4, pc}
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	2000006c 	.word	0x2000006c

080084dc <_kill_r>:
 80084dc:	2300      	movs	r3, #0
 80084de:	b570      	push	{r4, r5, r6, lr}
 80084e0:	4d06      	ldr	r5, [pc, #24]	; (80084fc <_kill_r+0x20>)
 80084e2:	0004      	movs	r4, r0
 80084e4:	0008      	movs	r0, r1
 80084e6:	0011      	movs	r1, r2
 80084e8:	602b      	str	r3, [r5, #0]
 80084ea:	f7fb fc47 	bl	8003d7c <_kill>
 80084ee:	1c43      	adds	r3, r0, #1
 80084f0:	d103      	bne.n	80084fa <_kill_r+0x1e>
 80084f2:	682b      	ldr	r3, [r5, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d000      	beq.n	80084fa <_kill_r+0x1e>
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	200005d0 	.word	0x200005d0

08008500 <_getpid_r>:
 8008500:	b510      	push	{r4, lr}
 8008502:	f7fb fc35 	bl	8003d70 <_getpid>
 8008506:	bd10      	pop	{r4, pc}

08008508 <memchr>:
 8008508:	b2c9      	uxtb	r1, r1
 800850a:	1882      	adds	r2, r0, r2
 800850c:	4290      	cmp	r0, r2
 800850e:	d101      	bne.n	8008514 <memchr+0xc>
 8008510:	2000      	movs	r0, #0
 8008512:	4770      	bx	lr
 8008514:	7803      	ldrb	r3, [r0, #0]
 8008516:	428b      	cmp	r3, r1
 8008518:	d0fb      	beq.n	8008512 <memchr+0xa>
 800851a:	3001      	adds	r0, #1
 800851c:	e7f6      	b.n	800850c <memchr+0x4>
	...

08008520 <__swhatbuf_r>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	000e      	movs	r6, r1
 8008524:	001d      	movs	r5, r3
 8008526:	230e      	movs	r3, #14
 8008528:	5ec9      	ldrsh	r1, [r1, r3]
 800852a:	0014      	movs	r4, r2
 800852c:	b096      	sub	sp, #88	; 0x58
 800852e:	2900      	cmp	r1, #0
 8008530:	da0c      	bge.n	800854c <__swhatbuf_r+0x2c>
 8008532:	89b2      	ldrh	r2, [r6, #12]
 8008534:	2380      	movs	r3, #128	; 0x80
 8008536:	0011      	movs	r1, r2
 8008538:	4019      	ands	r1, r3
 800853a:	421a      	tst	r2, r3
 800853c:	d013      	beq.n	8008566 <__swhatbuf_r+0x46>
 800853e:	2100      	movs	r1, #0
 8008540:	3b40      	subs	r3, #64	; 0x40
 8008542:	2000      	movs	r0, #0
 8008544:	6029      	str	r1, [r5, #0]
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	b016      	add	sp, #88	; 0x58
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	466a      	mov	r2, sp
 800854e:	f000 f84d 	bl	80085ec <_fstat_r>
 8008552:	2800      	cmp	r0, #0
 8008554:	dbed      	blt.n	8008532 <__swhatbuf_r+0x12>
 8008556:	23f0      	movs	r3, #240	; 0xf0
 8008558:	9901      	ldr	r1, [sp, #4]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	4019      	ands	r1, r3
 800855e:	4b03      	ldr	r3, [pc, #12]	; (800856c <__swhatbuf_r+0x4c>)
 8008560:	18c9      	adds	r1, r1, r3
 8008562:	424b      	negs	r3, r1
 8008564:	4159      	adcs	r1, r3
 8008566:	2380      	movs	r3, #128	; 0x80
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	e7ea      	b.n	8008542 <__swhatbuf_r+0x22>
 800856c:	ffffe000 	.word	0xffffe000

08008570 <__smakebuf_r>:
 8008570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008572:	2602      	movs	r6, #2
 8008574:	898b      	ldrh	r3, [r1, #12]
 8008576:	0005      	movs	r5, r0
 8008578:	000c      	movs	r4, r1
 800857a:	4233      	tst	r3, r6
 800857c:	d006      	beq.n	800858c <__smakebuf_r+0x1c>
 800857e:	0023      	movs	r3, r4
 8008580:	3347      	adds	r3, #71	; 0x47
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	6123      	str	r3, [r4, #16]
 8008586:	2301      	movs	r3, #1
 8008588:	6163      	str	r3, [r4, #20]
 800858a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800858c:	466a      	mov	r2, sp
 800858e:	ab01      	add	r3, sp, #4
 8008590:	f7ff ffc6 	bl	8008520 <__swhatbuf_r>
 8008594:	9900      	ldr	r1, [sp, #0]
 8008596:	0007      	movs	r7, r0
 8008598:	0028      	movs	r0, r5
 800859a:	f7ff f8c5 	bl	8007728 <_malloc_r>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d108      	bne.n	80085b4 <__smakebuf_r+0x44>
 80085a2:	220c      	movs	r2, #12
 80085a4:	5ea3      	ldrsh	r3, [r4, r2]
 80085a6:	059a      	lsls	r2, r3, #22
 80085a8:	d4ef      	bmi.n	800858a <__smakebuf_r+0x1a>
 80085aa:	2203      	movs	r2, #3
 80085ac:	4393      	bics	r3, r2
 80085ae:	431e      	orrs	r6, r3
 80085b0:	81a6      	strh	r6, [r4, #12]
 80085b2:	e7e4      	b.n	800857e <__smakebuf_r+0xe>
 80085b4:	2380      	movs	r3, #128	; 0x80
 80085b6:	89a2      	ldrh	r2, [r4, #12]
 80085b8:	6020      	str	r0, [r4, #0]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	9b00      	ldr	r3, [sp, #0]
 80085c0:	6120      	str	r0, [r4, #16]
 80085c2:	6163      	str	r3, [r4, #20]
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00c      	beq.n	80085e4 <__smakebuf_r+0x74>
 80085ca:	0028      	movs	r0, r5
 80085cc:	230e      	movs	r3, #14
 80085ce:	5ee1      	ldrsh	r1, [r4, r3]
 80085d0:	f000 f81e 	bl	8008610 <_isatty_r>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d005      	beq.n	80085e4 <__smakebuf_r+0x74>
 80085d8:	2303      	movs	r3, #3
 80085da:	89a2      	ldrh	r2, [r4, #12]
 80085dc:	439a      	bics	r2, r3
 80085de:	3b02      	subs	r3, #2
 80085e0:	4313      	orrs	r3, r2
 80085e2:	81a3      	strh	r3, [r4, #12]
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	433b      	orrs	r3, r7
 80085e8:	81a3      	strh	r3, [r4, #12]
 80085ea:	e7ce      	b.n	800858a <__smakebuf_r+0x1a>

080085ec <_fstat_r>:
 80085ec:	2300      	movs	r3, #0
 80085ee:	b570      	push	{r4, r5, r6, lr}
 80085f0:	4d06      	ldr	r5, [pc, #24]	; (800860c <_fstat_r+0x20>)
 80085f2:	0004      	movs	r4, r0
 80085f4:	0008      	movs	r0, r1
 80085f6:	0011      	movs	r1, r2
 80085f8:	602b      	str	r3, [r5, #0]
 80085fa:	f7fb fc1e 	bl	8003e3a <_fstat>
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	d103      	bne.n	800860a <_fstat_r+0x1e>
 8008602:	682b      	ldr	r3, [r5, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d000      	beq.n	800860a <_fstat_r+0x1e>
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	200005d0 	.word	0x200005d0

08008610 <_isatty_r>:
 8008610:	2300      	movs	r3, #0
 8008612:	b570      	push	{r4, r5, r6, lr}
 8008614:	4d06      	ldr	r5, [pc, #24]	; (8008630 <_isatty_r+0x20>)
 8008616:	0004      	movs	r4, r0
 8008618:	0008      	movs	r0, r1
 800861a:	602b      	str	r3, [r5, #0]
 800861c:	f7fb fc1b 	bl	8003e56 <_isatty>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d103      	bne.n	800862c <_isatty_r+0x1c>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d000      	beq.n	800862c <_isatty_r+0x1c>
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	bd70      	pop	{r4, r5, r6, pc}
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	200005d0 	.word	0x200005d0

08008634 <_init>:
 8008634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008636:	46c0      	nop			; (mov r8, r8)
 8008638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863a:	bc08      	pop	{r3}
 800863c:	469e      	mov	lr, r3
 800863e:	4770      	bx	lr

08008640 <_fini>:
 8008640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008646:	bc08      	pop	{r3}
 8008648:	469e      	mov	lr, r3
 800864a:	4770      	bx	lr
